/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TFilesResp : TBase
{

  public TSStatus Status { get; set; }

  public List<TFile> Files { get; set; }

  public TFilesResp()
  {
  }

  public TFilesResp(TSStatus status, List<TFile> files) : this()
  {
    this.Status = status;
    this.Files = files;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      bool isset_files = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Status = new TSStatus();
              await Status.ReadAsync(iprot, cancellationToken);
              isset_status = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list109 = await iprot.ReadListBeginAsync(cancellationToken);
                Files = new List<TFile>(_list109.Count);
                for(int _i110 = 0; _i110 < _list109.Count; ++_i110)
                {
                  TFile _elem111;
                  _elem111 = new TFile();
                  await _elem111.ReadAsync(iprot, cancellationToken);
                  Files.Add(_elem111);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_files = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_status)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_files)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp112 = new TStruct("TFilesResp");
      await oprot.WriteStructBeginAsync(tmp112, cancellationToken);
      var tmp113 = new TField();
      if((Status != null))
      {
        tmp113.Name = "status";
        tmp113.Type = TType.Struct;
        tmp113.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp113, cancellationToken);
        await Status.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Files != null))
      {
        tmp113.Name = "files";
        tmp113.Type = TType.List;
        tmp113.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp113, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Files.Count), cancellationToken);
          foreach (TFile _iter114 in Files)
          {
            await _iter114.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TFilesResp other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(Status, other.Status)
      && TCollections.Equals(Files, other.Files);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Status != null))
      {
        hashcode = (hashcode * 397) + Status.GetHashCode();
      }
      if((Files != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Files);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp115 = new StringBuilder("TFilesResp(");
    if((Status != null))
    {
      tmp115.Append(", Status: ");
      Status.ToString(tmp115);
    }
    if((Files != null))
    {
      tmp115.Append(", Files: ");
      Files.ToString(tmp115);
    }
    tmp115.Append(')');
    return tmp115.ToString();
  }
}

