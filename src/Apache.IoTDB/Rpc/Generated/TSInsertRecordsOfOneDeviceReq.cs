/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TSInsertRecordsOfOneDeviceReq : TBase
{
  private bool _isAligned;

  public long SessionId { get; set; }

  public string PrefixPath { get; set; }

  public List<List<string>> MeasurementsList { get; set; }

  public List<byte[]> ValuesList { get; set; }

  public List<long> Timestamps { get; set; }

  public bool IsAligned
  {
    get
    {
      return _isAligned;
    }
    set
    {
      __isset.isAligned = true;
      this._isAligned = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool isAligned;
  }

  public TSInsertRecordsOfOneDeviceReq()
  {
  }

  public TSInsertRecordsOfOneDeviceReq(long sessionId, string prefixPath, List<List<string>> measurementsList, List<byte[]> valuesList, List<long> timestamps) : this()
  {
    this.SessionId = sessionId;
    this.PrefixPath = prefixPath;
    this.MeasurementsList = measurementsList;
    this.ValuesList = valuesList;
    this.Timestamps = timestamps;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_prefixPath = false;
      bool isset_measurementsList = false;
      bool isset_valuesList = false;
      bool isset_timestamps = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              PrefixPath = await iprot.ReadStringAsync(cancellationToken);
              isset_prefixPath = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list247 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementsList = new List<List<string>>(_list247.Count);
                for(int _i248 = 0; _i248 < _list247.Count; ++_i248)
                {
                  List<string> _elem249;
                  {
                    TList _list250 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem249 = new List<string>(_list250.Count);
                    for(int _i251 = 0; _i251 < _list250.Count; ++_i251)
                    {
                      string _elem252;
                      _elem252 = await iprot.ReadStringAsync(cancellationToken);
                      _elem249.Add(_elem252);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  MeasurementsList.Add(_elem249);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_measurementsList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list253 = await iprot.ReadListBeginAsync(cancellationToken);
                ValuesList = new List<byte[]>(_list253.Count);
                for(int _i254 = 0; _i254 < _list253.Count; ++_i254)
                {
                  byte[] _elem255;
                  _elem255 = await iprot.ReadBinaryAsync(cancellationToken);
                  ValuesList.Add(_elem255);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_valuesList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list256 = await iprot.ReadListBeginAsync(cancellationToken);
                Timestamps = new List<long>(_list256.Count);
                for(int _i257 = 0; _i257 < _list256.Count; ++_i257)
                {
                  long _elem258;
                  _elem258 = await iprot.ReadI64Async(cancellationToken);
                  Timestamps.Add(_elem258);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_timestamps = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Bool)
            {
              IsAligned = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_prefixPath)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_measurementsList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_valuesList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_timestamps)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp259 = new TStruct("TSInsertRecordsOfOneDeviceReq");
      await oprot.WriteStructBeginAsync(tmp259, cancellationToken);
      var tmp260 = new TField();
      tmp260.Name = "sessionId";
      tmp260.Type = TType.I64;
      tmp260.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((PrefixPath != null))
      {
        tmp260.Name = "prefixPath";
        tmp260.Type = TType.String;
        tmp260.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
        await oprot.WriteStringAsync(PrefixPath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((MeasurementsList != null))
      {
        tmp260.Name = "measurementsList";
        tmp260.Type = TType.List;
        tmp260.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, MeasurementsList.Count), cancellationToken);
          foreach (List<string> _iter261 in MeasurementsList)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, _iter261.Count), cancellationToken);
              foreach (string _iter262 in _iter261)
              {
                await oprot.WriteStringAsync(_iter262, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ValuesList != null))
      {
        tmp260.Name = "valuesList";
        tmp260.Type = TType.List;
        tmp260.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, ValuesList.Count), cancellationToken);
          foreach (byte[] _iter263 in ValuesList)
          {
            await oprot.WriteBinaryAsync(_iter263, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Timestamps != null))
      {
        tmp260.Name = "timestamps";
        tmp260.Type = TType.List;
        tmp260.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I64, Timestamps.Count), cancellationToken);
          foreach (long _iter264 in Timestamps)
          {
            await oprot.WriteI64Async(_iter264, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.isAligned)
      {
        tmp260.Name = "isAligned";
        tmp260.Type = TType.Bool;
        tmp260.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
        await oprot.WriteBoolAsync(IsAligned, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSInsertRecordsOfOneDeviceReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && System.Object.Equals(PrefixPath, other.PrefixPath)
      && TCollections.Equals(MeasurementsList, other.MeasurementsList)
      && TCollections.Equals(ValuesList, other.ValuesList)
      && TCollections.Equals(Timestamps, other.Timestamps)
      && ((__isset.isAligned == other.__isset.isAligned) && ((!__isset.isAligned) || (System.Object.Equals(IsAligned, other.IsAligned))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((PrefixPath != null))
      {
        hashcode = (hashcode * 397) + PrefixPath.GetHashCode();
      }
      if((MeasurementsList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementsList);
      }
      if((ValuesList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ValuesList);
      }
      if((Timestamps != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Timestamps);
      }
      if(__isset.isAligned)
      {
        hashcode = (hashcode * 397) + IsAligned.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp265 = new StringBuilder("TSInsertRecordsOfOneDeviceReq(");
    tmp265.Append(", SessionId: ");
    SessionId.ToString(tmp265);
    if((PrefixPath != null))
    {
      tmp265.Append(", PrefixPath: ");
      PrefixPath.ToString(tmp265);
    }
    if((MeasurementsList != null))
    {
      tmp265.Append(", MeasurementsList: ");
      MeasurementsList.ToString(tmp265);
    }
    if((ValuesList != null))
    {
      tmp265.Append(", ValuesList: ");
      ValuesList.ToString(tmp265);
    }
    if((Timestamps != null))
    {
      tmp265.Append(", Timestamps: ");
      Timestamps.ToString(tmp265);
    }
    if(__isset.isAligned)
    {
      tmp265.Append(", IsAligned: ");
      IsAligned.ToString(tmp265);
    }
    tmp265.Append(')');
    return tmp265.ToString();
  }
}

