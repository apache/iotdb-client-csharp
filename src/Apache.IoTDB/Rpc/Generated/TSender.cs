/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TSender : TBase
{
  private TDataNodeLocation _dataNodeLocation;
  private TConfigNodeLocation _configNodeLocation;

  public TDataNodeLocation DataNodeLocation
  {
    get
    {
      return _dataNodeLocation;
    }
    set
    {
      __isset.dataNodeLocation = true;
      this._dataNodeLocation = value;
    }
  }

  public TConfigNodeLocation ConfigNodeLocation
  {
    get
    {
      return _configNodeLocation;
    }
    set
    {
      __isset.configNodeLocation = true;
      this._configNodeLocation = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool dataNodeLocation;
    public bool configNodeLocation;
  }

  public TSender()
  {
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              DataNodeLocation = new TDataNodeLocation();
              await DataNodeLocation.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              ConfigNodeLocation = new TConfigNodeLocation();
              await ConfigNodeLocation.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSender");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if((DataNodeLocation != null) && __isset.dataNodeLocation)
      {
        field.Name = "dataNodeLocation";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await DataNodeLocation.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ConfigNodeLocation != null) && __isset.configNodeLocation)
      {
        field.Name = "configNodeLocation";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await ConfigNodeLocation.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSender other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.dataNodeLocation == other.__isset.dataNodeLocation) && ((!__isset.dataNodeLocation) || (System.Object.Equals(DataNodeLocation, other.DataNodeLocation))))
      && ((__isset.configNodeLocation == other.__isset.configNodeLocation) && ((!__isset.configNodeLocation) || (System.Object.Equals(ConfigNodeLocation, other.ConfigNodeLocation))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((DataNodeLocation != null) && __isset.dataNodeLocation)
      {
        hashcode = (hashcode * 397) + DataNodeLocation.GetHashCode();
      }
      if((ConfigNodeLocation != null) && __isset.configNodeLocation)
      {
        hashcode = (hashcode * 397) + ConfigNodeLocation.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSender(");
    int tmp67 = 0;
    if((DataNodeLocation != null) && __isset.dataNodeLocation)
    {
      if(0 < tmp67++) { sb.Append(", "); }
      sb.Append("DataNodeLocation: ");
      DataNodeLocation.ToString(sb);
    }
    if((ConfigNodeLocation != null) && __isset.configNodeLocation)
    {
      if(0 < tmp67++) { sb.Append(", "); }
      sb.Append("ConfigNodeLocation: ");
      ConfigNodeLocation.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

