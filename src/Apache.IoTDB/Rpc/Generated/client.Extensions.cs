/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

public static class clientExtensions
{
  public static bool Equals(this Dictionary<string, int> instance, object that)
  {
    if (!(that is Dictionary<string, int> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<string, int> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<string, int> DeepCopy(this Dictionary<string, int> source)
  {
    if (source == null)
      return null;

    var tmp667 = new Dictionary<string, int>(source.Count);
    foreach (var pair in source)
      tmp667.Add((pair.Key != null) ? pair.Key : null, pair.Value);
    return tmp667;
  }


  public static bool Equals(this Dictionary<string, string> instance, object that)
  {
    if (!(that is Dictionary<string, string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<string, string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<string, string> DeepCopy(this Dictionary<string, string> source)
  {
    if (source == null)
      return null;

    var tmp668 = new Dictionary<string, string>(source.Count);
    foreach (var pair in source)
      tmp668.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value : null);
    return tmp668;
  }


  public static bool Equals(this List<Dictionary<string, string>> instance, object that)
  {
    if (!(that is List<Dictionary<string, string>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Dictionary<string, string>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Dictionary<string, string>> DeepCopy(this List<Dictionary<string, string>> source)
  {
    if (source == null)
      return null;

    var tmp669 = new List<Dictionary<string, string>>(source.Count);
    foreach (var elem in source)
      tmp669.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp669;
  }


  public static bool Equals(this List<List<int>> instance, object that)
  {
    if (!(that is List<List<int>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<List<int>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<List<int>> DeepCopy(this List<List<int>> source)
  {
    if (source == null)
      return null;

    var tmp670 = new List<List<int>>(source.Count);
    foreach (var elem in source)
      tmp670.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp670;
  }


  public static bool Equals(this List<List<string>> instance, object that)
  {
    if (!(that is List<List<string>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<List<string>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<List<string>> DeepCopy(this List<List<string>> source)
  {
    if (source == null)
      return null;

    var tmp671 = new List<List<string>>(source.Count);
    foreach (var elem in source)
      tmp671.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp671;
  }


  public static bool Equals(this List<TSConnectionInfo> instance, object that)
  {
    if (!(that is List<TSConnectionInfo> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TSConnectionInfo> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TSConnectionInfo> DeepCopy(this List<TSConnectionInfo> source)
  {
    if (source == null)
      return null;

    var tmp672 = new List<TSConnectionInfo>(source.Count);
    foreach (var elem in source)
      tmp672.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp672;
  }


  public static bool Equals(this List<TSStatus> instance, object that)
  {
    if (!(that is List<TSStatus> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TSStatus> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  // public static List<TSStatus> DeepCopy(this List<TSStatus> source)
  // {
  //   if (source == null)
  //     return null;

  //   var tmp673 = new List<TSStatus>(source.Count);
  //   foreach (var elem in source)
  //     tmp673.Add((elem != null) ? elem.DeepCopy() : null);
  //   return tmp673;
  // }


  public static bool Equals(this List<byte[]> instance, object that)
  {
    if (!(that is List<byte[]> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<byte[]> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<byte[]> DeepCopy(this List<byte[]> source)
  {
    if (source == null)
      return null;

    var tmp674 = new List<byte[]>(source.Count);
    foreach (var elem in source)
      tmp674.Add((elem != null) ? elem.ToArray() : null);
    return tmp674;
  }


  public static bool Equals(this List<int> instance, object that)
  {
    if (!(that is List<int> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<int> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<int> DeepCopy(this List<int> source)
  {
    if (source == null)
      return null;

    var tmp675 = new List<int>(source.Count);
    foreach (var elem in source)
      tmp675.Add(elem);
    return tmp675;
  }


  public static bool Equals(this List<long> instance, object that)
  {
    if (!(that is List<long> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<long> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<long> DeepCopy(this List<long> source)
  {
    if (source == null)
      return null;

    var tmp676 = new List<long>(source.Count);
    foreach (var elem in source)
      tmp676.Add(elem);
    return tmp676;
  }


  public static bool Equals(this List<sbyte> instance, object that)
  {
    if (!(that is List<sbyte> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<sbyte> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<sbyte> DeepCopy(this List<sbyte> source)
  {
    if (source == null)
      return null;

    var tmp677 = new List<sbyte>(source.Count);
    foreach (var elem in source)
      tmp677.Add(elem);
    return tmp677;
  }


  public static bool Equals(this List<string> instance, object that)
  {
    if (!(that is List<string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  // public static List<string> DeepCopy(this List<string> source)
  // {
  //   if (source == null)
  //     return null;

  //   var tmp678 = new List<string>(source.Count);
  //   foreach (var elem in source)
  //     tmp678.Add((elem != null) ? elem : null);
  //   return tmp678;
  // }


}
