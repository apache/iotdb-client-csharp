/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TSOpenSessionReq : TBase
{
  private string _password;
  private Dictionary<string, string> _configuration;

  /// <summary>
  /// 
  /// <seealso cref="TSProtocolVersion"/>
  /// </summary>
  public TSProtocolVersion Client_protocol { get; set; }

  public string ZoneId { get; set; }

  public string Username { get; set; }

  public string Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.password = true;
      this._password = value;
    }
  }

  public Dictionary<string, string> Configuration
  {
    get
    {
      return _configuration;
    }
    set
    {
      __isset.configuration = true;
      this._configuration = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool password;
    public bool configuration;
  }

  public TSOpenSessionReq()
  {
    this.Client_protocol = TSProtocolVersion.IOTDB_SERVICE_PROTOCOL_V3;
  }

  public TSOpenSessionReq(TSProtocolVersion client_protocol, string zoneId, string username) : this()
  {
    this.Client_protocol = client_protocol;
    this.ZoneId = zoneId;
    this.Username = username;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_client_protocol = false;
      bool isset_zoneId = false;
      bool isset_username = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Client_protocol = (TSProtocolVersion)await iprot.ReadI32Async(cancellationToken);
              isset_client_protocol = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ZoneId = await iprot.ReadStringAsync(cancellationToken);
              isset_zoneId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Username = await iprot.ReadStringAsync(cancellationToken);
              isset_username = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Map)
            {
              {
                TMap _map54 = await iprot.ReadMapBeginAsync(cancellationToken);
                Configuration = new Dictionary<string, string>(_map54.Count);
                for(int _i55 = 0; _i55 < _map54.Count; ++_i55)
                {
                  string _key56;
                  string _val57;
                  _key56 = await iprot.ReadStringAsync(cancellationToken);
                  _val57 = await iprot.ReadStringAsync(cancellationToken);
                  Configuration[_key56] = _val57;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_client_protocol)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_zoneId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_username)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSOpenSessionReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "client_protocol";
      field.Type = TType.I32;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI32Async((int)Client_protocol, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "zoneId";
      field.Type = TType.String;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteStringAsync(ZoneId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "username";
      field.Type = TType.String;
      field.ID = 3;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteStringAsync(Username, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (Password != null && __isset.password)
      {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Configuration != null && __isset.configuration)
      {
        field.Name = "configuration";
        field.Type = TType.Map;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
          foreach (string _iter58 in Configuration.Keys)
          {
            await oprot.WriteStringAsync(_iter58, cancellationToken);
            await oprot.WriteStringAsync(Configuration[_iter58], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TSOpenSessionReq;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(Client_protocol, other.Client_protocol)
      && System.Object.Equals(ZoneId, other.ZoneId)
      && System.Object.Equals(Username, other.Username)
      && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))))
      && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (TCollections.Equals(Configuration, other.Configuration))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + Client_protocol.GetHashCode();
      hashcode = (hashcode * 397) + ZoneId.GetHashCode();
      hashcode = (hashcode * 397) + Username.GetHashCode();
      if(__isset.password)
        hashcode = (hashcode * 397) + Password.GetHashCode();
      if(__isset.configuration)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSOpenSessionReq(");
    sb.Append(", Client_protocol: ");
    sb.Append(Client_protocol);
    sb.Append(", ZoneId: ");
    sb.Append(ZoneId);
    sb.Append(", Username: ");
    sb.Append(Username);
    if (Password != null && __isset.password)
    {
      sb.Append(", Password: ");
      sb.Append(Password);
    }
    if (Configuration != null && __isset.configuration)
    {
      sb.Append(", Configuration: ");
      sb.Append(Configuration);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

