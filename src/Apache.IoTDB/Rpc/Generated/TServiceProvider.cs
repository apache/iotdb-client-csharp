/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TServiceProvider : TBase
{

  public TEndPoint EndPoint { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="TServiceType"/>
  /// </summary>
  public TServiceType ServiceType { get; set; }

  public TServiceProvider()
  {
  }

  public TServiceProvider(TEndPoint endPoint, TServiceType serviceType) : this()
  {
    this.EndPoint = endPoint;
    this.ServiceType = serviceType;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_endPoint = false;
      bool isset_serviceType = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              EndPoint = new TEndPoint();
              await EndPoint.ReadAsync(iprot, cancellationToken);
              isset_endPoint = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              ServiceType = (TServiceType)await iprot.ReadI32Async(cancellationToken);
              isset_serviceType = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_endPoint)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_serviceType)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TServiceProvider");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "endPoint";
      field.Type = TType.Struct;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await EndPoint.WriteAsync(oprot, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "serviceType";
      field.Type = TType.I32;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI32Async((int)ServiceType, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TServiceProvider;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(EndPoint, other.EndPoint)
      && System.Object.Equals(ServiceType, other.ServiceType);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + EndPoint.GetHashCode();
      hashcode = (hashcode * 397) + ServiceType.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TServiceProvider(");
    sb.Append(", EndPoint: ");
    sb.Append(EndPoint== null ? "<null>" : EndPoint.ToString());
    sb.Append(", ServiceType: ");
    sb.Append(ServiceType);
    sb.Append(")");
    return sb.ToString();
  }
}

