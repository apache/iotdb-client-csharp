/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TSCreateMultiTimeseriesReq : TBase
{
  private List<Dictionary<string, string>> _propsList;
  private List<Dictionary<string, string>> _tagsList;
  private List<Dictionary<string, string>> _attributesList;
  private List<string> _measurementAliasList;

  public long SessionId { get; set; }

  public List<string> Paths { get; set; }

  public List<int> DataTypes { get; set; }

  public List<int> Encodings { get; set; }

  public List<int> Compressors { get; set; }

  public List<Dictionary<string, string>> PropsList
  {
    get
    {
      return _propsList;
    }
    set
    {
      __isset.propsList = true;
      this._propsList = value;
    }
  }

  public List<Dictionary<string, string>> TagsList
  {
    get
    {
      return _tagsList;
    }
    set
    {
      __isset.tagsList = true;
      this._tagsList = value;
    }
  }

  public List<Dictionary<string, string>> AttributesList
  {
    get
    {
      return _attributesList;
    }
    set
    {
      __isset.attributesList = true;
      this._attributesList = value;
    }
  }

  public List<string> MeasurementAliasList
  {
    get
    {
      return _measurementAliasList;
    }
    set
    {
      __isset.measurementAliasList = true;
      this._measurementAliasList = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool propsList;
    public bool tagsList;
    public bool attributesList;
    public bool measurementAliasList;
  }

  public TSCreateMultiTimeseriesReq()
  {
  }

  public TSCreateMultiTimeseriesReq(long sessionId, List<string> paths, List<int> dataTypes, List<int> encodings, List<int> compressors) : this()
  {
    this.SessionId = sessionId;
    this.Paths = paths;
    this.DataTypes = dataTypes;
    this.Encodings = encodings;
    this.Compressors = compressors;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_paths = false;
      bool isset_dataTypes = false;
      bool isset_encodings = false;
      bool isset_compressors = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list280 = await iprot.ReadListBeginAsync(cancellationToken);
                Paths = new List<string>(_list280.Count);
                for(int _i281 = 0; _i281 < _list280.Count; ++_i281)
                {
                  string _elem282;
                  _elem282 = await iprot.ReadStringAsync(cancellationToken);
                  Paths.Add(_elem282);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_paths = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list283 = await iprot.ReadListBeginAsync(cancellationToken);
                DataTypes = new List<int>(_list283.Count);
                for(int _i284 = 0; _i284 < _list283.Count; ++_i284)
                {
                  int _elem285;
                  _elem285 = await iprot.ReadI32Async(cancellationToken);
                  DataTypes.Add(_elem285);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_dataTypes = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list286 = await iprot.ReadListBeginAsync(cancellationToken);
                Encodings = new List<int>(_list286.Count);
                for(int _i287 = 0; _i287 < _list286.Count; ++_i287)
                {
                  int _elem288;
                  _elem288 = await iprot.ReadI32Async(cancellationToken);
                  Encodings.Add(_elem288);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_encodings = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list289 = await iprot.ReadListBeginAsync(cancellationToken);
                Compressors = new List<int>(_list289.Count);
                for(int _i290 = 0; _i290 < _list289.Count; ++_i290)
                {
                  int _elem291;
                  _elem291 = await iprot.ReadI32Async(cancellationToken);
                  Compressors.Add(_elem291);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_compressors = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list292 = await iprot.ReadListBeginAsync(cancellationToken);
                PropsList = new List<Dictionary<string, string>>(_list292.Count);
                for(int _i293 = 0; _i293 < _list292.Count; ++_i293)
                {
                  Dictionary<string, string> _elem294;
                  {
                    TMap _map295 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem294 = new Dictionary<string, string>(_map295.Count);
                    for(int _i296 = 0; _i296 < _map295.Count; ++_i296)
                    {
                      string _key297;
                      string _val298;
                      _key297 = await iprot.ReadStringAsync(cancellationToken);
                      _val298 = await iprot.ReadStringAsync(cancellationToken);
                      _elem294[_key297] = _val298;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  PropsList.Add(_elem294);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list299 = await iprot.ReadListBeginAsync(cancellationToken);
                TagsList = new List<Dictionary<string, string>>(_list299.Count);
                for(int _i300 = 0; _i300 < _list299.Count; ++_i300)
                {
                  Dictionary<string, string> _elem301;
                  {
                    TMap _map302 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem301 = new Dictionary<string, string>(_map302.Count);
                    for(int _i303 = 0; _i303 < _map302.Count; ++_i303)
                    {
                      string _key304;
                      string _val305;
                      _key304 = await iprot.ReadStringAsync(cancellationToken);
                      _val305 = await iprot.ReadStringAsync(cancellationToken);
                      _elem301[_key304] = _val305;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  TagsList.Add(_elem301);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.List)
            {
              {
                TList _list306 = await iprot.ReadListBeginAsync(cancellationToken);
                AttributesList = new List<Dictionary<string, string>>(_list306.Count);
                for(int _i307 = 0; _i307 < _list306.Count; ++_i307)
                {
                  Dictionary<string, string> _elem308;
                  {
                    TMap _map309 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem308 = new Dictionary<string, string>(_map309.Count);
                    for(int _i310 = 0; _i310 < _map309.Count; ++_i310)
                    {
                      string _key311;
                      string _val312;
                      _key311 = await iprot.ReadStringAsync(cancellationToken);
                      _val312 = await iprot.ReadStringAsync(cancellationToken);
                      _elem308[_key311] = _val312;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  AttributesList.Add(_elem308);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                TList _list313 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementAliasList = new List<string>(_list313.Count);
                for(int _i314 = 0; _i314 < _list313.Count; ++_i314)
                {
                  string _elem315;
                  _elem315 = await iprot.ReadStringAsync(cancellationToken);
                  MeasurementAliasList.Add(_elem315);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_paths)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_dataTypes)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_encodings)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_compressors)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSCreateMultiTimeseriesReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "paths";
      field.Type = TType.List;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.String, Paths.Count), cancellationToken);
        foreach (string _iter316 in Paths)
        {
          await oprot.WriteStringAsync(_iter316, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "dataTypes";
      field.Type = TType.List;
      field.ID = 3;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.I32, DataTypes.Count), cancellationToken);
        foreach (int _iter317 in DataTypes)
        {
          await oprot.WriteI32Async(_iter317, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "encodings";
      field.Type = TType.List;
      field.ID = 4;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.I32, Encodings.Count), cancellationToken);
        foreach (int _iter318 in Encodings)
        {
          await oprot.WriteI32Async(_iter318, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "compressors";
      field.Type = TType.List;
      field.ID = 5;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.I32, Compressors.Count), cancellationToken);
        foreach (int _iter319 in Compressors)
        {
          await oprot.WriteI32Async(_iter319, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (PropsList != null && __isset.propsList)
      {
        field.Name = "propsList";
        field.Type = TType.List;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, PropsList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter320 in PropsList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter320.Count), cancellationToken);
              foreach (string _iter321 in _iter320.Keys)
              {
                await oprot.WriteStringAsync(_iter321, cancellationToken);
                await oprot.WriteStringAsync(_iter320[_iter321], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (TagsList != null && __isset.tagsList)
      {
        field.Name = "tagsList";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, TagsList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter322 in TagsList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter322.Count), cancellationToken);
              foreach (string _iter323 in _iter322.Keys)
              {
                await oprot.WriteStringAsync(_iter323, cancellationToken);
                await oprot.WriteStringAsync(_iter322[_iter323], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AttributesList != null && __isset.attributesList)
      {
        field.Name = "attributesList";
        field.Type = TType.List;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, AttributesList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter324 in AttributesList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter324.Count), cancellationToken);
              foreach (string _iter325 in _iter324.Keys)
              {
                await oprot.WriteStringAsync(_iter325, cancellationToken);
                await oprot.WriteStringAsync(_iter324[_iter325], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MeasurementAliasList != null && __isset.measurementAliasList)
      {
        field.Name = "measurementAliasList";
        field.Type = TType.List;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, MeasurementAliasList.Count), cancellationToken);
          foreach (string _iter326 in MeasurementAliasList)
          {
            await oprot.WriteStringAsync(_iter326, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TSCreateMultiTimeseriesReq;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && TCollections.Equals(Paths, other.Paths)
      && TCollections.Equals(DataTypes, other.DataTypes)
      && TCollections.Equals(Encodings, other.Encodings)
      && TCollections.Equals(Compressors, other.Compressors)
      && ((__isset.propsList == other.__isset.propsList) && ((!__isset.propsList) || (TCollections.Equals(PropsList, other.PropsList))))
      && ((__isset.tagsList == other.__isset.tagsList) && ((!__isset.tagsList) || (TCollections.Equals(TagsList, other.TagsList))))
      && ((__isset.attributesList == other.__isset.attributesList) && ((!__isset.attributesList) || (TCollections.Equals(AttributesList, other.AttributesList))))
      && ((__isset.measurementAliasList == other.__isset.measurementAliasList) && ((!__isset.measurementAliasList) || (TCollections.Equals(MeasurementAliasList, other.MeasurementAliasList))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      hashcode = (hashcode * 397) + TCollections.GetHashCode(Paths);
      hashcode = (hashcode * 397) + TCollections.GetHashCode(DataTypes);
      hashcode = (hashcode * 397) + TCollections.GetHashCode(Encodings);
      hashcode = (hashcode * 397) + TCollections.GetHashCode(Compressors);
      if(__isset.propsList)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PropsList);
      if(__isset.tagsList)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TagsList);
      if(__isset.attributesList)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(AttributesList);
      if(__isset.measurementAliasList)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementAliasList);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSCreateMultiTimeseriesReq(");
    sb.Append(", SessionId: ");
    sb.Append(SessionId);
    sb.Append(", Paths: ");
    sb.Append(Paths);
    sb.Append(", DataTypes: ");
    sb.Append(DataTypes);
    sb.Append(", Encodings: ");
    sb.Append(Encodings);
    sb.Append(", Compressors: ");
    sb.Append(Compressors);
    if (PropsList != null && __isset.propsList)
    {
      sb.Append(", PropsList: ");
      sb.Append(PropsList);
    }
    if (TagsList != null && __isset.tagsList)
    {
      sb.Append(", TagsList: ");
      sb.Append(TagsList);
    }
    if (AttributesList != null && __isset.attributesList)
    {
      sb.Append(", AttributesList: ");
      sb.Append(AttributesList);
    }
    if (MeasurementAliasList != null && __isset.measurementAliasList)
    {
      sb.Append(", MeasurementAliasList: ");
      sb.Append(MeasurementAliasList);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

