/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TSCreateMultiTimeseriesReq : TBase
{
  private List<Dictionary<string, string>> _propsList;
  private List<Dictionary<string, string>> _tagsList;
  private List<Dictionary<string, string>> _attributesList;
  private List<string> _measurementAliasList;

  public long SessionId { get; set; }

  public List<string> Paths { get; set; }

  public List<int> DataTypes { get; set; }

  public List<int> Encodings { get; set; }

  public List<int> Compressors { get; set; }

  public List<Dictionary<string, string>> PropsList
  {
    get
    {
      return _propsList;
    }
    set
    {
      __isset.propsList = true;
      this._propsList = value;
    }
  }

  public List<Dictionary<string, string>> TagsList
  {
    get
    {
      return _tagsList;
    }
    set
    {
      __isset.tagsList = true;
      this._tagsList = value;
    }
  }

  public List<Dictionary<string, string>> AttributesList
  {
    get
    {
      return _attributesList;
    }
    set
    {
      __isset.attributesList = true;
      this._attributesList = value;
    }
  }

  public List<string> MeasurementAliasList
  {
    get
    {
      return _measurementAliasList;
    }
    set
    {
      __isset.measurementAliasList = true;
      this._measurementAliasList = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool propsList;
    public bool tagsList;
    public bool attributesList;
    public bool measurementAliasList;
  }

  public TSCreateMultiTimeseriesReq()
  {
  }

  public TSCreateMultiTimeseriesReq(long sessionId, List<string> paths, List<int> dataTypes, List<int> encodings, List<int> compressors) : this()
  {
    this.SessionId = sessionId;
    this.Paths = paths;
    this.DataTypes = dataTypes;
    this.Encodings = encodings;
    this.Compressors = compressors;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_paths = false;
      bool isset_dataTypes = false;
      bool isset_encodings = false;
      bool isset_compressors = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list326 = await iprot.ReadListBeginAsync(cancellationToken);
                Paths = new List<string>(_list326.Count);
                for(int _i327 = 0; _i327 < _list326.Count; ++_i327)
                {
                  string _elem328;
                  _elem328 = await iprot.ReadStringAsync(cancellationToken);
                  Paths.Add(_elem328);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_paths = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list329 = await iprot.ReadListBeginAsync(cancellationToken);
                DataTypes = new List<int>(_list329.Count);
                for(int _i330 = 0; _i330 < _list329.Count; ++_i330)
                {
                  int _elem331;
                  _elem331 = await iprot.ReadI32Async(cancellationToken);
                  DataTypes.Add(_elem331);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_dataTypes = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list332 = await iprot.ReadListBeginAsync(cancellationToken);
                Encodings = new List<int>(_list332.Count);
                for(int _i333 = 0; _i333 < _list332.Count; ++_i333)
                {
                  int _elem334;
                  _elem334 = await iprot.ReadI32Async(cancellationToken);
                  Encodings.Add(_elem334);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_encodings = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list335 = await iprot.ReadListBeginAsync(cancellationToken);
                Compressors = new List<int>(_list335.Count);
                for(int _i336 = 0; _i336 < _list335.Count; ++_i336)
                {
                  int _elem337;
                  _elem337 = await iprot.ReadI32Async(cancellationToken);
                  Compressors.Add(_elem337);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_compressors = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list338 = await iprot.ReadListBeginAsync(cancellationToken);
                PropsList = new List<Dictionary<string, string>>(_list338.Count);
                for(int _i339 = 0; _i339 < _list338.Count; ++_i339)
                {
                  Dictionary<string, string> _elem340;
                  {
                    TMap _map341 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem340 = new Dictionary<string, string>(_map341.Count);
                    for(int _i342 = 0; _i342 < _map341.Count; ++_i342)
                    {
                      string _key343;
                      string _val344;
                      _key343 = await iprot.ReadStringAsync(cancellationToken);
                      _val344 = await iprot.ReadStringAsync(cancellationToken);
                      _elem340[_key343] = _val344;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  PropsList.Add(_elem340);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list345 = await iprot.ReadListBeginAsync(cancellationToken);
                TagsList = new List<Dictionary<string, string>>(_list345.Count);
                for(int _i346 = 0; _i346 < _list345.Count; ++_i346)
                {
                  Dictionary<string, string> _elem347;
                  {
                    TMap _map348 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem347 = new Dictionary<string, string>(_map348.Count);
                    for(int _i349 = 0; _i349 < _map348.Count; ++_i349)
                    {
                      string _key350;
                      string _val351;
                      _key350 = await iprot.ReadStringAsync(cancellationToken);
                      _val351 = await iprot.ReadStringAsync(cancellationToken);
                      _elem347[_key350] = _val351;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  TagsList.Add(_elem347);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.List)
            {
              {
                TList _list352 = await iprot.ReadListBeginAsync(cancellationToken);
                AttributesList = new List<Dictionary<string, string>>(_list352.Count);
                for(int _i353 = 0; _i353 < _list352.Count; ++_i353)
                {
                  Dictionary<string, string> _elem354;
                  {
                    TMap _map355 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem354 = new Dictionary<string, string>(_map355.Count);
                    for(int _i356 = 0; _i356 < _map355.Count; ++_i356)
                    {
                      string _key357;
                      string _val358;
                      _key357 = await iprot.ReadStringAsync(cancellationToken);
                      _val358 = await iprot.ReadStringAsync(cancellationToken);
                      _elem354[_key357] = _val358;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  AttributesList.Add(_elem354);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                TList _list359 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementAliasList = new List<string>(_list359.Count);
                for(int _i360 = 0; _i360 < _list359.Count; ++_i360)
                {
                  string _elem361;
                  _elem361 = await iprot.ReadStringAsync(cancellationToken);
                  MeasurementAliasList.Add(_elem361);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_paths)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_dataTypes)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_encodings)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_compressors)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSCreateMultiTimeseriesReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Paths != null))
      {
        field.Name = "paths";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Paths.Count), cancellationToken);
          foreach (string _iter362 in Paths)
          {
            await oprot.WriteStringAsync(_iter362, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((DataTypes != null))
      {
        field.Name = "dataTypes";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, DataTypes.Count), cancellationToken);
          foreach (int _iter363 in DataTypes)
          {
            await oprot.WriteI32Async(_iter363, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Encodings != null))
      {
        field.Name = "encodings";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, Encodings.Count), cancellationToken);
          foreach (int _iter364 in Encodings)
          {
            await oprot.WriteI32Async(_iter364, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Compressors != null))
      {
        field.Name = "compressors";
        field.Type = TType.List;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, Compressors.Count), cancellationToken);
          foreach (int _iter365 in Compressors)
          {
            await oprot.WriteI32Async(_iter365, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((PropsList != null) && __isset.propsList)
      {
        field.Name = "propsList";
        field.Type = TType.List;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, PropsList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter366 in PropsList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter366.Count), cancellationToken);
              foreach (string _iter367 in _iter366.Keys)
              {
                await oprot.WriteStringAsync(_iter367, cancellationToken);
                await oprot.WriteStringAsync(_iter366[_iter367], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TagsList != null) && __isset.tagsList)
      {
        field.Name = "tagsList";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, TagsList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter368 in TagsList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter368.Count), cancellationToken);
              foreach (string _iter369 in _iter368.Keys)
              {
                await oprot.WriteStringAsync(_iter369, cancellationToken);
                await oprot.WriteStringAsync(_iter368[_iter369], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((AttributesList != null) && __isset.attributesList)
      {
        field.Name = "attributesList";
        field.Type = TType.List;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, AttributesList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter370 in AttributesList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter370.Count), cancellationToken);
              foreach (string _iter371 in _iter370.Keys)
              {
                await oprot.WriteStringAsync(_iter371, cancellationToken);
                await oprot.WriteStringAsync(_iter370[_iter371], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((MeasurementAliasList != null) && __isset.measurementAliasList)
      {
        field.Name = "measurementAliasList";
        field.Type = TType.List;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, MeasurementAliasList.Count), cancellationToken);
          foreach (string _iter372 in MeasurementAliasList)
          {
            await oprot.WriteStringAsync(_iter372, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSCreateMultiTimeseriesReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && TCollections.Equals(Paths, other.Paths)
      && TCollections.Equals(DataTypes, other.DataTypes)
      && TCollections.Equals(Encodings, other.Encodings)
      && TCollections.Equals(Compressors, other.Compressors)
      && ((__isset.propsList == other.__isset.propsList) && ((!__isset.propsList) || (TCollections.Equals(PropsList, other.PropsList))))
      && ((__isset.tagsList == other.__isset.tagsList) && ((!__isset.tagsList) || (TCollections.Equals(TagsList, other.TagsList))))
      && ((__isset.attributesList == other.__isset.attributesList) && ((!__isset.attributesList) || (TCollections.Equals(AttributesList, other.AttributesList))))
      && ((__isset.measurementAliasList == other.__isset.measurementAliasList) && ((!__isset.measurementAliasList) || (TCollections.Equals(MeasurementAliasList, other.MeasurementAliasList))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((Paths != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Paths);
      }
      if((DataTypes != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(DataTypes);
      }
      if((Encodings != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Encodings);
      }
      if((Compressors != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Compressors);
      }
      if((PropsList != null) && __isset.propsList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PropsList);
      }
      if((TagsList != null) && __isset.tagsList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TagsList);
      }
      if((AttributesList != null) && __isset.attributesList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(AttributesList);
      }
      if((MeasurementAliasList != null) && __isset.measurementAliasList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementAliasList);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSCreateMultiTimeseriesReq(");
    sb.Append(", SessionId: ");
    SessionId.ToString(sb);
    if((Paths != null))
    {
      sb.Append(", Paths: ");
      Paths.ToString(sb);
    }
    if((DataTypes != null))
    {
      sb.Append(", DataTypes: ");
      DataTypes.ToString(sb);
    }
    if((Encodings != null))
    {
      sb.Append(", Encodings: ");
      Encodings.ToString(sb);
    }
    if((Compressors != null))
    {
      sb.Append(", Compressors: ");
      Compressors.ToString(sb);
    }
    if((PropsList != null) && __isset.propsList)
    {
      sb.Append(", PropsList: ");
      PropsList.ToString(sb);
    }
    if((TagsList != null) && __isset.tagsList)
    {
      sb.Append(", TagsList: ");
      TagsList.ToString(sb);
    }
    if((AttributesList != null) && __isset.attributesList)
    {
      sb.Append(", AttributesList: ");
      AttributesList.ToString(sb);
    }
    if((MeasurementAliasList != null) && __isset.measurementAliasList)
    {
      sb.Append(", MeasurementAliasList: ");
      MeasurementAliasList.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

