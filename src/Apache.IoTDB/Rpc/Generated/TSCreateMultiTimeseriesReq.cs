/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TSCreateMultiTimeseriesReq : TBase
{
  private List<Dictionary<string, string>> _propsList;
  private List<Dictionary<string, string>> _tagsList;
  private List<Dictionary<string, string>> _attributesList;
  private List<string> _measurementAliasList;

  public long SessionId { get; set; }

  public List<string> Paths { get; set; }

  public List<int> DataTypes { get; set; }

  public List<int> Encodings { get; set; }

  public List<int> Compressors { get; set; }

  public List<Dictionary<string, string>> PropsList
  {
    get
    {
      return _propsList;
    }
    set
    {
      __isset.propsList = true;
      this._propsList = value;
    }
  }

  public List<Dictionary<string, string>> TagsList
  {
    get
    {
      return _tagsList;
    }
    set
    {
      __isset.tagsList = true;
      this._tagsList = value;
    }
  }

  public List<Dictionary<string, string>> AttributesList
  {
    get
    {
      return _attributesList;
    }
    set
    {
      __isset.attributesList = true;
      this._attributesList = value;
    }
  }

  public List<string> MeasurementAliasList
  {
    get
    {
      return _measurementAliasList;
    }
    set
    {
      __isset.measurementAliasList = true;
      this._measurementAliasList = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool propsList;
    public bool tagsList;
    public bool attributesList;
    public bool measurementAliasList;
  }

  public TSCreateMultiTimeseriesReq()
  {
  }

  public TSCreateMultiTimeseriesReq(long sessionId, List<string> paths, List<int> dataTypes, List<int> encodings, List<int> compressors) : this()
  {
    this.SessionId = sessionId;
    this.Paths = paths;
    this.DataTypes = dataTypes;
    this.Encodings = encodings;
    this.Compressors = compressors;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_paths = false;
      bool isset_dataTypes = false;
      bool isset_encodings = false;
      bool isset_compressors = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list436 = await iprot.ReadListBeginAsync(cancellationToken);
                Paths = new List<string>(_list436.Count);
                for(int _i437 = 0; _i437 < _list436.Count; ++_i437)
                {
                  string _elem438;
                  _elem438 = await iprot.ReadStringAsync(cancellationToken);
                  Paths.Add(_elem438);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_paths = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list439 = await iprot.ReadListBeginAsync(cancellationToken);
                DataTypes = new List<int>(_list439.Count);
                for(int _i440 = 0; _i440 < _list439.Count; ++_i440)
                {
                  int _elem441;
                  _elem441 = await iprot.ReadI32Async(cancellationToken);
                  DataTypes.Add(_elem441);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_dataTypes = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list442 = await iprot.ReadListBeginAsync(cancellationToken);
                Encodings = new List<int>(_list442.Count);
                for(int _i443 = 0; _i443 < _list442.Count; ++_i443)
                {
                  int _elem444;
                  _elem444 = await iprot.ReadI32Async(cancellationToken);
                  Encodings.Add(_elem444);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_encodings = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list445 = await iprot.ReadListBeginAsync(cancellationToken);
                Compressors = new List<int>(_list445.Count);
                for(int _i446 = 0; _i446 < _list445.Count; ++_i446)
                {
                  int _elem447;
                  _elem447 = await iprot.ReadI32Async(cancellationToken);
                  Compressors.Add(_elem447);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_compressors = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list448 = await iprot.ReadListBeginAsync(cancellationToken);
                PropsList = new List<Dictionary<string, string>>(_list448.Count);
                for(int _i449 = 0; _i449 < _list448.Count; ++_i449)
                {
                  Dictionary<string, string> _elem450;
                  {
                    TMap _map451 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem450 = new Dictionary<string, string>(_map451.Count);
                    for(int _i452 = 0; _i452 < _map451.Count; ++_i452)
                    {
                      string _key453;
                      string _val454;
                      _key453 = await iprot.ReadStringAsync(cancellationToken);
                      _val454 = await iprot.ReadStringAsync(cancellationToken);
                      _elem450[_key453] = _val454;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  PropsList.Add(_elem450);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list455 = await iprot.ReadListBeginAsync(cancellationToken);
                TagsList = new List<Dictionary<string, string>>(_list455.Count);
                for(int _i456 = 0; _i456 < _list455.Count; ++_i456)
                {
                  Dictionary<string, string> _elem457;
                  {
                    TMap _map458 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem457 = new Dictionary<string, string>(_map458.Count);
                    for(int _i459 = 0; _i459 < _map458.Count; ++_i459)
                    {
                      string _key460;
                      string _val461;
                      _key460 = await iprot.ReadStringAsync(cancellationToken);
                      _val461 = await iprot.ReadStringAsync(cancellationToken);
                      _elem457[_key460] = _val461;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  TagsList.Add(_elem457);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.List)
            {
              {
                TList _list462 = await iprot.ReadListBeginAsync(cancellationToken);
                AttributesList = new List<Dictionary<string, string>>(_list462.Count);
                for(int _i463 = 0; _i463 < _list462.Count; ++_i463)
                {
                  Dictionary<string, string> _elem464;
                  {
                    TMap _map465 = await iprot.ReadMapBeginAsync(cancellationToken);
                    _elem464 = new Dictionary<string, string>(_map465.Count);
                    for(int _i466 = 0; _i466 < _map465.Count; ++_i466)
                    {
                      string _key467;
                      string _val468;
                      _key467 = await iprot.ReadStringAsync(cancellationToken);
                      _val468 = await iprot.ReadStringAsync(cancellationToken);
                      _elem464[_key467] = _val468;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                  AttributesList.Add(_elem464);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                TList _list469 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementAliasList = new List<string>(_list469.Count);
                for(int _i470 = 0; _i470 < _list469.Count; ++_i470)
                {
                  string _elem471;
                  _elem471 = await iprot.ReadStringAsync(cancellationToken);
                  MeasurementAliasList.Add(_elem471);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_paths)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_dataTypes)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_encodings)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_compressors)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp472 = new TStruct("TSCreateMultiTimeseriesReq");
      await oprot.WriteStructBeginAsync(tmp472, cancellationToken);
      var tmp473 = new TField();
      tmp473.Name = "sessionId";
      tmp473.Type = TType.I64;
      tmp473.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Paths != null))
      {
        tmp473.Name = "paths";
        tmp473.Type = TType.List;
        tmp473.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Paths.Count), cancellationToken);
          foreach (string _iter474 in Paths)
          {
            await oprot.WriteStringAsync(_iter474, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((DataTypes != null))
      {
        tmp473.Name = "dataTypes";
        tmp473.Type = TType.List;
        tmp473.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, DataTypes.Count), cancellationToken);
          foreach (int _iter475 in DataTypes)
          {
            await oprot.WriteI32Async(_iter475, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Encodings != null))
      {
        tmp473.Name = "encodings";
        tmp473.Type = TType.List;
        tmp473.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, Encodings.Count), cancellationToken);
          foreach (int _iter476 in Encodings)
          {
            await oprot.WriteI32Async(_iter476, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Compressors != null))
      {
        tmp473.Name = "compressors";
        tmp473.Type = TType.List;
        tmp473.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, Compressors.Count), cancellationToken);
          foreach (int _iter477 in Compressors)
          {
            await oprot.WriteI32Async(_iter477, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((PropsList != null) && __isset.propsList)
      {
        tmp473.Name = "propsList";
        tmp473.Type = TType.List;
        tmp473.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, PropsList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter478 in PropsList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter478.Count), cancellationToken);
              foreach (string _iter479 in _iter478.Keys)
              {
                await oprot.WriteStringAsync(_iter479, cancellationToken);
                await oprot.WriteStringAsync(_iter478[_iter479], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TagsList != null) && __isset.tagsList)
      {
        tmp473.Name = "tagsList";
        tmp473.Type = TType.List;
        tmp473.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, TagsList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter480 in TagsList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter480.Count), cancellationToken);
              foreach (string _iter481 in _iter480.Keys)
              {
                await oprot.WriteStringAsync(_iter481, cancellationToken);
                await oprot.WriteStringAsync(_iter480[_iter481], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((AttributesList != null) && __isset.attributesList)
      {
        tmp473.Name = "attributesList";
        tmp473.Type = TType.List;
        tmp473.ID = 8;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Map, AttributesList.Count), cancellationToken);
          foreach (Dictionary<string, string> _iter482 in AttributesList)
          {
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, _iter482.Count), cancellationToken);
              foreach (string _iter483 in _iter482.Keys)
              {
                await oprot.WriteStringAsync(_iter483, cancellationToken);
                await oprot.WriteStringAsync(_iter482[_iter483], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((MeasurementAliasList != null) && __isset.measurementAliasList)
      {
        tmp473.Name = "measurementAliasList";
        tmp473.Type = TType.List;
        tmp473.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp473, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, MeasurementAliasList.Count), cancellationToken);
          foreach (string _iter484 in MeasurementAliasList)
          {
            await oprot.WriteStringAsync(_iter484, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSCreateMultiTimeseriesReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && TCollections.Equals(Paths, other.Paths)
      && TCollections.Equals(DataTypes, other.DataTypes)
      && TCollections.Equals(Encodings, other.Encodings)
      && TCollections.Equals(Compressors, other.Compressors)
      && ((__isset.propsList == other.__isset.propsList) && ((!__isset.propsList) || (TCollections.Equals(PropsList, other.PropsList))))
      && ((__isset.tagsList == other.__isset.tagsList) && ((!__isset.tagsList) || (TCollections.Equals(TagsList, other.TagsList))))
      && ((__isset.attributesList == other.__isset.attributesList) && ((!__isset.attributesList) || (TCollections.Equals(AttributesList, other.AttributesList))))
      && ((__isset.measurementAliasList == other.__isset.measurementAliasList) && ((!__isset.measurementAliasList) || (TCollections.Equals(MeasurementAliasList, other.MeasurementAliasList))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((Paths != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Paths);
      }
      if((DataTypes != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(DataTypes);
      }
      if((Encodings != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Encodings);
      }
      if((Compressors != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Compressors);
      }
      if((PropsList != null) && __isset.propsList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PropsList);
      }
      if((TagsList != null) && __isset.tagsList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TagsList);
      }
      if((AttributesList != null) && __isset.attributesList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(AttributesList);
      }
      if((MeasurementAliasList != null) && __isset.measurementAliasList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementAliasList);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp485 = new StringBuilder("TSCreateMultiTimeseriesReq(");
    tmp485.Append(", SessionId: ");
    SessionId.ToString(tmp485);
    if((Paths != null))
    {
      tmp485.Append(", Paths: ");
      Paths.ToString(tmp485);
    }
    if((DataTypes != null))
    {
      tmp485.Append(", DataTypes: ");
      DataTypes.ToString(tmp485);
    }
    if((Encodings != null))
    {
      tmp485.Append(", Encodings: ");
      Encodings.ToString(tmp485);
    }
    if((Compressors != null))
    {
      tmp485.Append(", Compressors: ");
      Compressors.ToString(tmp485);
    }
    if((PropsList != null) && __isset.propsList)
    {
      tmp485.Append(", PropsList: ");
      PropsList.ToString(tmp485);
    }
    if((TagsList != null) && __isset.tagsList)
    {
      tmp485.Append(", TagsList: ");
      TagsList.ToString(tmp485);
    }
    if((AttributesList != null) && __isset.attributesList)
    {
      tmp485.Append(", AttributesList: ");
      AttributesList.ToString(tmp485);
    }
    if((MeasurementAliasList != null) && __isset.measurementAliasList)
    {
      tmp485.Append(", MeasurementAliasList: ");
      MeasurementAliasList.ToString(tmp485);
    }
    tmp485.Append(')');
    return tmp485.ToString();
  }
}

