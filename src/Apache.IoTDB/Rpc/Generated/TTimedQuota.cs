/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TTimedQuota : TBase
{

  public long TimeUnit { get; set; }

  public long SoftLimit { get; set; }

  public TTimedQuota()
  {
  }

  public TTimedQuota(long timeUnit, long softLimit) : this()
  {
    this.TimeUnit = timeUnit;
    this.SoftLimit = softLimit;
  }

  public TTimedQuota DeepCopy()
  {
    var tmp75 = new TTimedQuota();
    tmp75.TimeUnit = this.TimeUnit;
    tmp75.SoftLimit = this.SoftLimit;
    return tmp75;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_timeUnit = false;
      bool isset_softLimit = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              TimeUnit = await iprot.ReadI64Async(cancellationToken);
              isset_timeUnit = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              SoftLimit = await iprot.ReadI64Async(cancellationToken);
              isset_softLimit = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_timeUnit)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_softLimit)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TTimedQuota");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "timeUnit";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(TimeUnit, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "softLimit";
      field.Type = TType.I64;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SoftLimit, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TTimedQuota other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(TimeUnit, other.TimeUnit)
      && System.Object.Equals(SoftLimit, other.SoftLimit);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + TimeUnit.GetHashCode();
      hashcode = (hashcode * 397) + SoftLimit.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TTimedQuota(");
    sb.Append(", TimeUnit: ");
    TimeUnit.ToString(sb);
    sb.Append(", SoftLimit: ");
    SoftLimit.ToString(sb);
    sb.Append(')');
    return sb.ToString();
  }
}

