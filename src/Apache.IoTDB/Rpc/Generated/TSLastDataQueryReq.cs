/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TSLastDataQueryReq : TBase
{
  private int _fetchSize;
  private bool _enableRedirectQuery;
  private bool _jdbcQuery;
  private long _timeout;
  private bool _legalPathNodes;

  public long SessionId { get; set; }

  public List<string> Paths { get; set; }

  public int FetchSize
  {
    get
    {
      return _fetchSize;
    }
    set
    {
      __isset.fetchSize = true;
      this._fetchSize = value;
    }
  }

  public long Time { get; set; }

  public long StatementId { get; set; }

  public bool EnableRedirectQuery
  {
    get
    {
      return _enableRedirectQuery;
    }
    set
    {
      __isset.enableRedirectQuery = true;
      this._enableRedirectQuery = value;
    }
  }

  public bool JdbcQuery
  {
    get
    {
      return _jdbcQuery;
    }
    set
    {
      __isset.jdbcQuery = true;
      this._jdbcQuery = value;
    }
  }

  public long Timeout
  {
    get
    {
      return _timeout;
    }
    set
    {
      __isset.timeout = true;
      this._timeout = value;
    }
  }

  public bool LegalPathNodes
  {
    get
    {
      return _legalPathNodes;
    }
    set
    {
      __isset.legalPathNodes = true;
      this._legalPathNodes = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool fetchSize;
    public bool enableRedirectQuery;
    public bool jdbcQuery;
    public bool timeout;
    public bool legalPathNodes;
  }

  public TSLastDataQueryReq()
  {
  }

  public TSLastDataQueryReq(long sessionId, List<string> paths, long time, long statementId) : this()
  {
    this.SessionId = sessionId;
    this.Paths = paths;
    this.Time = time;
    this.StatementId = statementId;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_paths = false;
      bool isset_time = false;
      bool isset_statementId = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list396 = await iprot.ReadListBeginAsync(cancellationToken);
                Paths = new List<string>(_list396.Count);
                for(int _i397 = 0; _i397 < _list396.Count; ++_i397)
                {
                  string _elem398;
                  _elem398 = await iprot.ReadStringAsync(cancellationToken);
                  Paths.Add(_elem398);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_paths = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              FetchSize = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I64)
            {
              Time = await iprot.ReadI64Async(cancellationToken);
              isset_time = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              StatementId = await iprot.ReadI64Async(cancellationToken);
              isset_statementId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Bool)
            {
              EnableRedirectQuery = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Bool)
            {
              JdbcQuery = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I64)
            {
              Timeout = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.Bool)
            {
              LegalPathNodes = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_paths)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_time)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_statementId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp399 = new TStruct("TSLastDataQueryReq");
      await oprot.WriteStructBeginAsync(tmp399, cancellationToken);
      var tmp400 = new TField();
      tmp400.Name = "sessionId";
      tmp400.Type = TType.I64;
      tmp400.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Paths != null))
      {
        tmp400.Name = "paths";
        tmp400.Type = TType.List;
        tmp400.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Paths.Count), cancellationToken);
          foreach (string _iter401 in Paths)
          {
            await oprot.WriteStringAsync(_iter401, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.fetchSize)
      {
        tmp400.Name = "fetchSize";
        tmp400.Type = TType.I32;
        tmp400.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
        await oprot.WriteI32Async(FetchSize, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp400.Name = "time";
      tmp400.Type = TType.I64;
      tmp400.ID = 4;
      await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
      await oprot.WriteI64Async(Time, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      tmp400.Name = "statementId";
      tmp400.Type = TType.I64;
      tmp400.ID = 5;
      await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
      await oprot.WriteI64Async(StatementId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if(__isset.enableRedirectQuery)
      {
        tmp400.Name = "enableRedirectQuery";
        tmp400.Type = TType.Bool;
        tmp400.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
        await oprot.WriteBoolAsync(EnableRedirectQuery, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.jdbcQuery)
      {
        tmp400.Name = "jdbcQuery";
        tmp400.Type = TType.Bool;
        tmp400.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
        await oprot.WriteBoolAsync(JdbcQuery, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.timeout)
      {
        tmp400.Name = "timeout";
        tmp400.Type = TType.I64;
        tmp400.ID = 8;
        await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
        await oprot.WriteI64Async(Timeout, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.legalPathNodes)
      {
        tmp400.Name = "legalPathNodes";
        tmp400.Type = TType.Bool;
        tmp400.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
        await oprot.WriteBoolAsync(LegalPathNodes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSLastDataQueryReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && TCollections.Equals(Paths, other.Paths)
      && ((__isset.fetchSize == other.__isset.fetchSize) && ((!__isset.fetchSize) || (System.Object.Equals(FetchSize, other.FetchSize))))
      && System.Object.Equals(Time, other.Time)
      && System.Object.Equals(StatementId, other.StatementId)
      && ((__isset.enableRedirectQuery == other.__isset.enableRedirectQuery) && ((!__isset.enableRedirectQuery) || (System.Object.Equals(EnableRedirectQuery, other.EnableRedirectQuery))))
      && ((__isset.jdbcQuery == other.__isset.jdbcQuery) && ((!__isset.jdbcQuery) || (System.Object.Equals(JdbcQuery, other.JdbcQuery))))
      && ((__isset.timeout == other.__isset.timeout) && ((!__isset.timeout) || (System.Object.Equals(Timeout, other.Timeout))))
      && ((__isset.legalPathNodes == other.__isset.legalPathNodes) && ((!__isset.legalPathNodes) || (System.Object.Equals(LegalPathNodes, other.LegalPathNodes))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((Paths != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Paths);
      }
      if(__isset.fetchSize)
      {
        hashcode = (hashcode * 397) + FetchSize.GetHashCode();
      }
      hashcode = (hashcode * 397) + Time.GetHashCode();
      hashcode = (hashcode * 397) + StatementId.GetHashCode();
      if(__isset.enableRedirectQuery)
      {
        hashcode = (hashcode * 397) + EnableRedirectQuery.GetHashCode();
      }
      if(__isset.jdbcQuery)
      {
        hashcode = (hashcode * 397) + JdbcQuery.GetHashCode();
      }
      if(__isset.timeout)
      {
        hashcode = (hashcode * 397) + Timeout.GetHashCode();
      }
      if(__isset.legalPathNodes)
      {
        hashcode = (hashcode * 397) + LegalPathNodes.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp402 = new StringBuilder("TSLastDataQueryReq(");
    tmp402.Append(", SessionId: ");
    SessionId.ToString(tmp402);
    if((Paths != null))
    {
      tmp402.Append(", Paths: ");
      Paths.ToString(tmp402);
    }
    if(__isset.fetchSize)
    {
      tmp402.Append(", FetchSize: ");
      FetchSize.ToString(tmp402);
    }
    tmp402.Append(", Time: ");
    Time.ToString(tmp402);
    tmp402.Append(", StatementId: ");
    StatementId.ToString(tmp402);
    if(__isset.enableRedirectQuery)
    {
      tmp402.Append(", EnableRedirectQuery: ");
      EnableRedirectQuery.ToString(tmp402);
    }
    if(__isset.jdbcQuery)
    {
      tmp402.Append(", JdbcQuery: ");
      JdbcQuery.ToString(tmp402);
    }
    if(__isset.timeout)
    {
      tmp402.Append(", Timeout: ");
      Timeout.ToString(tmp402);
    }
    if(__isset.legalPathNodes)
    {
      tmp402.Append(", LegalPathNodes: ");
      LegalPathNodes.ToString(tmp402);
    }
    tmp402.Append(')');
    return tmp402.ToString();
  }
}

