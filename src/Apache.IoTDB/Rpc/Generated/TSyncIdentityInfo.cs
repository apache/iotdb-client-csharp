/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TSyncIdentityInfo : TBase
{

  public string PipeName { get; set; }

  public long CreateTime { get; set; }

  public string Version { get; set; }

  public string Database { get; set; }

  public TSyncIdentityInfo()
  {
  }

  public TSyncIdentityInfo(string pipeName, long createTime, string version, string database) : this()
  {
    this.PipeName = pipeName;
    this.CreateTime = createTime;
    this.Version = version;
    this.Database = database;
  }

  public TSyncIdentityInfo DeepCopy()
  {
    var tmp421 = new TSyncIdentityInfo();
    if((PipeName != null))
    {
      tmp421.PipeName = this.PipeName;
    }
    tmp421.CreateTime = this.CreateTime;
    if((Version != null))
    {
      tmp421.Version = this.Version;
    }
    if((Database != null))
    {
      tmp421.Database = this.Database;
    }
    return tmp421;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_pipeName = false;
      bool isset_createTime = false;
      bool isset_version = false;
      bool isset_database = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              PipeName = await iprot.ReadStringAsync(cancellationToken);
              isset_pipeName = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              CreateTime = await iprot.ReadI64Async(cancellationToken);
              isset_createTime = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Version = await iprot.ReadStringAsync(cancellationToken);
              isset_version = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Database = await iprot.ReadStringAsync(cancellationToken);
              isset_database = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_pipeName)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_createTime)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_version)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_database)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSyncIdentityInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if((PipeName != null))
      {
        field.Name = "pipeName";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PipeName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      field.Name = "createTime";
      field.Type = TType.I64;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(CreateTime, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Version != null))
      {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Database != null))
      {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Database, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSyncIdentityInfo other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(PipeName, other.PipeName)
      && System.Object.Equals(CreateTime, other.CreateTime)
      && System.Object.Equals(Version, other.Version)
      && System.Object.Equals(Database, other.Database);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((PipeName != null))
      {
        hashcode = (hashcode * 397) + PipeName.GetHashCode();
      }
      hashcode = (hashcode * 397) + CreateTime.GetHashCode();
      if((Version != null))
      {
        hashcode = (hashcode * 397) + Version.GetHashCode();
      }
      if((Database != null))
      {
        hashcode = (hashcode * 397) + Database.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSyncIdentityInfo(");
    if((PipeName != null))
    {
      sb.Append(", PipeName: ");
      PipeName.ToString(sb);
    }
    sb.Append(", CreateTime: ");
    CreateTime.ToString(sb);
    if((Version != null))
    {
      sb.Append(", Version: ");
      Version.ToString(sb);
    }
    if((Database != null))
    {
      sb.Append(", Database: ");
      Database.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

