/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

public static class commonExtensions
{
  public static bool Equals(this List<TDataNodeLocation> instance, object that)
  {
    if (!(that is List<TDataNodeLocation> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TDataNodeLocation> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TDataNodeLocation> DeepCopy(this List<TDataNodeLocation> source)
  {
    if (source == null)
      return null;

    var tmp50 = new List<TDataNodeLocation>(source.Count);
    foreach (var elem in source)
      tmp50.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp50;
  }


  public static bool Equals(this List<TFile> instance, object that)
  {
    if (!(that is List<TFile> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TFile> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TFile> DeepCopy(this List<TFile> source)
  {
    if (source == null)
      return null;

    var tmp51 = new List<TFile>(source.Count);
    foreach (var elem in source)
      tmp51.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp51;
  }


  public static bool Equals(this List<TSStatus> instance, object that)
  {
    if (!(that is List<TSStatus> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TSStatus> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TSStatus> DeepCopy(this List<TSStatus> source)
  {
    if (source == null)
      return null;

    var tmp52 = new List<TSStatus>(source.Count);
    foreach (var elem in source)
      tmp52.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp52;
  }


  public static bool Equals(this List<string> instance, object that)
  {
    if (!(that is List<string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<string> DeepCopy(this List<string> source)
  {
    if (source == null)
      return null;

    var tmp53 = new List<string>(source.Count);
    foreach (var elem in source)
      tmp53.Add((elem != null) ? elem : null);
    return tmp53;
  }


}
