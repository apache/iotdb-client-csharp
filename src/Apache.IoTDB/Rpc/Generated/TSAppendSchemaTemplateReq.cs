/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TSAppendSchemaTemplateReq : TBase
{

  public long SessionId { get; set; }

  public string Name { get; set; }

  public bool IsAligned { get; set; }

  public List<string> Measurements { get; set; }

  public List<int> DataTypes { get; set; }

  public List<int> Encodings { get; set; }

  public List<int> Compressors { get; set; }

  public TSAppendSchemaTemplateReq()
  {
  }

  public TSAppendSchemaTemplateReq(long sessionId, string name, bool isAligned, List<string> measurements, List<int> dataTypes, List<int> encodings, List<int> compressors) : this()
  {
    this.SessionId = sessionId;
    this.Name = name;
    this.IsAligned = isAligned;
    this.Measurements = measurements;
    this.DataTypes = dataTypes;
    this.Encodings = encodings;
    this.Compressors = compressors;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_name = false;
      bool isset_isAligned = false;
      bool isset_measurements = false;
      bool isset_dataTypes = false;
      bool isset_encodings = false;
      bool isset_compressors = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
              isset_name = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Bool)
            {
              IsAligned = await iprot.ReadBoolAsync(cancellationToken);
              isset_isAligned = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list503 = await iprot.ReadListBeginAsync(cancellationToken);
                Measurements = new List<string>(_list503.Count);
                for(int _i504 = 0; _i504 < _list503.Count; ++_i504)
                {
                  string _elem505;
                  _elem505 = await iprot.ReadStringAsync(cancellationToken);
                  Measurements.Add(_elem505);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_measurements = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list506 = await iprot.ReadListBeginAsync(cancellationToken);
                DataTypes = new List<int>(_list506.Count);
                for(int _i507 = 0; _i507 < _list506.Count; ++_i507)
                {
                  int _elem508;
                  _elem508 = await iprot.ReadI32Async(cancellationToken);
                  DataTypes.Add(_elem508);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_dataTypes = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list509 = await iprot.ReadListBeginAsync(cancellationToken);
                Encodings = new List<int>(_list509.Count);
                for(int _i510 = 0; _i510 < _list509.Count; ++_i510)
                {
                  int _elem511;
                  _elem511 = await iprot.ReadI32Async(cancellationToken);
                  Encodings.Add(_elem511);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_encodings = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list512 = await iprot.ReadListBeginAsync(cancellationToken);
                Compressors = new List<int>(_list512.Count);
                for(int _i513 = 0; _i513 < _list512.Count; ++_i513)
                {
                  int _elem514;
                  _elem514 = await iprot.ReadI32Async(cancellationToken);
                  Compressors.Add(_elem514);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_compressors = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_name)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_isAligned)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_measurements)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_dataTypes)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_encodings)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_compressors)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp515 = new TStruct("TSAppendSchemaTemplateReq");
      await oprot.WriteStructBeginAsync(tmp515, cancellationToken);
      var tmp516 = new TField();
      tmp516.Name = "sessionId";
      tmp516.Type = TType.I64;
      tmp516.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Name != null))
      {
        tmp516.Name = "name";
        tmp516.Type = TType.String;
        tmp516.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp516.Name = "isAligned";
      tmp516.Type = TType.Bool;
      tmp516.ID = 3;
      await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
      await oprot.WriteBoolAsync(IsAligned, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Measurements != null))
      {
        tmp516.Name = "measurements";
        tmp516.Type = TType.List;
        tmp516.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Measurements.Count), cancellationToken);
          foreach (string _iter517 in Measurements)
          {
            await oprot.WriteStringAsync(_iter517, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((DataTypes != null))
      {
        tmp516.Name = "dataTypes";
        tmp516.Type = TType.List;
        tmp516.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, DataTypes.Count), cancellationToken);
          foreach (int _iter518 in DataTypes)
          {
            await oprot.WriteI32Async(_iter518, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Encodings != null))
      {
        tmp516.Name = "encodings";
        tmp516.Type = TType.List;
        tmp516.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, Encodings.Count), cancellationToken);
          foreach (int _iter519 in Encodings)
          {
            await oprot.WriteI32Async(_iter519, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Compressors != null))
      {
        tmp516.Name = "compressors";
        tmp516.Type = TType.List;
        tmp516.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, Compressors.Count), cancellationToken);
          foreach (int _iter520 in Compressors)
          {
            await oprot.WriteI32Async(_iter520, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSAppendSchemaTemplateReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && System.Object.Equals(Name, other.Name)
      && System.Object.Equals(IsAligned, other.IsAligned)
      && TCollections.Equals(Measurements, other.Measurements)
      && TCollections.Equals(DataTypes, other.DataTypes)
      && TCollections.Equals(Encodings, other.Encodings)
      && TCollections.Equals(Compressors, other.Compressors);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((Name != null))
      {
        hashcode = (hashcode * 397) + Name.GetHashCode();
      }
      hashcode = (hashcode * 397) + IsAligned.GetHashCode();
      if((Measurements != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Measurements);
      }
      if((DataTypes != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(DataTypes);
      }
      if((Encodings != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Encodings);
      }
      if((Compressors != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Compressors);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp521 = new StringBuilder("TSAppendSchemaTemplateReq(");
    tmp521.Append(", SessionId: ");
    SessionId.ToString(tmp521);
    if((Name != null))
    {
      tmp521.Append(", Name: ");
      Name.ToString(tmp521);
    }
    tmp521.Append(", IsAligned: ");
    IsAligned.ToString(tmp521);
    if((Measurements != null))
    {
      tmp521.Append(", Measurements: ");
      Measurements.ToString(tmp521);
    }
    if((DataTypes != null))
    {
      tmp521.Append(", DataTypes: ");
      DataTypes.ToString(tmp521);
    }
    if((Encodings != null))
    {
      tmp521.Append(", Encodings: ");
      Encodings.ToString(tmp521);
    }
    if((Compressors != null))
    {
      tmp521.Append(", Compressors: ");
      Compressors.ToString(tmp521);
    }
    tmp521.Append(')');
    return tmp521.ToString();
  }
}

