/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TSInsertTabletsReq : TBase
{
  private bool _isAligned;

  public long SessionId { get; set; }

  public List<string> PrefixPaths { get; set; }

  public List<List<string>> MeasurementsList { get; set; }

  public List<byte[]> ValuesList { get; set; }

  public List<byte[]> TimestampsList { get; set; }

  public List<List<int>> TypesList { get; set; }

  public List<int> SizeList { get; set; }

  public bool IsAligned
  {
    get
    {
      return _isAligned;
    }
    set
    {
      __isset.isAligned = true;
      this._isAligned = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool isAligned;
  }

  public TSInsertTabletsReq()
  {
  }

  public TSInsertTabletsReq(long sessionId, List<string> prefixPaths, List<List<string>> measurementsList, List<byte[]> valuesList, List<byte[]> timestampsList, List<List<int>> typesList, List<int> sizeList) : this()
  {
    this.SessionId = sessionId;
    this.PrefixPaths = prefixPaths;
    this.MeasurementsList = measurementsList;
    this.ValuesList = valuesList;
    this.TimestampsList = timestampsList;
    this.TypesList = typesList;
    this.SizeList = sizeList;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_prefixPaths = false;
      bool isset_measurementsList = false;
      bool isset_valuesList = false;
      bool isset_timestampsList = false;
      bool isset_typesList = false;
      bool isset_sizeList = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list124 = await iprot.ReadListBeginAsync(cancellationToken);
                PrefixPaths = new List<string>(_list124.Count);
                for(int _i125 = 0; _i125 < _list124.Count; ++_i125)
                {
                  string _elem126;
                  _elem126 = await iprot.ReadStringAsync(cancellationToken);
                  PrefixPaths.Add(_elem126);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_prefixPaths = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list127 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementsList = new List<List<string>>(_list127.Count);
                for(int _i128 = 0; _i128 < _list127.Count; ++_i128)
                {
                  List<string> _elem129;
                  {
                    TList _list130 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem129 = new List<string>(_list130.Count);
                    for(int _i131 = 0; _i131 < _list130.Count; ++_i131)
                    {
                      string _elem132;
                      _elem132 = await iprot.ReadStringAsync(cancellationToken);
                      _elem129.Add(_elem132);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  MeasurementsList.Add(_elem129);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_measurementsList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list133 = await iprot.ReadListBeginAsync(cancellationToken);
                ValuesList = new List<byte[]>(_list133.Count);
                for(int _i134 = 0; _i134 < _list133.Count; ++_i134)
                {
                  byte[] _elem135;
                  _elem135 = await iprot.ReadBinaryAsync(cancellationToken);
                  ValuesList.Add(_elem135);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_valuesList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list136 = await iprot.ReadListBeginAsync(cancellationToken);
                TimestampsList = new List<byte[]>(_list136.Count);
                for(int _i137 = 0; _i137 < _list136.Count; ++_i137)
                {
                  byte[] _elem138;
                  _elem138 = await iprot.ReadBinaryAsync(cancellationToken);
                  TimestampsList.Add(_elem138);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_timestampsList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list139 = await iprot.ReadListBeginAsync(cancellationToken);
                TypesList = new List<List<int>>(_list139.Count);
                for(int _i140 = 0; _i140 < _list139.Count; ++_i140)
                {
                  List<int> _elem141;
                  {
                    TList _list142 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem141 = new List<int>(_list142.Count);
                    for(int _i143 = 0; _i143 < _list142.Count; ++_i143)
                    {
                      int _elem144;
                      _elem144 = await iprot.ReadI32Async(cancellationToken);
                      _elem141.Add(_elem144);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  TypesList.Add(_elem141);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_typesList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list145 = await iprot.ReadListBeginAsync(cancellationToken);
                SizeList = new List<int>(_list145.Count);
                for(int _i146 = 0; _i146 < _list145.Count; ++_i146)
                {
                  int _elem147;
                  _elem147 = await iprot.ReadI32Async(cancellationToken);
                  SizeList.Add(_elem147);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_sizeList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.Bool)
            {
              IsAligned = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_prefixPaths)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_measurementsList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_valuesList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_timestampsList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_typesList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_sizeList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSInsertTabletsReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((PrefixPaths != null))
      {
        field.Name = "prefixPaths";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, PrefixPaths.Count), cancellationToken);
          foreach (string _iter148 in PrefixPaths)
          {
            await oprot.WriteStringAsync(_iter148, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((MeasurementsList != null))
      {
        field.Name = "measurementsList";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, MeasurementsList.Count), cancellationToken);
          foreach (List<string> _iter149 in MeasurementsList)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, _iter149.Count), cancellationToken);
              foreach (string _iter150 in _iter149)
              {
                await oprot.WriteStringAsync(_iter150, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ValuesList != null))
      {
        field.Name = "valuesList";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, ValuesList.Count), cancellationToken);
          foreach (byte[] _iter151 in ValuesList)
          {
            await oprot.WriteBinaryAsync(_iter151, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TimestampsList != null))
      {
        field.Name = "timestampsList";
        field.Type = TType.List;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, TimestampsList.Count), cancellationToken);
          foreach (byte[] _iter152 in TimestampsList)
          {
            await oprot.WriteBinaryAsync(_iter152, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TypesList != null))
      {
        field.Name = "typesList";
        field.Type = TType.List;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, TypesList.Count), cancellationToken);
          foreach (List<int> _iter153 in TypesList)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.I32, _iter153.Count), cancellationToken);
              foreach (int _iter154 in _iter153)
              {
                await oprot.WriteI32Async(_iter154, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((SizeList != null))
      {
        field.Name = "sizeList";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, SizeList.Count), cancellationToken);
          foreach (int _iter155 in SizeList)
          {
            await oprot.WriteI32Async(_iter155, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.isAligned)
      {
        field.Name = "isAligned";
        field.Type = TType.Bool;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsAligned, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSInsertTabletsReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && TCollections.Equals(PrefixPaths, other.PrefixPaths)
      && TCollections.Equals(MeasurementsList, other.MeasurementsList)
      && TCollections.Equals(ValuesList, other.ValuesList)
      && TCollections.Equals(TimestampsList, other.TimestampsList)
      && TCollections.Equals(TypesList, other.TypesList)
      && TCollections.Equals(SizeList, other.SizeList)
      && ((__isset.isAligned == other.__isset.isAligned) && ((!__isset.isAligned) || (System.Object.Equals(IsAligned, other.IsAligned))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((PrefixPaths != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PrefixPaths);
      }
      if((MeasurementsList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementsList);
      }
      if((ValuesList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ValuesList);
      }
      if((TimestampsList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TimestampsList);
      }
      if((TypesList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TypesList);
      }
      if((SizeList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SizeList);
      }
      if(__isset.isAligned)
      {
        hashcode = (hashcode * 397) + IsAligned.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSInsertTabletsReq(");
    sb.Append(", SessionId: ");
    SessionId.ToString(sb);
    if((PrefixPaths != null))
    {
      sb.Append(", PrefixPaths: ");
      PrefixPaths.ToString(sb);
    }
    if((MeasurementsList != null))
    {
      sb.Append(", MeasurementsList: ");
      MeasurementsList.ToString(sb);
    }
    if((ValuesList != null))
    {
      sb.Append(", ValuesList: ");
      ValuesList.ToString(sb);
    }
    if((TimestampsList != null))
    {
      sb.Append(", TimestampsList: ");
      TimestampsList.ToString(sb);
    }
    if((TypesList != null))
    {
      sb.Append(", TypesList: ");
      TypesList.ToString(sb);
    }
    if((SizeList != null))
    {
      sb.Append(", SizeList: ");
      SizeList.ToString(sb);
    }
    if(__isset.isAligned)
    {
      sb.Append(", IsAligned: ");
      IsAligned.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

