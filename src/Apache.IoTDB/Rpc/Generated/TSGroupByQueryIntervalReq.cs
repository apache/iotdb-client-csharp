/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TSGroupByQueryIntervalReq : TBase
{
  private string _database;
  private long _startTime;
  private long _endTime;
  private long _interval;
  private int _fetchSize;
  private long _timeout;

  public long SessionId { get; set; }

  public long StatementId { get; set; }

  public string Device { get; set; }

  public string Measurement { get; set; }

  public int DataType { get; set; }

  /// <summary>
  /// 
  /// <seealso cref=".TAggregationType"/>
  /// </summary>
  public TAggregationType AggregationType { get; set; }

  public string Database
  {
    get
    {
      return _database;
    }
    set
    {
      __isset.database = true;
      this._database = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public long EndTime
  {
    get
    {
      return _endTime;
    }
    set
    {
      __isset.endTime = true;
      this._endTime = value;
    }
  }

  public long Interval
  {
    get
    {
      return _interval;
    }
    set
    {
      __isset.interval = true;
      this._interval = value;
    }
  }

  public int FetchSize
  {
    get
    {
      return _fetchSize;
    }
    set
    {
      __isset.fetchSize = true;
      this._fetchSize = value;
    }
  }

  public long Timeout
  {
    get
    {
      return _timeout;
    }
    set
    {
      __isset.timeout = true;
      this._timeout = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool database;
    public bool startTime;
    public bool endTime;
    public bool interval;
    public bool fetchSize;
    public bool timeout;
  }

  public TSGroupByQueryIntervalReq()
  {
  }

  public TSGroupByQueryIntervalReq(long sessionId, long statementId, string device, string measurement, int dataType, TAggregationType aggregationType) : this()
  {
    this.SessionId = sessionId;
    this.StatementId = statementId;
    this.Device = device;
    this.Measurement = measurement;
    this.DataType = dataType;
    this.AggregationType = aggregationType;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_statementId = false;
      bool isset_device = false;
      bool isset_measurement = false;
      bool isset_dataType = false;
      bool isset_aggregationType = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              StatementId = await iprot.ReadI64Async(cancellationToken);
              isset_statementId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Device = await iprot.ReadStringAsync(cancellationToken);
              isset_device = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Measurement = await iprot.ReadStringAsync(cancellationToken);
              isset_measurement = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              DataType = await iprot.ReadI32Async(cancellationToken);
              isset_dataType = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              AggregationType = (TAggregationType)await iprot.ReadI32Async(cancellationToken);
              isset_aggregationType = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              Database = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I64)
            {
              StartTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.I64)
            {
              EndTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.I64)
            {
              Interval = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I32)
            {
              FetchSize = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.I64)
            {
              Timeout = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_statementId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_device)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_measurement)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_dataType)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_aggregationType)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSGroupByQueryIntervalReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "statementId";
      field.Type = TType.I64;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(StatementId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "device";
      field.Type = TType.String;
      field.ID = 3;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteStringAsync(Device, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "measurement";
      field.Type = TType.String;
      field.ID = 4;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteStringAsync(Measurement, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "dataType";
      field.Type = TType.I32;
      field.ID = 5;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI32Async(DataType, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "aggregationType";
      field.Type = TType.I32;
      field.ID = 6;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI32Async((int)AggregationType, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (Database != null && __isset.database)
      {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Database, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.startTime)
      {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(StartTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.endTime)
      {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(EndTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.interval)
      {
        field.Name = "interval";
        field.Type = TType.I64;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Interval, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.fetchSize)
      {
        field.Name = "fetchSize";
        field.Type = TType.I32;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(FetchSize, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.timeout)
      {
        field.Name = "timeout";
        field.Type = TType.I64;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Timeout, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TSGroupByQueryIntervalReq;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && System.Object.Equals(StatementId, other.StatementId)
      && System.Object.Equals(Device, other.Device)
      && System.Object.Equals(Measurement, other.Measurement)
      && System.Object.Equals(DataType, other.DataType)
      && System.Object.Equals(AggregationType, other.AggregationType)
      && ((__isset.database == other.__isset.database) && ((!__isset.database) || (System.Object.Equals(Database, other.Database))))
      && ((__isset.startTime == other.__isset.startTime) && ((!__isset.startTime) || (System.Object.Equals(StartTime, other.StartTime))))
      && ((__isset.endTime == other.__isset.endTime) && ((!__isset.endTime) || (System.Object.Equals(EndTime, other.EndTime))))
      && ((__isset.interval == other.__isset.interval) && ((!__isset.interval) || (System.Object.Equals(Interval, other.Interval))))
      && ((__isset.fetchSize == other.__isset.fetchSize) && ((!__isset.fetchSize) || (System.Object.Equals(FetchSize, other.FetchSize))))
      && ((__isset.timeout == other.__isset.timeout) && ((!__isset.timeout) || (System.Object.Equals(Timeout, other.Timeout))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      hashcode = (hashcode * 397) + StatementId.GetHashCode();
      hashcode = (hashcode * 397) + Device.GetHashCode();
      hashcode = (hashcode * 397) + Measurement.GetHashCode();
      hashcode = (hashcode * 397) + DataType.GetHashCode();
      hashcode = (hashcode * 397) + AggregationType.GetHashCode();
      if(__isset.database)
        hashcode = (hashcode * 397) + Database.GetHashCode();
      if(__isset.startTime)
        hashcode = (hashcode * 397) + StartTime.GetHashCode();
      if(__isset.endTime)
        hashcode = (hashcode * 397) + EndTime.GetHashCode();
      if(__isset.interval)
        hashcode = (hashcode * 397) + Interval.GetHashCode();
      if(__isset.fetchSize)
        hashcode = (hashcode * 397) + FetchSize.GetHashCode();
      if(__isset.timeout)
        hashcode = (hashcode * 397) + Timeout.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSGroupByQueryIntervalReq(");
    sb.Append(", SessionId: ");
    sb.Append(SessionId);
    sb.Append(", StatementId: ");
    sb.Append(StatementId);
    sb.Append(", Device: ");
    sb.Append(Device);
    sb.Append(", Measurement: ");
    sb.Append(Measurement);
    sb.Append(", DataType: ");
    sb.Append(DataType);
    sb.Append(", AggregationType: ");
    sb.Append(AggregationType);
    if (Database != null && __isset.database)
    {
      sb.Append(", Database: ");
      sb.Append(Database);
    }
    if (__isset.startTime)
    {
      sb.Append(", StartTime: ");
      sb.Append(StartTime);
    }
    if (__isset.endTime)
    {
      sb.Append(", EndTime: ");
      sb.Append(EndTime);
    }
    if (__isset.interval)
    {
      sb.Append(", Interval: ");
      sb.Append(Interval);
    }
    if (__isset.fetchSize)
    {
      sb.Append(", FetchSize: ");
      sb.Append(FetchSize);
    }
    if (__isset.timeout)
    {
      sb.Append(", Timeout: ");
      sb.Append(Timeout);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

