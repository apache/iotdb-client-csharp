/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TSInsertStringRecordsOfOneDeviceReq : TBase
{
  private bool _isAligned;

  public long SessionId { get; set; }

  public string PrefixPath { get; set; }

  public List<List<string>> MeasurementsList { get; set; }

  public List<List<string>> ValuesList { get; set; }

  public List<long> Timestamps { get; set; }

  public bool IsAligned
  {
    get
    {
      return _isAligned;
    }
    set
    {
      __isset.isAligned = true;
      this._isAligned = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool isAligned;
  }

  public TSInsertStringRecordsOfOneDeviceReq()
  {
  }

  public TSInsertStringRecordsOfOneDeviceReq(long sessionId, string prefixPath, List<List<string>> measurementsList, List<List<string>> valuesList, List<long> timestamps) : this()
  {
    this.SessionId = sessionId;
    this.PrefixPath = prefixPath;
    this.MeasurementsList = measurementsList;
    this.ValuesList = valuesList;
    this.Timestamps = timestamps;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_prefixPath = false;
      bool isset_measurementsList = false;
      bool isset_valuesList = false;
      bool isset_timestamps = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              PrefixPath = await iprot.ReadStringAsync(cancellationToken);
              isset_prefixPath = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list159 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementsList = new List<List<string>>(_list159.Count);
                for(int _i160 = 0; _i160 < _list159.Count; ++_i160)
                {
                  List<string> _elem161;
                  {
                    TList _list162 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem161 = new List<string>(_list162.Count);
                    for(int _i163 = 0; _i163 < _list162.Count; ++_i163)
                    {
                      string _elem164;
                      _elem164 = await iprot.ReadStringAsync(cancellationToken);
                      _elem161.Add(_elem164);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  MeasurementsList.Add(_elem161);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_measurementsList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list165 = await iprot.ReadListBeginAsync(cancellationToken);
                ValuesList = new List<List<string>>(_list165.Count);
                for(int _i166 = 0; _i166 < _list165.Count; ++_i166)
                {
                  List<string> _elem167;
                  {
                    TList _list168 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem167 = new List<string>(_list168.Count);
                    for(int _i169 = 0; _i169 < _list168.Count; ++_i169)
                    {
                      string _elem170;
                      _elem170 = await iprot.ReadStringAsync(cancellationToken);
                      _elem167.Add(_elem170);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  ValuesList.Add(_elem167);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_valuesList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list171 = await iprot.ReadListBeginAsync(cancellationToken);
                Timestamps = new List<long>(_list171.Count);
                for(int _i172 = 0; _i172 < _list171.Count; ++_i172)
                {
                  long _elem173;
                  _elem173 = await iprot.ReadI64Async(cancellationToken);
                  Timestamps.Add(_elem173);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_timestamps = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Bool)
            {
              IsAligned = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_prefixPath)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_measurementsList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_valuesList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_timestamps)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSInsertStringRecordsOfOneDeviceReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "prefixPath";
      field.Type = TType.String;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteStringAsync(PrefixPath, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "measurementsList";
      field.Type = TType.List;
      field.ID = 3;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.List, MeasurementsList.Count), cancellationToken);
        foreach (List<string> _iter174 in MeasurementsList)
        {
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, _iter174.Count), cancellationToken);
            foreach (string _iter175 in _iter174)
            {
              await oprot.WriteStringAsync(_iter175, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "valuesList";
      field.Type = TType.List;
      field.ID = 4;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.List, ValuesList.Count), cancellationToken);
        foreach (List<string> _iter176 in ValuesList)
        {
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, _iter176.Count), cancellationToken);
            foreach (string _iter177 in _iter176)
            {
              await oprot.WriteStringAsync(_iter177, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "timestamps";
      field.Type = TType.List;
      field.ID = 5;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.I64, Timestamps.Count), cancellationToken);
        foreach (long _iter178 in Timestamps)
        {
          await oprot.WriteI64Async(_iter178, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (__isset.isAligned)
      {
        field.Name = "isAligned";
        field.Type = TType.Bool;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsAligned, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TSInsertStringRecordsOfOneDeviceReq;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && System.Object.Equals(PrefixPath, other.PrefixPath)
      && TCollections.Equals(MeasurementsList, other.MeasurementsList)
      && TCollections.Equals(ValuesList, other.ValuesList)
      && TCollections.Equals(Timestamps, other.Timestamps)
      && ((__isset.isAligned == other.__isset.isAligned) && ((!__isset.isAligned) || (System.Object.Equals(IsAligned, other.IsAligned))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      hashcode = (hashcode * 397) + PrefixPath.GetHashCode();
      hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementsList);
      hashcode = (hashcode * 397) + TCollections.GetHashCode(ValuesList);
      hashcode = (hashcode * 397) + TCollections.GetHashCode(Timestamps);
      if(__isset.isAligned)
        hashcode = (hashcode * 397) + IsAligned.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSInsertStringRecordsOfOneDeviceReq(");
    sb.Append(", SessionId: ");
    sb.Append(SessionId);
    sb.Append(", PrefixPath: ");
    sb.Append(PrefixPath);
    sb.Append(", MeasurementsList: ");
    sb.Append(MeasurementsList);
    sb.Append(", ValuesList: ");
    sb.Append(ValuesList);
    sb.Append(", Timestamps: ");
    sb.Append(Timestamps);
    if (__isset.isAligned)
    {
      sb.Append(", IsAligned: ");
      sb.Append(IsAligned);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

