/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TSpaceQuota : TBase
{
  private long _diskSize;
  private long _deviceNum;
  private long _timeserieNum;

  public long DiskSize
  {
    get
    {
      return _diskSize;
    }
    set
    {
      __isset.diskSize = true;
      this._diskSize = value;
    }
  }

  public long DeviceNum
  {
    get
    {
      return _deviceNum;
    }
    set
    {
      __isset.deviceNum = true;
      this._deviceNum = value;
    }
  }

  public long TimeserieNum
  {
    get
    {
      return _timeserieNum;
    }
    set
    {
      __isset.timeserieNum = true;
      this._timeserieNum = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool diskSize;
    public bool deviceNum;
    public bool timeserieNum;
  }

  public TSpaceQuota()
  {
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              DiskSize = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              DeviceNum = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              TimeserieNum = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSpaceQuota");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if(__isset.diskSize)
      {
        field.Name = "diskSize";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(DiskSize, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.deviceNum)
      {
        field.Name = "deviceNum";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(DeviceNum, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.timeserieNum)
      {
        field.Name = "timeserieNum";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(TimeserieNum, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSpaceQuota other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.diskSize == other.__isset.diskSize) && ((!__isset.diskSize) || (System.Object.Equals(DiskSize, other.DiskSize))))
      && ((__isset.deviceNum == other.__isset.deviceNum) && ((!__isset.deviceNum) || (System.Object.Equals(DeviceNum, other.DeviceNum))))
      && ((__isset.timeserieNum == other.__isset.timeserieNum) && ((!__isset.timeserieNum) || (System.Object.Equals(TimeserieNum, other.TimeserieNum))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.diskSize)
      {
        hashcode = (hashcode * 397) + DiskSize.GetHashCode();
      }
      if(__isset.deviceNum)
      {
        hashcode = (hashcode * 397) + DeviceNum.GetHashCode();
      }
      if(__isset.timeserieNum)
      {
        hashcode = (hashcode * 397) + TimeserieNum.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSpaceQuota(");
    int tmp53 = 0;
    if(__isset.diskSize)
    {
      if(0 < tmp53++) { sb.Append(", "); }
      sb.Append("DiskSize: ");
      DiskSize.ToString(sb);
    }
    if(__isset.deviceNum)
    {
      if(0 < tmp53++) { sb.Append(", "); }
      sb.Append("DeviceNum: ");
      DeviceNum.ToString(sb);
    }
    if(__isset.timeserieNum)
    {
      if(0 < tmp53++) { sb.Append(", "); }
      sb.Append("TimeserieNum: ");
      TimeserieNum.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

