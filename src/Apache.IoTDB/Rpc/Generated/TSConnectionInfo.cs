/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TSConnectionInfo : TBase
{

  public string UserName { get; set; }

  public long LogInTime { get; set; }

  public string ConnectionId { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="global::.TSConnectionType"/>
  /// </summary>
  public TSConnectionType Type { get; set; }

  public TSConnectionInfo()
  {
  }

  public TSConnectionInfo(string userName, long logInTime, string connectionId, TSConnectionType type) : this()
  {
    this.UserName = userName;
    this.LogInTime = logInTime;
    this.ConnectionId = connectionId;
    this.Type = type;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_userName = false;
      bool isset_logInTime = false;
      bool isset_connectionId = false;
      bool isset_type = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              UserName = await iprot.ReadStringAsync(cancellationToken);
              isset_userName = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              LogInTime = await iprot.ReadI64Async(cancellationToken);
              isset_logInTime = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              ConnectionId = await iprot.ReadStringAsync(cancellationToken);
              isset_connectionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Type = (TSConnectionType)await iprot.ReadI32Async(cancellationToken);
              isset_type = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_userName)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_logInTime)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_connectionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_type)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp587 = new TStruct("TSConnectionInfo");
      await oprot.WriteStructBeginAsync(tmp587, cancellationToken);
      var tmp588 = new TField();
      if((UserName != null))
      {
        tmp588.Name = "userName";
        tmp588.Type = TType.String;
        tmp588.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
        await oprot.WriteStringAsync(UserName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp588.Name = "logInTime";
      tmp588.Type = TType.I64;
      tmp588.ID = 2;
      await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
      await oprot.WriteI64Async(LogInTime, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((ConnectionId != null))
      {
        tmp588.Name = "connectionId";
        tmp588.Type = TType.String;
        tmp588.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
        await oprot.WriteStringAsync(ConnectionId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp588.Name = "type";
      tmp588.Type = TType.I32;
      tmp588.ID = 4;
      await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
      await oprot.WriteI32Async((int)Type, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSConnectionInfo other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(UserName, other.UserName)
      && System.Object.Equals(LogInTime, other.LogInTime)
      && System.Object.Equals(ConnectionId, other.ConnectionId)
      && System.Object.Equals(Type, other.Type);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((UserName != null))
      {
        hashcode = (hashcode * 397) + UserName.GetHashCode();
      }
      hashcode = (hashcode * 397) + LogInTime.GetHashCode();
      if((ConnectionId != null))
      {
        hashcode = (hashcode * 397) + ConnectionId.GetHashCode();
      }
      hashcode = (hashcode * 397) + Type.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp589 = new StringBuilder("TSConnectionInfo(");
    if((UserName != null))
    {
      tmp589.Append(", UserName: ");
      UserName.ToString(tmp589);
    }
    tmp589.Append(", LogInTime: ");
    LogInTime.ToString(tmp589);
    if((ConnectionId != null))
    {
      tmp589.Append(", ConnectionId: ");
      ConnectionId.ToString(tmp589);
    }
    tmp589.Append(", Type: ");
    Type.ToString(tmp589);
    tmp589.Append(')');
    return tmp589.ToString();
  }
}

