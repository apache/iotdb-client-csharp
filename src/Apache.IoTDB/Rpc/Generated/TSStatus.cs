/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TSStatus : TBase
{
  private string _message;
  private List<TSStatus> _subStatus;
  private TEndPoint _redirectNode;
  private bool _needRetry;

  public int Code { get; set; }

  public string Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }

  public List<TSStatus> SubStatus
  {
    get
    {
      return _subStatus;
    }
    set
    {
      __isset.subStatus = true;
      this._subStatus = value;
    }
  }

  public TEndPoint RedirectNode
  {
    get
    {
      return _redirectNode;
    }
    set
    {
      __isset.redirectNode = true;
      this._redirectNode = value;
    }
  }

  public bool NeedRetry
  {
    get
    {
      return _needRetry;
    }
    set
    {
      __isset.needRetry = true;
      this._needRetry = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool message;
    public bool subStatus;
    public bool redirectNode;
    public bool needRetry;
  }

  public TSStatus()
  {
  }

  public TSStatus(int code) : this()
  {
    this.Code = code;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_code = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Code = await iprot.ReadI32Async(cancellationToken);
              isset_code = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Message = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                SubStatus = new List<TSStatus>(_list0.Count);
                for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  TSStatus _elem2;
                  _elem2 = new TSStatus();
                  await _elem2.ReadAsync(iprot, cancellationToken);
                  SubStatus.Add(_elem2);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              RedirectNode = new TEndPoint();
              await RedirectNode.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              NeedRetry = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_code)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSStatus");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "code";
      field.Type = TType.I32;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI32Async(Code, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (Message != null && __isset.message)
      {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Message, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SubStatus != null && __isset.subStatus)
      {
        field.Name = "subStatus";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, SubStatus.Count), cancellationToken);
          foreach (TSStatus _iter3 in SubStatus)
          {
            await _iter3.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RedirectNode != null && __isset.redirectNode)
      {
        field.Name = "redirectNode";
        field.Type = TType.Struct;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await RedirectNode.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.needRetry)
      {
        field.Name = "needRetry";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NeedRetry, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TSStatus;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(Code, other.Code)
      && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))))
      && ((__isset.subStatus == other.__isset.subStatus) && ((!__isset.subStatus) || (TCollections.Equals(SubStatus, other.SubStatus))))
      && ((__isset.redirectNode == other.__isset.redirectNode) && ((!__isset.redirectNode) || (System.Object.Equals(RedirectNode, other.RedirectNode))))
      && ((__isset.needRetry == other.__isset.needRetry) && ((!__isset.needRetry) || (System.Object.Equals(NeedRetry, other.NeedRetry))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + Code.GetHashCode();
      if(__isset.message)
        hashcode = (hashcode * 397) + Message.GetHashCode();
      if(__isset.subStatus)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SubStatus);
      if(__isset.redirectNode)
        hashcode = (hashcode * 397) + RedirectNode.GetHashCode();
      if(__isset.needRetry)
        hashcode = (hashcode * 397) + NeedRetry.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSStatus(");
    sb.Append(", Code: ");
    sb.Append(Code);
    if (Message != null && __isset.message)
    {
      sb.Append(", Message: ");
      sb.Append(Message);
    }
    if (SubStatus != null && __isset.subStatus)
    {
      sb.Append(", SubStatus: ");
      sb.Append(SubStatus);
    }
    if (RedirectNode != null && __isset.redirectNode)
    {
      sb.Append(", RedirectNode: ");
      sb.Append(RedirectNode== null ? "<null>" : RedirectNode.ToString());
    }
    if (__isset.needRetry)
    {
      sb.Append(", NeedRetry: ");
      sb.Append(NeedRetry);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

