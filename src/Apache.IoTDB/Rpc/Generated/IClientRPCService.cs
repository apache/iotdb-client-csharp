/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class IClientRPCService
{
  public interface IAsync
  {
    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeQueryStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeUpdateStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeRawDataQueryV2(TSRawDataQueryReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeLastDataQueryV2(TSLastDataQueryReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeFastLastDataQueryForOnePrefixPath(TSFastLastDataQueryForOnePrefixPathReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeFastLastDataQueryForOneDeviceV2(TSFastLastDataQueryForOneDeviceReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeAggregationQueryV2(TSAggregationQueryReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeGroupByQueryIntervalQuery(TSGroupByQueryIntervalReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSFetchResultsResp> fetchResultsV2(TSFetchResultsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSOpenSessionResp> openSession(TSOpenSessionReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> closeSession(TSCloseSessionReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> executeBatchStatement(TSExecuteBatchStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeQueryStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeUpdateStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSFetchResultsResp> fetchResults(TSFetchResultsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSFetchMetadataResp> fetchMetadata(TSFetchMetadataReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> cancelOperation(TSCancelOperationReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> closeOperation(TSCloseOperationReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSGetTimeZoneResp> getTimeZone(long sessionId, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> setTimeZone(TSSetTimeZoneReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<ServerProperties> getProperties(CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> setStorageGroup(long sessionId, string storageGroup, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> createTimeseries(TSCreateTimeseriesReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> createAlignedTimeseries(TSCreateAlignedTimeseriesReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> createMultiTimeseries(TSCreateMultiTimeseriesReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> deleteTimeseries(long sessionId, List<string> path, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> deleteStorageGroups(long sessionId, List<string> storageGroup, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertRecord(TSInsertRecordReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertStringRecord(TSInsertStringRecordReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertTablet(TSInsertTabletReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertTablets(TSInsertTabletsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertRecords(TSInsertRecordsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertStringRecordsOfOneDevice(TSInsertStringRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> insertStringRecords(TSInsertStringRecordsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertTablet(TSInsertTabletReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertTablets(TSInsertTabletsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertRecord(TSInsertRecordReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertStringRecord(TSInsertStringRecordReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertRecords(TSInsertRecordsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> testInsertStringRecords(TSInsertStringRecordsReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> deleteData(TSDeleteDataReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeRawDataQuery(TSRawDataQueryReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeLastDataQuery(TSLastDataQueryReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeAggregationQuery(TSAggregationQueryReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<long> requestStatementId(long sessionId, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> createSchemaTemplate(TSCreateSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> appendSchemaTemplate(TSAppendSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> pruneSchemaTemplate(TSPruneSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSQueryTemplateResp> querySchemaTemplate(TSQueryTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TShowConfigurationTemplateResp> showConfigurationTemplate(CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TShowConfigurationResp> showConfiguration(int nodeId, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> setSchemaTemplate(TSSetSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> unsetSchemaTemplate(TSUnsetSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> dropSchemaTemplate(TSDropSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> createTimeseriesUsingSchemaTemplate(TCreateTimeseriesUsingSchemaTemplateReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> handshake(TSyncIdentityInfo info, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> sendPipeData(byte[] buff, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSStatus> sendFile(TSyncTransportMetaInfo metaInfo, byte[] buff, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TPipeTransferResp> pipeTransfer(TPipeTransferReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TPipeSubscribeResp> pipeSubscribe(TPipeSubscribeReq req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSBackupConfigurationResp> getBackupConfiguration(CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSConnectionInfoResp> fetchAllConnectionsInfo(CancellationToken cancellationToken = default);

    /// <summary>
    /// For other node's call
    /// </summary>
    global::System.Threading.Tasks.Task<TSStatus> testConnectionEmptyRPC(CancellationToken cancellationToken = default);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeQueryStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeQueryStatementV2(req, cancellationToken);
      return await recv_executeQueryStatementV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeQueryStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeQueryStatementV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp599 = new InternalStructs.executeQueryStatementV2_args() {
        Req = req,
      };
      
      await tmp599.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeQueryStatementV2(CancellationToken cancellationToken = default)
    {
      
      var tmp600 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp600.Type == TMessageType.Exception)
      {
        var tmp601 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp601;
      }

      var tmp602 = new InternalStructs.executeQueryStatementV2_result();
      await tmp602.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp602.__isset.success)
      {
        return tmp602.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeQueryStatementV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeUpdateStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeUpdateStatementV2(req, cancellationToken);
      return await recv_executeUpdateStatementV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeUpdateStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeUpdateStatementV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp603 = new InternalStructs.executeUpdateStatementV2_args() {
        Req = req,
      };
      
      await tmp603.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeUpdateStatementV2(CancellationToken cancellationToken = default)
    {
      
      var tmp604 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp604.Type == TMessageType.Exception)
      {
        var tmp605 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp605;
      }

      var tmp606 = new InternalStructs.executeUpdateStatementV2_result();
      await tmp606.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp606.__isset.success)
      {
        return tmp606.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeUpdateStatementV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeStatementV2(req, cancellationToken);
      return await recv_executeStatementV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeStatementV2(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeStatementV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp607 = new InternalStructs.executeStatementV2_args() {
        Req = req,
      };
      
      await tmp607.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeStatementV2(CancellationToken cancellationToken = default)
    {
      
      var tmp608 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp608.Type == TMessageType.Exception)
      {
        var tmp609 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp609;
      }

      var tmp610 = new InternalStructs.executeStatementV2_result();
      await tmp610.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp610.__isset.success)
      {
        return tmp610.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeStatementV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeRawDataQueryV2(TSRawDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await send_executeRawDataQueryV2(req, cancellationToken);
      return await recv_executeRawDataQueryV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeRawDataQueryV2(TSRawDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeRawDataQueryV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp611 = new InternalStructs.executeRawDataQueryV2_args() {
        Req = req,
      };
      
      await tmp611.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeRawDataQueryV2(CancellationToken cancellationToken = default)
    {
      
      var tmp612 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp612.Type == TMessageType.Exception)
      {
        var tmp613 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp613;
      }

      var tmp614 = new InternalStructs.executeRawDataQueryV2_result();
      await tmp614.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp614.__isset.success)
      {
        return tmp614.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeRawDataQueryV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeLastDataQueryV2(TSLastDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await send_executeLastDataQueryV2(req, cancellationToken);
      return await recv_executeLastDataQueryV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeLastDataQueryV2(TSLastDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeLastDataQueryV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp615 = new InternalStructs.executeLastDataQueryV2_args() {
        Req = req,
      };
      
      await tmp615.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeLastDataQueryV2(CancellationToken cancellationToken = default)
    {
      
      var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp616.Type == TMessageType.Exception)
      {
        var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp617;
      }

      var tmp618 = new InternalStructs.executeLastDataQueryV2_result();
      await tmp618.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp618.__isset.success)
      {
        return tmp618.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeLastDataQueryV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeFastLastDataQueryForOnePrefixPath(TSFastLastDataQueryForOnePrefixPathReq req, CancellationToken cancellationToken = default)
    {
      await send_executeFastLastDataQueryForOnePrefixPath(req, cancellationToken);
      return await recv_executeFastLastDataQueryForOnePrefixPath(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeFastLastDataQueryForOnePrefixPath(TSFastLastDataQueryForOnePrefixPathReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeFastLastDataQueryForOnePrefixPath", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp619 = new InternalStructs.executeFastLastDataQueryForOnePrefixPath_args() {
        Req = req,
      };
      
      await tmp619.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeFastLastDataQueryForOnePrefixPath(CancellationToken cancellationToken = default)
    {
      
      var tmp620 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp620.Type == TMessageType.Exception)
      {
        var tmp621 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp621;
      }

      var tmp622 = new InternalStructs.executeFastLastDataQueryForOnePrefixPath_result();
      await tmp622.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp622.__isset.success)
      {
        return tmp622.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeFastLastDataQueryForOnePrefixPath failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeFastLastDataQueryForOneDeviceV2(TSFastLastDataQueryForOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await send_executeFastLastDataQueryForOneDeviceV2(req, cancellationToken);
      return await recv_executeFastLastDataQueryForOneDeviceV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeFastLastDataQueryForOneDeviceV2(TSFastLastDataQueryForOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeFastLastDataQueryForOneDeviceV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp623 = new InternalStructs.executeFastLastDataQueryForOneDeviceV2_args() {
        Req = req,
      };
      
      await tmp623.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeFastLastDataQueryForOneDeviceV2(CancellationToken cancellationToken = default)
    {
      
      var tmp624 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp624.Type == TMessageType.Exception)
      {
        var tmp625 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp625;
      }

      var tmp626 = new InternalStructs.executeFastLastDataQueryForOneDeviceV2_result();
      await tmp626.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp626.__isset.success)
      {
        return tmp626.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeFastLastDataQueryForOneDeviceV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeAggregationQueryV2(TSAggregationQueryReq req, CancellationToken cancellationToken = default)
    {
      await send_executeAggregationQueryV2(req, cancellationToken);
      return await recv_executeAggregationQueryV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeAggregationQueryV2(TSAggregationQueryReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeAggregationQueryV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp627 = new InternalStructs.executeAggregationQueryV2_args() {
        Req = req,
      };
      
      await tmp627.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeAggregationQueryV2(CancellationToken cancellationToken = default)
    {
      
      var tmp628 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp628.Type == TMessageType.Exception)
      {
        var tmp629 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp629;
      }

      var tmp630 = new InternalStructs.executeAggregationQueryV2_result();
      await tmp630.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp630.__isset.success)
      {
        return tmp630.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeAggregationQueryV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeGroupByQueryIntervalQuery(TSGroupByQueryIntervalReq req, CancellationToken cancellationToken = default)
    {
      await send_executeGroupByQueryIntervalQuery(req, cancellationToken);
      return await recv_executeGroupByQueryIntervalQuery(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeGroupByQueryIntervalQuery(TSGroupByQueryIntervalReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeGroupByQueryIntervalQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp631 = new InternalStructs.executeGroupByQueryIntervalQuery_args() {
        Req = req,
      };
      
      await tmp631.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeGroupByQueryIntervalQuery(CancellationToken cancellationToken = default)
    {
      
      var tmp632 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp632.Type == TMessageType.Exception)
      {
        var tmp633 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp633;
      }

      var tmp634 = new InternalStructs.executeGroupByQueryIntervalQuery_result();
      await tmp634.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp634.__isset.success)
      {
        return tmp634.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeGroupByQueryIntervalQuery failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSFetchResultsResp> fetchResultsV2(TSFetchResultsReq req, CancellationToken cancellationToken = default)
    {
      await send_fetchResultsV2(req, cancellationToken);
      return await recv_fetchResultsV2(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_fetchResultsV2(TSFetchResultsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("fetchResultsV2", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp635 = new InternalStructs.fetchResultsV2_args() {
        Req = req,
      };
      
      await tmp635.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSFetchResultsResp> recv_fetchResultsV2(CancellationToken cancellationToken = default)
    {
      
      var tmp636 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp636.Type == TMessageType.Exception)
      {
        var tmp637 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp637;
      }

      var tmp638 = new InternalStructs.fetchResultsV2_result();
      await tmp638.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp638.__isset.success)
      {
        return tmp638.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchResultsV2 failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSOpenSessionResp> openSession(TSOpenSessionReq req, CancellationToken cancellationToken = default)
    {
      await send_openSession(req, cancellationToken);
      return await recv_openSession(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_openSession(TSOpenSessionReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("openSession", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp639 = new InternalStructs.openSession_args() {
        Req = req,
      };
      
      await tmp639.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSOpenSessionResp> recv_openSession(CancellationToken cancellationToken = default)
    {
      
      var tmp640 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp640.Type == TMessageType.Exception)
      {
        var tmp641 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp641;
      }

      var tmp642 = new InternalStructs.openSession_result();
      await tmp642.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp642.__isset.success)
      {
        return tmp642.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openSession failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> closeSession(TSCloseSessionReq req, CancellationToken cancellationToken = default)
    {
      await send_closeSession(req, cancellationToken);
      return await recv_closeSession(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_closeSession(TSCloseSessionReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeSession", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp643 = new InternalStructs.closeSession_args() {
        Req = req,
      };
      
      await tmp643.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_closeSession(CancellationToken cancellationToken = default)
    {
      
      var tmp644 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp644.Type == TMessageType.Exception)
      {
        var tmp645 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp645;
      }

      var tmp646 = new InternalStructs.closeSession_result();
      await tmp646.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp646.__isset.success)
      {
        return tmp646.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "closeSession failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeStatement(req, cancellationToken);
      return await recv_executeStatement(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeStatement", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp647 = new InternalStructs.executeStatement_args() {
        Req = req,
      };
      
      await tmp647.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeStatement(CancellationToken cancellationToken = default)
    {
      
      var tmp648 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp648.Type == TMessageType.Exception)
      {
        var tmp649 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp649;
      }

      var tmp650 = new InternalStructs.executeStatement_result();
      await tmp650.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp650.__isset.success)
      {
        return tmp650.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeStatement failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> executeBatchStatement(TSExecuteBatchStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeBatchStatement(req, cancellationToken);
      return await recv_executeBatchStatement(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeBatchStatement(TSExecuteBatchStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeBatchStatement", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp651 = new InternalStructs.executeBatchStatement_args() {
        Req = req,
      };
      
      await tmp651.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_executeBatchStatement(CancellationToken cancellationToken = default)
    {
      
      var tmp652 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp652.Type == TMessageType.Exception)
      {
        var tmp653 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp653;
      }

      var tmp654 = new InternalStructs.executeBatchStatement_result();
      await tmp654.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp654.__isset.success)
      {
        return tmp654.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeBatchStatement failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeQueryStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeQueryStatement(req, cancellationToken);
      return await recv_executeQueryStatement(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeQueryStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeQueryStatement", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp655 = new InternalStructs.executeQueryStatement_args() {
        Req = req,
      };
      
      await tmp655.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeQueryStatement(CancellationToken cancellationToken = default)
    {
      
      var tmp656 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp656.Type == TMessageType.Exception)
      {
        var tmp657 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp657;
      }

      var tmp658 = new InternalStructs.executeQueryStatement_result();
      await tmp658.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp658.__isset.success)
      {
        return tmp658.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeQueryStatement failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeUpdateStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await send_executeUpdateStatement(req, cancellationToken);
      return await recv_executeUpdateStatement(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeUpdateStatement(TSExecuteStatementReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeUpdateStatement", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp659 = new InternalStructs.executeUpdateStatement_args() {
        Req = req,
      };
      
      await tmp659.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeUpdateStatement(CancellationToken cancellationToken = default)
    {
      
      var tmp660 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp660.Type == TMessageType.Exception)
      {
        var tmp661 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp661;
      }

      var tmp662 = new InternalStructs.executeUpdateStatement_result();
      await tmp662.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp662.__isset.success)
      {
        return tmp662.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeUpdateStatement failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSFetchResultsResp> fetchResults(TSFetchResultsReq req, CancellationToken cancellationToken = default)
    {
      await send_fetchResults(req, cancellationToken);
      return await recv_fetchResults(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_fetchResults(TSFetchResultsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("fetchResults", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp663 = new InternalStructs.fetchResults_args() {
        Req = req,
      };
      
      await tmp663.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSFetchResultsResp> recv_fetchResults(CancellationToken cancellationToken = default)
    {
      
      var tmp664 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp664.Type == TMessageType.Exception)
      {
        var tmp665 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp665;
      }

      var tmp666 = new InternalStructs.fetchResults_result();
      await tmp666.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp666.__isset.success)
      {
        return tmp666.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchResults failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSFetchMetadataResp> fetchMetadata(TSFetchMetadataReq req, CancellationToken cancellationToken = default)
    {
      await send_fetchMetadata(req, cancellationToken);
      return await recv_fetchMetadata(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_fetchMetadata(TSFetchMetadataReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("fetchMetadata", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp667 = new InternalStructs.fetchMetadata_args() {
        Req = req,
      };
      
      await tmp667.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSFetchMetadataResp> recv_fetchMetadata(CancellationToken cancellationToken = default)
    {
      
      var tmp668 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp668.Type == TMessageType.Exception)
      {
        var tmp669 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp669;
      }

      var tmp670 = new InternalStructs.fetchMetadata_result();
      await tmp670.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp670.__isset.success)
      {
        return tmp670.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchMetadata failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> cancelOperation(TSCancelOperationReq req, CancellationToken cancellationToken = default)
    {
      await send_cancelOperation(req, cancellationToken);
      return await recv_cancelOperation(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_cancelOperation(TSCancelOperationReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelOperation", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp671 = new InternalStructs.cancelOperation_args() {
        Req = req,
      };
      
      await tmp671.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_cancelOperation(CancellationToken cancellationToken = default)
    {
      
      var tmp672 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp672.Type == TMessageType.Exception)
      {
        var tmp673 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp673;
      }

      var tmp674 = new InternalStructs.cancelOperation_result();
      await tmp674.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp674.__isset.success)
      {
        return tmp674.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancelOperation failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> closeOperation(TSCloseOperationReq req, CancellationToken cancellationToken = default)
    {
      await send_closeOperation(req, cancellationToken);
      return await recv_closeOperation(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_closeOperation(TSCloseOperationReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeOperation", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp675 = new InternalStructs.closeOperation_args() {
        Req = req,
      };
      
      await tmp675.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_closeOperation(CancellationToken cancellationToken = default)
    {
      
      var tmp676 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp676.Type == TMessageType.Exception)
      {
        var tmp677 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp677;
      }

      var tmp678 = new InternalStructs.closeOperation_result();
      await tmp678.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp678.__isset.success)
      {
        return tmp678.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "closeOperation failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSGetTimeZoneResp> getTimeZone(long sessionId, CancellationToken cancellationToken = default)
    {
      await send_getTimeZone(sessionId, cancellationToken);
      return await recv_getTimeZone(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_getTimeZone(long sessionId, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTimeZone", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp679 = new InternalStructs.getTimeZone_args() {
        SessionId = sessionId,
      };
      
      await tmp679.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSGetTimeZoneResp> recv_getTimeZone(CancellationToken cancellationToken = default)
    {
      
      var tmp680 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp680.Type == TMessageType.Exception)
      {
        var tmp681 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp681;
      }

      var tmp682 = new InternalStructs.getTimeZone_result();
      await tmp682.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp682.__isset.success)
      {
        return tmp682.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTimeZone failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> setTimeZone(TSSetTimeZoneReq req, CancellationToken cancellationToken = default)
    {
      await send_setTimeZone(req, cancellationToken);
      return await recv_setTimeZone(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_setTimeZone(TSSetTimeZoneReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("setTimeZone", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp683 = new InternalStructs.setTimeZone_args() {
        Req = req,
      };
      
      await tmp683.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_setTimeZone(CancellationToken cancellationToken = default)
    {
      
      var tmp684 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp684.Type == TMessageType.Exception)
      {
        var tmp685 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp685;
      }

      var tmp686 = new InternalStructs.setTimeZone_result();
      await tmp686.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp686.__isset.success)
      {
        return tmp686.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setTimeZone failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<ServerProperties> getProperties(CancellationToken cancellationToken = default)
    {
      await send_getProperties(cancellationToken);
      return await recv_getProperties(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_getProperties(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getProperties", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp687 = new InternalStructs.getProperties_args() {
      };
      
      await tmp687.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<ServerProperties> recv_getProperties(CancellationToken cancellationToken = default)
    {
      
      var tmp688 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp688.Type == TMessageType.Exception)
      {
        var tmp689 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp689;
      }

      var tmp690 = new InternalStructs.getProperties_result();
      await tmp690.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp690.__isset.success)
      {
        return tmp690.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProperties failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> setStorageGroup(long sessionId, string storageGroup, CancellationToken cancellationToken = default)
    {
      await send_setStorageGroup(sessionId, storageGroup, cancellationToken);
      return await recv_setStorageGroup(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_setStorageGroup(long sessionId, string storageGroup, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("setStorageGroup", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp691 = new InternalStructs.setStorageGroup_args() {
        SessionId = sessionId,
        StorageGroup = storageGroup,
      };
      
      await tmp691.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_setStorageGroup(CancellationToken cancellationToken = default)
    {
      
      var tmp692 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp692.Type == TMessageType.Exception)
      {
        var tmp693 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp693;
      }

      var tmp694 = new InternalStructs.setStorageGroup_result();
      await tmp694.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp694.__isset.success)
      {
        return tmp694.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setStorageGroup failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> createTimeseries(TSCreateTimeseriesReq req, CancellationToken cancellationToken = default)
    {
      await send_createTimeseries(req, cancellationToken);
      return await recv_createTimeseries(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_createTimeseries(TSCreateTimeseriesReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("createTimeseries", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp695 = new InternalStructs.createTimeseries_args() {
        Req = req,
      };
      
      await tmp695.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_createTimeseries(CancellationToken cancellationToken = default)
    {
      
      var tmp696 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp696.Type == TMessageType.Exception)
      {
        var tmp697 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp697;
      }

      var tmp698 = new InternalStructs.createTimeseries_result();
      await tmp698.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp698.__isset.success)
      {
        return tmp698.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTimeseries failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> createAlignedTimeseries(TSCreateAlignedTimeseriesReq req, CancellationToken cancellationToken = default)
    {
      await send_createAlignedTimeseries(req, cancellationToken);
      return await recv_createAlignedTimeseries(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_createAlignedTimeseries(TSCreateAlignedTimeseriesReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("createAlignedTimeseries", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp699 = new InternalStructs.createAlignedTimeseries_args() {
        Req = req,
      };
      
      await tmp699.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_createAlignedTimeseries(CancellationToken cancellationToken = default)
    {
      
      var tmp700 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp700.Type == TMessageType.Exception)
      {
        var tmp701 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp701;
      }

      var tmp702 = new InternalStructs.createAlignedTimeseries_result();
      await tmp702.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp702.__isset.success)
      {
        return tmp702.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createAlignedTimeseries failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> createMultiTimeseries(TSCreateMultiTimeseriesReq req, CancellationToken cancellationToken = default)
    {
      await send_createMultiTimeseries(req, cancellationToken);
      return await recv_createMultiTimeseries(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_createMultiTimeseries(TSCreateMultiTimeseriesReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("createMultiTimeseries", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp703 = new InternalStructs.createMultiTimeseries_args() {
        Req = req,
      };
      
      await tmp703.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_createMultiTimeseries(CancellationToken cancellationToken = default)
    {
      
      var tmp704 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp704.Type == TMessageType.Exception)
      {
        var tmp705 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp705;
      }

      var tmp706 = new InternalStructs.createMultiTimeseries_result();
      await tmp706.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp706.__isset.success)
      {
        return tmp706.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createMultiTimeseries failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> deleteTimeseries(long sessionId, List<string> path, CancellationToken cancellationToken = default)
    {
      await send_deleteTimeseries(sessionId, path, cancellationToken);
      return await recv_deleteTimeseries(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_deleteTimeseries(long sessionId, List<string> path, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteTimeseries", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp707 = new InternalStructs.deleteTimeseries_args() {
        SessionId = sessionId,
        Path = path,
      };
      
      await tmp707.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_deleteTimeseries(CancellationToken cancellationToken = default)
    {
      
      var tmp708 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp708.Type == TMessageType.Exception)
      {
        var tmp709 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp709;
      }

      var tmp710 = new InternalStructs.deleteTimeseries_result();
      await tmp710.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp710.__isset.success)
      {
        return tmp710.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTimeseries failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> deleteStorageGroups(long sessionId, List<string> storageGroup, CancellationToken cancellationToken = default)
    {
      await send_deleteStorageGroups(sessionId, storageGroup, cancellationToken);
      return await recv_deleteStorageGroups(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_deleteStorageGroups(long sessionId, List<string> storageGroup, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteStorageGroups", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp711 = new InternalStructs.deleteStorageGroups_args() {
        SessionId = sessionId,
        StorageGroup = storageGroup,
      };
      
      await tmp711.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_deleteStorageGroups(CancellationToken cancellationToken = default)
    {
      
      var tmp712 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp712.Type == TMessageType.Exception)
      {
        var tmp713 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp713;
      }

      var tmp714 = new InternalStructs.deleteStorageGroups_result();
      await tmp714.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp714.__isset.success)
      {
        return tmp714.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteStorageGroups failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertRecord(TSInsertRecordReq req, CancellationToken cancellationToken = default)
    {
      await send_insertRecord(req, cancellationToken);
      return await recv_insertRecord(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertRecord(TSInsertRecordReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertRecord", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp715 = new InternalStructs.insertRecord_args() {
        Req = req,
      };
      
      await tmp715.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertRecord(CancellationToken cancellationToken = default)
    {
      
      var tmp716 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp716.Type == TMessageType.Exception)
      {
        var tmp717 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp717;
      }

      var tmp718 = new InternalStructs.insertRecord_result();
      await tmp718.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp718.__isset.success)
      {
        return tmp718.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertRecord failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertStringRecord(TSInsertStringRecordReq req, CancellationToken cancellationToken = default)
    {
      await send_insertStringRecord(req, cancellationToken);
      return await recv_insertStringRecord(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertStringRecord(TSInsertStringRecordReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertStringRecord", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp719 = new InternalStructs.insertStringRecord_args() {
        Req = req,
      };
      
      await tmp719.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertStringRecord(CancellationToken cancellationToken = default)
    {
      
      var tmp720 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp720.Type == TMessageType.Exception)
      {
        var tmp721 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp721;
      }

      var tmp722 = new InternalStructs.insertStringRecord_result();
      await tmp722.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp722.__isset.success)
      {
        return tmp722.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertStringRecord failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertTablet(TSInsertTabletReq req, CancellationToken cancellationToken = default)
    {
      await send_insertTablet(req, cancellationToken);
      return await recv_insertTablet(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertTablet(TSInsertTabletReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertTablet", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp723 = new InternalStructs.insertTablet_args() {
        Req = req,
      };
      
      await tmp723.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertTablet(CancellationToken cancellationToken = default)
    {
      
      var tmp724 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp724.Type == TMessageType.Exception)
      {
        var tmp725 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp725;
      }

      var tmp726 = new InternalStructs.insertTablet_result();
      await tmp726.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp726.__isset.success)
      {
        return tmp726.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertTablet failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertTablets(TSInsertTabletsReq req, CancellationToken cancellationToken = default)
    {
      await send_insertTablets(req, cancellationToken);
      return await recv_insertTablets(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertTablets(TSInsertTabletsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertTablets", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp727 = new InternalStructs.insertTablets_args() {
        Req = req,
      };
      
      await tmp727.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertTablets(CancellationToken cancellationToken = default)
    {
      
      var tmp728 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp728.Type == TMessageType.Exception)
      {
        var tmp729 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp729;
      }

      var tmp730 = new InternalStructs.insertTablets_result();
      await tmp730.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp730.__isset.success)
      {
        return tmp730.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertTablets failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertRecords(TSInsertRecordsReq req, CancellationToken cancellationToken = default)
    {
      await send_insertRecords(req, cancellationToken);
      return await recv_insertRecords(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertRecords(TSInsertRecordsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertRecords", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp731 = new InternalStructs.insertRecords_args() {
        Req = req,
      };
      
      await tmp731.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertRecords(CancellationToken cancellationToken = default)
    {
      
      var tmp732 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp732.Type == TMessageType.Exception)
      {
        var tmp733 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp733;
      }

      var tmp734 = new InternalStructs.insertRecords_result();
      await tmp734.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp734.__isset.success)
      {
        return tmp734.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertRecords failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await send_insertRecordsOfOneDevice(req, cancellationToken);
      return await recv_insertRecordsOfOneDevice(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertRecordsOfOneDevice", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp735 = new InternalStructs.insertRecordsOfOneDevice_args() {
        Req = req,
      };
      
      await tmp735.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertRecordsOfOneDevice(CancellationToken cancellationToken = default)
    {
      
      var tmp736 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp736.Type == TMessageType.Exception)
      {
        var tmp737 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp737;
      }

      var tmp738 = new InternalStructs.insertRecordsOfOneDevice_result();
      await tmp738.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp738.__isset.success)
      {
        return tmp738.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertRecordsOfOneDevice failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertStringRecordsOfOneDevice(TSInsertStringRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await send_insertStringRecordsOfOneDevice(req, cancellationToken);
      return await recv_insertStringRecordsOfOneDevice(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertStringRecordsOfOneDevice(TSInsertStringRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertStringRecordsOfOneDevice", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp739 = new InternalStructs.insertStringRecordsOfOneDevice_args() {
        Req = req,
      };
      
      await tmp739.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertStringRecordsOfOneDevice(CancellationToken cancellationToken = default)
    {
      
      var tmp740 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp740.Type == TMessageType.Exception)
      {
        var tmp741 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp741;
      }

      var tmp742 = new InternalStructs.insertStringRecordsOfOneDevice_result();
      await tmp742.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp742.__isset.success)
      {
        return tmp742.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertStringRecordsOfOneDevice failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> insertStringRecords(TSInsertStringRecordsReq req, CancellationToken cancellationToken = default)
    {
      await send_insertStringRecords(req, cancellationToken);
      return await recv_insertStringRecords(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_insertStringRecords(TSInsertStringRecordsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertStringRecords", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp743 = new InternalStructs.insertStringRecords_args() {
        Req = req,
      };
      
      await tmp743.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_insertStringRecords(CancellationToken cancellationToken = default)
    {
      
      var tmp744 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp744.Type == TMessageType.Exception)
      {
        var tmp745 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp745;
      }

      var tmp746 = new InternalStructs.insertStringRecords_result();
      await tmp746.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp746.__isset.success)
      {
        return tmp746.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertStringRecords failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertTablet(TSInsertTabletReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertTablet(req, cancellationToken);
      return await recv_testInsertTablet(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertTablet(TSInsertTabletReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertTablet", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp747 = new InternalStructs.testInsertTablet_args() {
        Req = req,
      };
      
      await tmp747.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertTablet(CancellationToken cancellationToken = default)
    {
      
      var tmp748 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp748.Type == TMessageType.Exception)
      {
        var tmp749 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp749;
      }

      var tmp750 = new InternalStructs.testInsertTablet_result();
      await tmp750.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp750.__isset.success)
      {
        return tmp750.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertTablet failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertTablets(TSInsertTabletsReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertTablets(req, cancellationToken);
      return await recv_testInsertTablets(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertTablets(TSInsertTabletsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertTablets", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp751 = new InternalStructs.testInsertTablets_args() {
        Req = req,
      };
      
      await tmp751.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertTablets(CancellationToken cancellationToken = default)
    {
      
      var tmp752 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp752.Type == TMessageType.Exception)
      {
        var tmp753 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp753;
      }

      var tmp754 = new InternalStructs.testInsertTablets_result();
      await tmp754.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp754.__isset.success)
      {
        return tmp754.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertTablets failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertRecord(TSInsertRecordReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertRecord(req, cancellationToken);
      return await recv_testInsertRecord(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertRecord(TSInsertRecordReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertRecord", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp755 = new InternalStructs.testInsertRecord_args() {
        Req = req,
      };
      
      await tmp755.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertRecord(CancellationToken cancellationToken = default)
    {
      
      var tmp756 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp756.Type == TMessageType.Exception)
      {
        var tmp757 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp757;
      }

      var tmp758 = new InternalStructs.testInsertRecord_result();
      await tmp758.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp758.__isset.success)
      {
        return tmp758.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertRecord failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertStringRecord(TSInsertStringRecordReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertStringRecord(req, cancellationToken);
      return await recv_testInsertStringRecord(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertStringRecord(TSInsertStringRecordReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertStringRecord", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp759 = new InternalStructs.testInsertStringRecord_args() {
        Req = req,
      };
      
      await tmp759.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertStringRecord(CancellationToken cancellationToken = default)
    {
      
      var tmp760 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp760.Type == TMessageType.Exception)
      {
        var tmp761 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp761;
      }

      var tmp762 = new InternalStructs.testInsertStringRecord_result();
      await tmp762.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp762.__isset.success)
      {
        return tmp762.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertStringRecord failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertRecords(TSInsertRecordsReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertRecords(req, cancellationToken);
      return await recv_testInsertRecords(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertRecords(TSInsertRecordsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertRecords", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp763 = new InternalStructs.testInsertRecords_args() {
        Req = req,
      };
      
      await tmp763.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertRecords(CancellationToken cancellationToken = default)
    {
      
      var tmp764 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp764.Type == TMessageType.Exception)
      {
        var tmp765 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp765;
      }

      var tmp766 = new InternalStructs.testInsertRecords_result();
      await tmp766.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp766.__isset.success)
      {
        return tmp766.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertRecords failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertRecordsOfOneDevice(req, cancellationToken);
      return await recv_testInsertRecordsOfOneDevice(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp767 = new InternalStructs.testInsertRecordsOfOneDevice_args() {
        Req = req,
      };
      
      await tmp767.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertRecordsOfOneDevice(CancellationToken cancellationToken = default)
    {
      
      var tmp768 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp768.Type == TMessageType.Exception)
      {
        var tmp769 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp769;
      }

      var tmp770 = new InternalStructs.testInsertRecordsOfOneDevice_result();
      await tmp770.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp770.__isset.success)
      {
        return tmp770.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertRecordsOfOneDevice failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testInsertStringRecords(TSInsertStringRecordsReq req, CancellationToken cancellationToken = default)
    {
      await send_testInsertStringRecords(req, cancellationToken);
      return await recv_testInsertStringRecords(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testInsertStringRecords(TSInsertStringRecordsReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsertStringRecords", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp771 = new InternalStructs.testInsertStringRecords_args() {
        Req = req,
      };
      
      await tmp771.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testInsertStringRecords(CancellationToken cancellationToken = default)
    {
      
      var tmp772 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp772.Type == TMessageType.Exception)
      {
        var tmp773 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp773;
      }

      var tmp774 = new InternalStructs.testInsertStringRecords_result();
      await tmp774.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp774.__isset.success)
      {
        return tmp774.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertStringRecords failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> deleteData(TSDeleteDataReq req, CancellationToken cancellationToken = default)
    {
      await send_deleteData(req, cancellationToken);
      return await recv_deleteData(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_deleteData(TSDeleteDataReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteData", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp775 = new InternalStructs.deleteData_args() {
        Req = req,
      };
      
      await tmp775.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_deleteData(CancellationToken cancellationToken = default)
    {
      
      var tmp776 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp776.Type == TMessageType.Exception)
      {
        var tmp777 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp777;
      }

      var tmp778 = new InternalStructs.deleteData_result();
      await tmp778.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp778.__isset.success)
      {
        return tmp778.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteData failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeRawDataQuery(TSRawDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await send_executeRawDataQuery(req, cancellationToken);
      return await recv_executeRawDataQuery(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeRawDataQuery(TSRawDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeRawDataQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp779 = new InternalStructs.executeRawDataQuery_args() {
        Req = req,
      };
      
      await tmp779.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeRawDataQuery(CancellationToken cancellationToken = default)
    {
      
      var tmp780 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp780.Type == TMessageType.Exception)
      {
        var tmp781 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp781;
      }

      var tmp782 = new InternalStructs.executeRawDataQuery_result();
      await tmp782.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp782.__isset.success)
      {
        return tmp782.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeRawDataQuery failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeLastDataQuery(TSLastDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await send_executeLastDataQuery(req, cancellationToken);
      return await recv_executeLastDataQuery(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeLastDataQuery(TSLastDataQueryReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeLastDataQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp783 = new InternalStructs.executeLastDataQuery_args() {
        Req = req,
      };
      
      await tmp783.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeLastDataQuery(CancellationToken cancellationToken = default)
    {
      
      var tmp784 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp784.Type == TMessageType.Exception)
      {
        var tmp785 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp785;
      }

      var tmp786 = new InternalStructs.executeLastDataQuery_result();
      await tmp786.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp786.__isset.success)
      {
        return tmp786.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeLastDataQuery failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> executeAggregationQuery(TSAggregationQueryReq req, CancellationToken cancellationToken = default)
    {
      await send_executeAggregationQuery(req, cancellationToken);
      return await recv_executeAggregationQuery(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_executeAggregationQuery(TSAggregationQueryReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeAggregationQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp787 = new InternalStructs.executeAggregationQuery_args() {
        Req = req,
      };
      
      await tmp787.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSExecuteStatementResp> recv_executeAggregationQuery(CancellationToken cancellationToken = default)
    {
      
      var tmp788 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp788.Type == TMessageType.Exception)
      {
        var tmp789 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp789;
      }

      var tmp790 = new InternalStructs.executeAggregationQuery_result();
      await tmp790.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp790.__isset.success)
      {
        return tmp790.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeAggregationQuery failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> requestStatementId(long sessionId, CancellationToken cancellationToken = default)
    {
      await send_requestStatementId(sessionId, cancellationToken);
      return await recv_requestStatementId(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_requestStatementId(long sessionId, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestStatementId", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp791 = new InternalStructs.requestStatementId_args() {
        SessionId = sessionId,
      };
      
      await tmp791.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_requestStatementId(CancellationToken cancellationToken = default)
    {
      
      var tmp792 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp792.Type == TMessageType.Exception)
      {
        var tmp793 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp793;
      }

      var tmp794 = new InternalStructs.requestStatementId_result();
      await tmp794.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp794.__isset.success)
      {
        return tmp794.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestStatementId failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> createSchemaTemplate(TSCreateSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_createSchemaTemplate(req, cancellationToken);
      return await recv_createSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_createSchemaTemplate(TSCreateSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("createSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp795 = new InternalStructs.createSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp795.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_createSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp796 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp796.Type == TMessageType.Exception)
      {
        var tmp797 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp797;
      }

      var tmp798 = new InternalStructs.createSchemaTemplate_result();
      await tmp798.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp798.__isset.success)
      {
        return tmp798.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> appendSchemaTemplate(TSAppendSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_appendSchemaTemplate(req, cancellationToken);
      return await recv_appendSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_appendSchemaTemplate(TSAppendSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp799 = new InternalStructs.appendSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp799.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_appendSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp800 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp800.Type == TMessageType.Exception)
      {
        var tmp801 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp801;
      }

      var tmp802 = new InternalStructs.appendSchemaTemplate_result();
      await tmp802.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp802.__isset.success)
      {
        return tmp802.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "appendSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> pruneSchemaTemplate(TSPruneSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_pruneSchemaTemplate(req, cancellationToken);
      return await recv_pruneSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_pruneSchemaTemplate(TSPruneSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("pruneSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp803 = new InternalStructs.pruneSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp803.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_pruneSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp804 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp804.Type == TMessageType.Exception)
      {
        var tmp805 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp805;
      }

      var tmp806 = new InternalStructs.pruneSchemaTemplate_result();
      await tmp806.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp806.__isset.success)
      {
        return tmp806.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pruneSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSQueryTemplateResp> querySchemaTemplate(TSQueryTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_querySchemaTemplate(req, cancellationToken);
      return await recv_querySchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_querySchemaTemplate(TSQueryTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("querySchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp807 = new InternalStructs.querySchemaTemplate_args() {
        Req = req,
      };
      
      await tmp807.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSQueryTemplateResp> recv_querySchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp808 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp808.Type == TMessageType.Exception)
      {
        var tmp809 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp809;
      }

      var tmp810 = new InternalStructs.querySchemaTemplate_result();
      await tmp810.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp810.__isset.success)
      {
        return tmp810.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "querySchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TShowConfigurationTemplateResp> showConfigurationTemplate(CancellationToken cancellationToken = default)
    {
      await send_showConfigurationTemplate(cancellationToken);
      return await recv_showConfigurationTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_showConfigurationTemplate(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("showConfigurationTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp811 = new InternalStructs.showConfigurationTemplate_args() {
      };
      
      await tmp811.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TShowConfigurationTemplateResp> recv_showConfigurationTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp812 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp812.Type == TMessageType.Exception)
      {
        var tmp813 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp813;
      }

      var tmp814 = new InternalStructs.showConfigurationTemplate_result();
      await tmp814.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp814.__isset.success)
      {
        return tmp814.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "showConfigurationTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TShowConfigurationResp> showConfiguration(int nodeId, CancellationToken cancellationToken = default)
    {
      await send_showConfiguration(nodeId, cancellationToken);
      return await recv_showConfiguration(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_showConfiguration(int nodeId, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("showConfiguration", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp815 = new InternalStructs.showConfiguration_args() {
        NodeId = nodeId,
      };
      
      await tmp815.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TShowConfigurationResp> recv_showConfiguration(CancellationToken cancellationToken = default)
    {
      
      var tmp816 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp816.Type == TMessageType.Exception)
      {
        var tmp817 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp817;
      }

      var tmp818 = new InternalStructs.showConfiguration_result();
      await tmp818.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp818.__isset.success)
      {
        return tmp818.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "showConfiguration failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> setSchemaTemplate(TSSetSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_setSchemaTemplate(req, cancellationToken);
      return await recv_setSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_setSchemaTemplate(TSSetSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("setSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp819 = new InternalStructs.setSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp819.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_setSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp820 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp820.Type == TMessageType.Exception)
      {
        var tmp821 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp821;
      }

      var tmp822 = new InternalStructs.setSchemaTemplate_result();
      await tmp822.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp822.__isset.success)
      {
        return tmp822.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> unsetSchemaTemplate(TSUnsetSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_unsetSchemaTemplate(req, cancellationToken);
      return await recv_unsetSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_unsetSchemaTemplate(TSUnsetSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsetSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp823 = new InternalStructs.unsetSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp823.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_unsetSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp824 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp824.Type == TMessageType.Exception)
      {
        var tmp825 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp825;
      }

      var tmp826 = new InternalStructs.unsetSchemaTemplate_result();
      await tmp826.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp826.__isset.success)
      {
        return tmp826.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unsetSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> dropSchemaTemplate(TSDropSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_dropSchemaTemplate(req, cancellationToken);
      return await recv_dropSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_dropSchemaTemplate(TSDropSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp827 = new InternalStructs.dropSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp827.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_dropSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp828 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp828.Type == TMessageType.Exception)
      {
        var tmp829 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp829;
      }

      var tmp830 = new InternalStructs.dropSchemaTemplate_result();
      await tmp830.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp830.__isset.success)
      {
        return tmp830.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> createTimeseriesUsingSchemaTemplate(TCreateTimeseriesUsingSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await send_createTimeseriesUsingSchemaTemplate(req, cancellationToken);
      return await recv_createTimeseriesUsingSchemaTemplate(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_createTimeseriesUsingSchemaTemplate(TCreateTimeseriesUsingSchemaTemplateReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("createTimeseriesUsingSchemaTemplate", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp831 = new InternalStructs.createTimeseriesUsingSchemaTemplate_args() {
        Req = req,
      };
      
      await tmp831.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_createTimeseriesUsingSchemaTemplate(CancellationToken cancellationToken = default)
    {
      
      var tmp832 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp832.Type == TMessageType.Exception)
      {
        var tmp833 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp833;
      }

      var tmp834 = new InternalStructs.createTimeseriesUsingSchemaTemplate_result();
      await tmp834.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp834.__isset.success)
      {
        return tmp834.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTimeseriesUsingSchemaTemplate failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> handshake(TSyncIdentityInfo info, CancellationToken cancellationToken = default)
    {
      await send_handshake(info, cancellationToken);
      return await recv_handshake(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_handshake(TSyncIdentityInfo info, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("handshake", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp835 = new InternalStructs.handshake_args() {
        Info = info,
      };
      
      await tmp835.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_handshake(CancellationToken cancellationToken = default)
    {
      
      var tmp836 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp836.Type == TMessageType.Exception)
      {
        var tmp837 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp837;
      }

      var tmp838 = new InternalStructs.handshake_result();
      await tmp838.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp838.__isset.success)
      {
        return tmp838.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "handshake failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> sendPipeData(byte[] buff, CancellationToken cancellationToken = default)
    {
      await send_sendPipeData(buff, cancellationToken);
      return await recv_sendPipeData(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sendPipeData(byte[] buff, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendPipeData", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp839 = new InternalStructs.sendPipeData_args() {
        Buff = buff,
      };
      
      await tmp839.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_sendPipeData(CancellationToken cancellationToken = default)
    {
      
      var tmp840 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp840.Type == TMessageType.Exception)
      {
        var tmp841 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp841;
      }

      var tmp842 = new InternalStructs.sendPipeData_result();
      await tmp842.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp842.__isset.success)
      {
        return tmp842.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendPipeData failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> sendFile(TSyncTransportMetaInfo metaInfo, byte[] buff, CancellationToken cancellationToken = default)
    {
      await send_sendFile(metaInfo, buff, cancellationToken);
      return await recv_sendFile(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sendFile(TSyncTransportMetaInfo metaInfo, byte[] buff, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendFile", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp843 = new InternalStructs.sendFile_args() {
        MetaInfo = metaInfo,
        Buff = buff,
      };
      
      await tmp843.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_sendFile(CancellationToken cancellationToken = default)
    {
      
      var tmp844 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp844.Type == TMessageType.Exception)
      {
        var tmp845 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp845;
      }

      var tmp846 = new InternalStructs.sendFile_result();
      await tmp846.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp846.__isset.success)
      {
        return tmp846.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendFile failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TPipeTransferResp> pipeTransfer(TPipeTransferReq req, CancellationToken cancellationToken = default)
    {
      await send_pipeTransfer(req, cancellationToken);
      return await recv_pipeTransfer(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_pipeTransfer(TPipeTransferReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("pipeTransfer", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp847 = new InternalStructs.pipeTransfer_args() {
        Req = req,
      };
      
      await tmp847.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TPipeTransferResp> recv_pipeTransfer(CancellationToken cancellationToken = default)
    {
      
      var tmp848 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp848.Type == TMessageType.Exception)
      {
        var tmp849 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp849;
      }

      var tmp850 = new InternalStructs.pipeTransfer_result();
      await tmp850.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp850.__isset.success)
      {
        return tmp850.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pipeTransfer failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TPipeSubscribeResp> pipeSubscribe(TPipeSubscribeReq req, CancellationToken cancellationToken = default)
    {
      await send_pipeSubscribe(req, cancellationToken);
      return await recv_pipeSubscribe(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_pipeSubscribe(TPipeSubscribeReq req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("pipeSubscribe", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp851 = new InternalStructs.pipeSubscribe_args() {
        Req = req,
      };
      
      await tmp851.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TPipeSubscribeResp> recv_pipeSubscribe(CancellationToken cancellationToken = default)
    {
      
      var tmp852 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp852.Type == TMessageType.Exception)
      {
        var tmp853 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp853;
      }

      var tmp854 = new InternalStructs.pipeSubscribe_result();
      await tmp854.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp854.__isset.success)
      {
        return tmp854.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pipeSubscribe failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSBackupConfigurationResp> getBackupConfiguration(CancellationToken cancellationToken = default)
    {
      await send_getBackupConfiguration(cancellationToken);
      return await recv_getBackupConfiguration(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_getBackupConfiguration(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBackupConfiguration", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp855 = new InternalStructs.getBackupConfiguration_args() {
      };
      
      await tmp855.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSBackupConfigurationResp> recv_getBackupConfiguration(CancellationToken cancellationToken = default)
    {
      
      var tmp856 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp856.Type == TMessageType.Exception)
      {
        var tmp857 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp857;
      }

      var tmp858 = new InternalStructs.getBackupConfiguration_result();
      await tmp858.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp858.__isset.success)
      {
        return tmp858.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBackupConfiguration failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSConnectionInfoResp> fetchAllConnectionsInfo(CancellationToken cancellationToken = default)
    {
      await send_fetchAllConnectionsInfo(cancellationToken);
      return await recv_fetchAllConnectionsInfo(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_fetchAllConnectionsInfo(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("fetchAllConnectionsInfo", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp859 = new InternalStructs.fetchAllConnectionsInfo_args() {
      };
      
      await tmp859.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSConnectionInfoResp> recv_fetchAllConnectionsInfo(CancellationToken cancellationToken = default)
    {
      
      var tmp860 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp860.Type == TMessageType.Exception)
      {
        var tmp861 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp861;
      }

      var tmp862 = new InternalStructs.fetchAllConnectionsInfo_result();
      await tmp862.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp862.__isset.success)
      {
        return tmp862.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchAllConnectionsInfo failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSStatus> testConnectionEmptyRPC(CancellationToken cancellationToken = default)
    {
      await send_testConnectionEmptyRPC(cancellationToken);
      return await recv_testConnectionEmptyRPC(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_testConnectionEmptyRPC(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("testConnectionEmptyRPC", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp863 = new InternalStructs.testConnectionEmptyRPC_args() {
      };
      
      await tmp863.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSStatus> recv_testConnectionEmptyRPC(CancellationToken cancellationToken = default)
    {
      
      var tmp864 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp864.Type == TMessageType.Exception)
      {
        var tmp865 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp865;
      }

      var tmp866 = new InternalStructs.testConnectionEmptyRPC_result();
      await tmp866.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp866.__isset.success)
      {
        return tmp866.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testConnectionEmptyRPC failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["executeQueryStatementV2"] = executeQueryStatementV2_ProcessAsync;
      processMap_["executeUpdateStatementV2"] = executeUpdateStatementV2_ProcessAsync;
      processMap_["executeStatementV2"] = executeStatementV2_ProcessAsync;
      processMap_["executeRawDataQueryV2"] = executeRawDataQueryV2_ProcessAsync;
      processMap_["executeLastDataQueryV2"] = executeLastDataQueryV2_ProcessAsync;
      processMap_["executeFastLastDataQueryForOnePrefixPath"] = executeFastLastDataQueryForOnePrefixPath_ProcessAsync;
      processMap_["executeFastLastDataQueryForOneDeviceV2"] = executeFastLastDataQueryForOneDeviceV2_ProcessAsync;
      processMap_["executeAggregationQueryV2"] = executeAggregationQueryV2_ProcessAsync;
      processMap_["executeGroupByQueryIntervalQuery"] = executeGroupByQueryIntervalQuery_ProcessAsync;
      processMap_["fetchResultsV2"] = fetchResultsV2_ProcessAsync;
      processMap_["openSession"] = openSession_ProcessAsync;
      processMap_["closeSession"] = closeSession_ProcessAsync;
      processMap_["executeStatement"] = executeStatement_ProcessAsync;
      processMap_["executeBatchStatement"] = executeBatchStatement_ProcessAsync;
      processMap_["executeQueryStatement"] = executeQueryStatement_ProcessAsync;
      processMap_["executeUpdateStatement"] = executeUpdateStatement_ProcessAsync;
      processMap_["fetchResults"] = fetchResults_ProcessAsync;
      processMap_["fetchMetadata"] = fetchMetadata_ProcessAsync;
      processMap_["cancelOperation"] = cancelOperation_ProcessAsync;
      processMap_["closeOperation"] = closeOperation_ProcessAsync;
      processMap_["getTimeZone"] = getTimeZone_ProcessAsync;
      processMap_["setTimeZone"] = setTimeZone_ProcessAsync;
      processMap_["getProperties"] = getProperties_ProcessAsync;
      processMap_["setStorageGroup"] = setStorageGroup_ProcessAsync;
      processMap_["createTimeseries"] = createTimeseries_ProcessAsync;
      processMap_["createAlignedTimeseries"] = createAlignedTimeseries_ProcessAsync;
      processMap_["createMultiTimeseries"] = createMultiTimeseries_ProcessAsync;
      processMap_["deleteTimeseries"] = deleteTimeseries_ProcessAsync;
      processMap_["deleteStorageGroups"] = deleteStorageGroups_ProcessAsync;
      processMap_["insertRecord"] = insertRecord_ProcessAsync;
      processMap_["insertStringRecord"] = insertStringRecord_ProcessAsync;
      processMap_["insertTablet"] = insertTablet_ProcessAsync;
      processMap_["insertTablets"] = insertTablets_ProcessAsync;
      processMap_["insertRecords"] = insertRecords_ProcessAsync;
      processMap_["insertRecordsOfOneDevice"] = insertRecordsOfOneDevice_ProcessAsync;
      processMap_["insertStringRecordsOfOneDevice"] = insertStringRecordsOfOneDevice_ProcessAsync;
      processMap_["insertStringRecords"] = insertStringRecords_ProcessAsync;
      processMap_["testInsertTablet"] = testInsertTablet_ProcessAsync;
      processMap_["testInsertTablets"] = testInsertTablets_ProcessAsync;
      processMap_["testInsertRecord"] = testInsertRecord_ProcessAsync;
      processMap_["testInsertStringRecord"] = testInsertStringRecord_ProcessAsync;
      processMap_["testInsertRecords"] = testInsertRecords_ProcessAsync;
      processMap_["testInsertRecordsOfOneDevice"] = testInsertRecordsOfOneDevice_ProcessAsync;
      processMap_["testInsertStringRecords"] = testInsertStringRecords_ProcessAsync;
      processMap_["deleteData"] = deleteData_ProcessAsync;
      processMap_["executeRawDataQuery"] = executeRawDataQuery_ProcessAsync;
      processMap_["executeLastDataQuery"] = executeLastDataQuery_ProcessAsync;
      processMap_["executeAggregationQuery"] = executeAggregationQuery_ProcessAsync;
      processMap_["requestStatementId"] = requestStatementId_ProcessAsync;
      processMap_["createSchemaTemplate"] = createSchemaTemplate_ProcessAsync;
      processMap_["appendSchemaTemplate"] = appendSchemaTemplate_ProcessAsync;
      processMap_["pruneSchemaTemplate"] = pruneSchemaTemplate_ProcessAsync;
      processMap_["querySchemaTemplate"] = querySchemaTemplate_ProcessAsync;
      processMap_["showConfigurationTemplate"] = showConfigurationTemplate_ProcessAsync;
      processMap_["showConfiguration"] = showConfiguration_ProcessAsync;
      processMap_["setSchemaTemplate"] = setSchemaTemplate_ProcessAsync;
      processMap_["unsetSchemaTemplate"] = unsetSchemaTemplate_ProcessAsync;
      processMap_["dropSchemaTemplate"] = dropSchemaTemplate_ProcessAsync;
      processMap_["createTimeseriesUsingSchemaTemplate"] = createTimeseriesUsingSchemaTemplate_ProcessAsync;
      processMap_["handshake"] = handshake_ProcessAsync;
      processMap_["sendPipeData"] = sendPipeData_ProcessAsync;
      processMap_["sendFile"] = sendFile_ProcessAsync;
      processMap_["pipeTransfer"] = pipeTransfer_ProcessAsync;
      processMap_["pipeSubscribe"] = pipeSubscribe_ProcessAsync;
      processMap_["getBackupConfiguration"] = getBackupConfiguration_ProcessAsync;
      processMap_["fetchAllConnectionsInfo"] = fetchAllConnectionsInfo_ProcessAsync;
      processMap_["testConnectionEmptyRPC"] = testConnectionEmptyRPC_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task executeQueryStatementV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp867 = new InternalStructs.executeQueryStatementV2_args();
      await tmp867.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp868 = new InternalStructs.executeQueryStatementV2_result();
      try
      {
        tmp868.Success = await _iAsync.executeQueryStatementV2(tmp867.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeQueryStatementV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp868.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp869)
      {
        var tmp870 = $"Error occurred in {GetType().FullName}: {tmp869.Message}";
        if(_logger != null)
          _logger.LogError(tmp869, tmp870);
        else
          Console.Error.WriteLine(tmp870);
        var tmp871 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeQueryStatementV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp871.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeUpdateStatementV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp872 = new InternalStructs.executeUpdateStatementV2_args();
      await tmp872.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp873 = new InternalStructs.executeUpdateStatementV2_result();
      try
      {
        tmp873.Success = await _iAsync.executeUpdateStatementV2(tmp872.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeUpdateStatementV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp873.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp874)
      {
        var tmp875 = $"Error occurred in {GetType().FullName}: {tmp874.Message}";
        if(_logger != null)
          _logger.LogError(tmp874, tmp875);
        else
          Console.Error.WriteLine(tmp875);
        var tmp876 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeUpdateStatementV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp876.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeStatementV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp877 = new InternalStructs.executeStatementV2_args();
      await tmp877.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp878 = new InternalStructs.executeStatementV2_result();
      try
      {
        tmp878.Success = await _iAsync.executeStatementV2(tmp877.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeStatementV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp878.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp879)
      {
        var tmp880 = $"Error occurred in {GetType().FullName}: {tmp879.Message}";
        if(_logger != null)
          _logger.LogError(tmp879, tmp880);
        else
          Console.Error.WriteLine(tmp880);
        var tmp881 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeStatementV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp881.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeRawDataQueryV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp882 = new InternalStructs.executeRawDataQueryV2_args();
      await tmp882.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp883 = new InternalStructs.executeRawDataQueryV2_result();
      try
      {
        tmp883.Success = await _iAsync.executeRawDataQueryV2(tmp882.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeRawDataQueryV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp883.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp884)
      {
        var tmp885 = $"Error occurred in {GetType().FullName}: {tmp884.Message}";
        if(_logger != null)
          _logger.LogError(tmp884, tmp885);
        else
          Console.Error.WriteLine(tmp885);
        var tmp886 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeRawDataQueryV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp886.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeLastDataQueryV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp887 = new InternalStructs.executeLastDataQueryV2_args();
      await tmp887.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp888 = new InternalStructs.executeLastDataQueryV2_result();
      try
      {
        tmp888.Success = await _iAsync.executeLastDataQueryV2(tmp887.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeLastDataQueryV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp888.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp889)
      {
        var tmp890 = $"Error occurred in {GetType().FullName}: {tmp889.Message}";
        if(_logger != null)
          _logger.LogError(tmp889, tmp890);
        else
          Console.Error.WriteLine(tmp890);
        var tmp891 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeLastDataQueryV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp891.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeFastLastDataQueryForOnePrefixPath_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp892 = new InternalStructs.executeFastLastDataQueryForOnePrefixPath_args();
      await tmp892.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp893 = new InternalStructs.executeFastLastDataQueryForOnePrefixPath_result();
      try
      {
        tmp893.Success = await _iAsync.executeFastLastDataQueryForOnePrefixPath(tmp892.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeFastLastDataQueryForOnePrefixPath", TMessageType.Reply, seqid), cancellationToken); 
        await tmp893.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp894)
      {
        var tmp895 = $"Error occurred in {GetType().FullName}: {tmp894.Message}";
        if(_logger != null)
          _logger.LogError(tmp894, tmp895);
        else
          Console.Error.WriteLine(tmp895);
        var tmp896 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeFastLastDataQueryForOnePrefixPath", TMessageType.Exception, seqid), cancellationToken);
        await tmp896.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeFastLastDataQueryForOneDeviceV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp897 = new InternalStructs.executeFastLastDataQueryForOneDeviceV2_args();
      await tmp897.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp898 = new InternalStructs.executeFastLastDataQueryForOneDeviceV2_result();
      try
      {
        tmp898.Success = await _iAsync.executeFastLastDataQueryForOneDeviceV2(tmp897.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeFastLastDataQueryForOneDeviceV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp898.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp899)
      {
        var tmp900 = $"Error occurred in {GetType().FullName}: {tmp899.Message}";
        if(_logger != null)
          _logger.LogError(tmp899, tmp900);
        else
          Console.Error.WriteLine(tmp900);
        var tmp901 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeFastLastDataQueryForOneDeviceV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp901.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeAggregationQueryV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp902 = new InternalStructs.executeAggregationQueryV2_args();
      await tmp902.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp903 = new InternalStructs.executeAggregationQueryV2_result();
      try
      {
        tmp903.Success = await _iAsync.executeAggregationQueryV2(tmp902.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeAggregationQueryV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp903.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp904)
      {
        var tmp905 = $"Error occurred in {GetType().FullName}: {tmp904.Message}";
        if(_logger != null)
          _logger.LogError(tmp904, tmp905);
        else
          Console.Error.WriteLine(tmp905);
        var tmp906 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeAggregationQueryV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp906.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeGroupByQueryIntervalQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp907 = new InternalStructs.executeGroupByQueryIntervalQuery_args();
      await tmp907.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp908 = new InternalStructs.executeGroupByQueryIntervalQuery_result();
      try
      {
        tmp908.Success = await _iAsync.executeGroupByQueryIntervalQuery(tmp907.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeGroupByQueryIntervalQuery", TMessageType.Reply, seqid), cancellationToken); 
        await tmp908.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp909)
      {
        var tmp910 = $"Error occurred in {GetType().FullName}: {tmp909.Message}";
        if(_logger != null)
          _logger.LogError(tmp909, tmp910);
        else
          Console.Error.WriteLine(tmp910);
        var tmp911 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeGroupByQueryIntervalQuery", TMessageType.Exception, seqid), cancellationToken);
        await tmp911.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task fetchResultsV2_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp912 = new InternalStructs.fetchResultsV2_args();
      await tmp912.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp913 = new InternalStructs.fetchResultsV2_result();
      try
      {
        tmp913.Success = await _iAsync.fetchResultsV2(tmp912.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("fetchResultsV2", TMessageType.Reply, seqid), cancellationToken); 
        await tmp913.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp914)
      {
        var tmp915 = $"Error occurred in {GetType().FullName}: {tmp914.Message}";
        if(_logger != null)
          _logger.LogError(tmp914, tmp915);
        else
          Console.Error.WriteLine(tmp915);
        var tmp916 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("fetchResultsV2", TMessageType.Exception, seqid), cancellationToken);
        await tmp916.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task openSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp917 = new InternalStructs.openSession_args();
      await tmp917.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp918 = new InternalStructs.openSession_result();
      try
      {
        tmp918.Success = await _iAsync.openSession(tmp917.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("openSession", TMessageType.Reply, seqid), cancellationToken); 
        await tmp918.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp919)
      {
        var tmp920 = $"Error occurred in {GetType().FullName}: {tmp919.Message}";
        if(_logger != null)
          _logger.LogError(tmp919, tmp920);
        else
          Console.Error.WriteLine(tmp920);
        var tmp921 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("openSession", TMessageType.Exception, seqid), cancellationToken);
        await tmp921.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task closeSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp922 = new InternalStructs.closeSession_args();
      await tmp922.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp923 = new InternalStructs.closeSession_result();
      try
      {
        tmp923.Success = await _iAsync.closeSession(tmp922.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("closeSession", TMessageType.Reply, seqid), cancellationToken); 
        await tmp923.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp924)
      {
        var tmp925 = $"Error occurred in {GetType().FullName}: {tmp924.Message}";
        if(_logger != null)
          _logger.LogError(tmp924, tmp925);
        else
          Console.Error.WriteLine(tmp925);
        var tmp926 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("closeSession", TMessageType.Exception, seqid), cancellationToken);
        await tmp926.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp927 = new InternalStructs.executeStatement_args();
      await tmp927.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp928 = new InternalStructs.executeStatement_result();
      try
      {
        tmp928.Success = await _iAsync.executeStatement(tmp927.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeStatement", TMessageType.Reply, seqid), cancellationToken); 
        await tmp928.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp929)
      {
        var tmp930 = $"Error occurred in {GetType().FullName}: {tmp929.Message}";
        if(_logger != null)
          _logger.LogError(tmp929, tmp930);
        else
          Console.Error.WriteLine(tmp930);
        var tmp931 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeStatement", TMessageType.Exception, seqid), cancellationToken);
        await tmp931.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeBatchStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp932 = new InternalStructs.executeBatchStatement_args();
      await tmp932.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp933 = new InternalStructs.executeBatchStatement_result();
      try
      {
        tmp933.Success = await _iAsync.executeBatchStatement(tmp932.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeBatchStatement", TMessageType.Reply, seqid), cancellationToken); 
        await tmp933.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp934)
      {
        var tmp935 = $"Error occurred in {GetType().FullName}: {tmp934.Message}";
        if(_logger != null)
          _logger.LogError(tmp934, tmp935);
        else
          Console.Error.WriteLine(tmp935);
        var tmp936 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeBatchStatement", TMessageType.Exception, seqid), cancellationToken);
        await tmp936.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeQueryStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp937 = new InternalStructs.executeQueryStatement_args();
      await tmp937.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp938 = new InternalStructs.executeQueryStatement_result();
      try
      {
        tmp938.Success = await _iAsync.executeQueryStatement(tmp937.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeQueryStatement", TMessageType.Reply, seqid), cancellationToken); 
        await tmp938.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp939)
      {
        var tmp940 = $"Error occurred in {GetType().FullName}: {tmp939.Message}";
        if(_logger != null)
          _logger.LogError(tmp939, tmp940);
        else
          Console.Error.WriteLine(tmp940);
        var tmp941 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeQueryStatement", TMessageType.Exception, seqid), cancellationToken);
        await tmp941.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeUpdateStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp942 = new InternalStructs.executeUpdateStatement_args();
      await tmp942.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp943 = new InternalStructs.executeUpdateStatement_result();
      try
      {
        tmp943.Success = await _iAsync.executeUpdateStatement(tmp942.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeUpdateStatement", TMessageType.Reply, seqid), cancellationToken); 
        await tmp943.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp944)
      {
        var tmp945 = $"Error occurred in {GetType().FullName}: {tmp944.Message}";
        if(_logger != null)
          _logger.LogError(tmp944, tmp945);
        else
          Console.Error.WriteLine(tmp945);
        var tmp946 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeUpdateStatement", TMessageType.Exception, seqid), cancellationToken);
        await tmp946.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task fetchResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp947 = new InternalStructs.fetchResults_args();
      await tmp947.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp948 = new InternalStructs.fetchResults_result();
      try
      {
        tmp948.Success = await _iAsync.fetchResults(tmp947.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("fetchResults", TMessageType.Reply, seqid), cancellationToken); 
        await tmp948.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp949)
      {
        var tmp950 = $"Error occurred in {GetType().FullName}: {tmp949.Message}";
        if(_logger != null)
          _logger.LogError(tmp949, tmp950);
        else
          Console.Error.WriteLine(tmp950);
        var tmp951 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("fetchResults", TMessageType.Exception, seqid), cancellationToken);
        await tmp951.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task fetchMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp952 = new InternalStructs.fetchMetadata_args();
      await tmp952.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp953 = new InternalStructs.fetchMetadata_result();
      try
      {
        tmp953.Success = await _iAsync.fetchMetadata(tmp952.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("fetchMetadata", TMessageType.Reply, seqid), cancellationToken); 
        await tmp953.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp954)
      {
        var tmp955 = $"Error occurred in {GetType().FullName}: {tmp954.Message}";
        if(_logger != null)
          _logger.LogError(tmp954, tmp955);
        else
          Console.Error.WriteLine(tmp955);
        var tmp956 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("fetchMetadata", TMessageType.Exception, seqid), cancellationToken);
        await tmp956.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task cancelOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp957 = new InternalStructs.cancelOperation_args();
      await tmp957.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp958 = new InternalStructs.cancelOperation_result();
      try
      {
        tmp958.Success = await _iAsync.cancelOperation(tmp957.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("cancelOperation", TMessageType.Reply, seqid), cancellationToken); 
        await tmp958.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp959)
      {
        var tmp960 = $"Error occurred in {GetType().FullName}: {tmp959.Message}";
        if(_logger != null)
          _logger.LogError(tmp959, tmp960);
        else
          Console.Error.WriteLine(tmp960);
        var tmp961 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("cancelOperation", TMessageType.Exception, seqid), cancellationToken);
        await tmp961.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task closeOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp962 = new InternalStructs.closeOperation_args();
      await tmp962.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp963 = new InternalStructs.closeOperation_result();
      try
      {
        tmp963.Success = await _iAsync.closeOperation(tmp962.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("closeOperation", TMessageType.Reply, seqid), cancellationToken); 
        await tmp963.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp964)
      {
        var tmp965 = $"Error occurred in {GetType().FullName}: {tmp964.Message}";
        if(_logger != null)
          _logger.LogError(tmp964, tmp965);
        else
          Console.Error.WriteLine(tmp965);
        var tmp966 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("closeOperation", TMessageType.Exception, seqid), cancellationToken);
        await tmp966.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task getTimeZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp967 = new InternalStructs.getTimeZone_args();
      await tmp967.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp968 = new InternalStructs.getTimeZone_result();
      try
      {
        tmp968.Success = await _iAsync.getTimeZone(tmp967.SessionId, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("getTimeZone", TMessageType.Reply, seqid), cancellationToken); 
        await tmp968.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp969)
      {
        var tmp970 = $"Error occurred in {GetType().FullName}: {tmp969.Message}";
        if(_logger != null)
          _logger.LogError(tmp969, tmp970);
        else
          Console.Error.WriteLine(tmp970);
        var tmp971 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getTimeZone", TMessageType.Exception, seqid), cancellationToken);
        await tmp971.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task setTimeZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp972 = new InternalStructs.setTimeZone_args();
      await tmp972.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp973 = new InternalStructs.setTimeZone_result();
      try
      {
        tmp973.Success = await _iAsync.setTimeZone(tmp972.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("setTimeZone", TMessageType.Reply, seqid), cancellationToken); 
        await tmp973.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp974)
      {
        var tmp975 = $"Error occurred in {GetType().FullName}: {tmp974.Message}";
        if(_logger != null)
          _logger.LogError(tmp974, tmp975);
        else
          Console.Error.WriteLine(tmp975);
        var tmp976 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("setTimeZone", TMessageType.Exception, seqid), cancellationToken);
        await tmp976.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task getProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp977 = new InternalStructs.getProperties_args();
      await tmp977.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp978 = new InternalStructs.getProperties_result();
      try
      {
        tmp978.Success = await _iAsync.getProperties(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("getProperties", TMessageType.Reply, seqid), cancellationToken); 
        await tmp978.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp979)
      {
        var tmp980 = $"Error occurred in {GetType().FullName}: {tmp979.Message}";
        if(_logger != null)
          _logger.LogError(tmp979, tmp980);
        else
          Console.Error.WriteLine(tmp980);
        var tmp981 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getProperties", TMessageType.Exception, seqid), cancellationToken);
        await tmp981.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task setStorageGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp982 = new InternalStructs.setStorageGroup_args();
      await tmp982.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp983 = new InternalStructs.setStorageGroup_result();
      try
      {
        tmp983.Success = await _iAsync.setStorageGroup(tmp982.SessionId, tmp982.StorageGroup, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("setStorageGroup", TMessageType.Reply, seqid), cancellationToken); 
        await tmp983.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp984)
      {
        var tmp985 = $"Error occurred in {GetType().FullName}: {tmp984.Message}";
        if(_logger != null)
          _logger.LogError(tmp984, tmp985);
        else
          Console.Error.WriteLine(tmp985);
        var tmp986 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("setStorageGroup", TMessageType.Exception, seqid), cancellationToken);
        await tmp986.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task createTimeseries_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp987 = new InternalStructs.createTimeseries_args();
      await tmp987.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp988 = new InternalStructs.createTimeseries_result();
      try
      {
        tmp988.Success = await _iAsync.createTimeseries(tmp987.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("createTimeseries", TMessageType.Reply, seqid), cancellationToken); 
        await tmp988.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp989)
      {
        var tmp990 = $"Error occurred in {GetType().FullName}: {tmp989.Message}";
        if(_logger != null)
          _logger.LogError(tmp989, tmp990);
        else
          Console.Error.WriteLine(tmp990);
        var tmp991 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("createTimeseries", TMessageType.Exception, seqid), cancellationToken);
        await tmp991.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task createAlignedTimeseries_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp992 = new InternalStructs.createAlignedTimeseries_args();
      await tmp992.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp993 = new InternalStructs.createAlignedTimeseries_result();
      try
      {
        tmp993.Success = await _iAsync.createAlignedTimeseries(tmp992.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("createAlignedTimeseries", TMessageType.Reply, seqid), cancellationToken); 
        await tmp993.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp994)
      {
        var tmp995 = $"Error occurred in {GetType().FullName}: {tmp994.Message}";
        if(_logger != null)
          _logger.LogError(tmp994, tmp995);
        else
          Console.Error.WriteLine(tmp995);
        var tmp996 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("createAlignedTimeseries", TMessageType.Exception, seqid), cancellationToken);
        await tmp996.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task createMultiTimeseries_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp997 = new InternalStructs.createMultiTimeseries_args();
      await tmp997.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp998 = new InternalStructs.createMultiTimeseries_result();
      try
      {
        tmp998.Success = await _iAsync.createMultiTimeseries(tmp997.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("createMultiTimeseries", TMessageType.Reply, seqid), cancellationToken); 
        await tmp998.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp999)
      {
        var tmp1000 = $"Error occurred in {GetType().FullName}: {tmp999.Message}";
        if(_logger != null)
          _logger.LogError(tmp999, tmp1000);
        else
          Console.Error.WriteLine(tmp1000);
        var tmp1001 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("createMultiTimeseries", TMessageType.Exception, seqid), cancellationToken);
        await tmp1001.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task deleteTimeseries_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1002 = new InternalStructs.deleteTimeseries_args();
      await tmp1002.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1003 = new InternalStructs.deleteTimeseries_result();
      try
      {
        tmp1003.Success = await _iAsync.deleteTimeseries(tmp1002.SessionId, tmp1002.Path, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("deleteTimeseries", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1003.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1004)
      {
        var tmp1005 = $"Error occurred in {GetType().FullName}: {tmp1004.Message}";
        if(_logger != null)
          _logger.LogError(tmp1004, tmp1005);
        else
          Console.Error.WriteLine(tmp1005);
        var tmp1006 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteTimeseries", TMessageType.Exception, seqid), cancellationToken);
        await tmp1006.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task deleteStorageGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1007 = new InternalStructs.deleteStorageGroups_args();
      await tmp1007.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1008 = new InternalStructs.deleteStorageGroups_result();
      try
      {
        tmp1008.Success = await _iAsync.deleteStorageGroups(tmp1007.SessionId, tmp1007.StorageGroup, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("deleteStorageGroups", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1008.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1009)
      {
        var tmp1010 = $"Error occurred in {GetType().FullName}: {tmp1009.Message}";
        if(_logger != null)
          _logger.LogError(tmp1009, tmp1010);
        else
          Console.Error.WriteLine(tmp1010);
        var tmp1011 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteStorageGroups", TMessageType.Exception, seqid), cancellationToken);
        await tmp1011.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertRecord_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1012 = new InternalStructs.insertRecord_args();
      await tmp1012.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1013 = new InternalStructs.insertRecord_result();
      try
      {
        tmp1013.Success = await _iAsync.insertRecord(tmp1012.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertRecord", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1013.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1014)
      {
        var tmp1015 = $"Error occurred in {GetType().FullName}: {tmp1014.Message}";
        if(_logger != null)
          _logger.LogError(tmp1014, tmp1015);
        else
          Console.Error.WriteLine(tmp1015);
        var tmp1016 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertRecord", TMessageType.Exception, seqid), cancellationToken);
        await tmp1016.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertStringRecord_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1017 = new InternalStructs.insertStringRecord_args();
      await tmp1017.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1018 = new InternalStructs.insertStringRecord_result();
      try
      {
        tmp1018.Success = await _iAsync.insertStringRecord(tmp1017.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertStringRecord", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1018.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1019)
      {
        var tmp1020 = $"Error occurred in {GetType().FullName}: {tmp1019.Message}";
        if(_logger != null)
          _logger.LogError(tmp1019, tmp1020);
        else
          Console.Error.WriteLine(tmp1020);
        var tmp1021 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertStringRecord", TMessageType.Exception, seqid), cancellationToken);
        await tmp1021.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertTablet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1022 = new InternalStructs.insertTablet_args();
      await tmp1022.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1023 = new InternalStructs.insertTablet_result();
      try
      {
        tmp1023.Success = await _iAsync.insertTablet(tmp1022.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertTablet", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1023.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1024)
      {
        var tmp1025 = $"Error occurred in {GetType().FullName}: {tmp1024.Message}";
        if(_logger != null)
          _logger.LogError(tmp1024, tmp1025);
        else
          Console.Error.WriteLine(tmp1025);
        var tmp1026 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertTablet", TMessageType.Exception, seqid), cancellationToken);
        await tmp1026.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertTablets_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1027 = new InternalStructs.insertTablets_args();
      await tmp1027.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1028 = new InternalStructs.insertTablets_result();
      try
      {
        tmp1028.Success = await _iAsync.insertTablets(tmp1027.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertTablets", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1028.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1029)
      {
        var tmp1030 = $"Error occurred in {GetType().FullName}: {tmp1029.Message}";
        if(_logger != null)
          _logger.LogError(tmp1029, tmp1030);
        else
          Console.Error.WriteLine(tmp1030);
        var tmp1031 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertTablets", TMessageType.Exception, seqid), cancellationToken);
        await tmp1031.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertRecords_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1032 = new InternalStructs.insertRecords_args();
      await tmp1032.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1033 = new InternalStructs.insertRecords_result();
      try
      {
        tmp1033.Success = await _iAsync.insertRecords(tmp1032.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertRecords", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1033.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1034)
      {
        var tmp1035 = $"Error occurred in {GetType().FullName}: {tmp1034.Message}";
        if(_logger != null)
          _logger.LogError(tmp1034, tmp1035);
        else
          Console.Error.WriteLine(tmp1035);
        var tmp1036 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertRecords", TMessageType.Exception, seqid), cancellationToken);
        await tmp1036.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertRecordsOfOneDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1037 = new InternalStructs.insertRecordsOfOneDevice_args();
      await tmp1037.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1038 = new InternalStructs.insertRecordsOfOneDevice_result();
      try
      {
        tmp1038.Success = await _iAsync.insertRecordsOfOneDevice(tmp1037.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertRecordsOfOneDevice", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1038.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1039)
      {
        var tmp1040 = $"Error occurred in {GetType().FullName}: {tmp1039.Message}";
        if(_logger != null)
          _logger.LogError(tmp1039, tmp1040);
        else
          Console.Error.WriteLine(tmp1040);
        var tmp1041 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertRecordsOfOneDevice", TMessageType.Exception, seqid), cancellationToken);
        await tmp1041.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertStringRecordsOfOneDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1042 = new InternalStructs.insertStringRecordsOfOneDevice_args();
      await tmp1042.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1043 = new InternalStructs.insertStringRecordsOfOneDevice_result();
      try
      {
        tmp1043.Success = await _iAsync.insertStringRecordsOfOneDevice(tmp1042.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertStringRecordsOfOneDevice", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1043.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1044)
      {
        var tmp1045 = $"Error occurred in {GetType().FullName}: {tmp1044.Message}";
        if(_logger != null)
          _logger.LogError(tmp1044, tmp1045);
        else
          Console.Error.WriteLine(tmp1045);
        var tmp1046 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertStringRecordsOfOneDevice", TMessageType.Exception, seqid), cancellationToken);
        await tmp1046.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task insertStringRecords_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1047 = new InternalStructs.insertStringRecords_args();
      await tmp1047.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1048 = new InternalStructs.insertStringRecords_result();
      try
      {
        tmp1048.Success = await _iAsync.insertStringRecords(tmp1047.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("insertStringRecords", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1048.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1049)
      {
        var tmp1050 = $"Error occurred in {GetType().FullName}: {tmp1049.Message}";
        if(_logger != null)
          _logger.LogError(tmp1049, tmp1050);
        else
          Console.Error.WriteLine(tmp1050);
        var tmp1051 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("insertStringRecords", TMessageType.Exception, seqid), cancellationToken);
        await tmp1051.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertTablet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1052 = new InternalStructs.testInsertTablet_args();
      await tmp1052.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1053 = new InternalStructs.testInsertTablet_result();
      try
      {
        tmp1053.Success = await _iAsync.testInsertTablet(tmp1052.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertTablet", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1053.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1054)
      {
        var tmp1055 = $"Error occurred in {GetType().FullName}: {tmp1054.Message}";
        if(_logger != null)
          _logger.LogError(tmp1054, tmp1055);
        else
          Console.Error.WriteLine(tmp1055);
        var tmp1056 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertTablet", TMessageType.Exception, seqid), cancellationToken);
        await tmp1056.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertTablets_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1057 = new InternalStructs.testInsertTablets_args();
      await tmp1057.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1058 = new InternalStructs.testInsertTablets_result();
      try
      {
        tmp1058.Success = await _iAsync.testInsertTablets(tmp1057.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertTablets", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1058.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1059)
      {
        var tmp1060 = $"Error occurred in {GetType().FullName}: {tmp1059.Message}";
        if(_logger != null)
          _logger.LogError(tmp1059, tmp1060);
        else
          Console.Error.WriteLine(tmp1060);
        var tmp1061 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertTablets", TMessageType.Exception, seqid), cancellationToken);
        await tmp1061.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertRecord_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1062 = new InternalStructs.testInsertRecord_args();
      await tmp1062.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1063 = new InternalStructs.testInsertRecord_result();
      try
      {
        tmp1063.Success = await _iAsync.testInsertRecord(tmp1062.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertRecord", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1063.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1064)
      {
        var tmp1065 = $"Error occurred in {GetType().FullName}: {tmp1064.Message}";
        if(_logger != null)
          _logger.LogError(tmp1064, tmp1065);
        else
          Console.Error.WriteLine(tmp1065);
        var tmp1066 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertRecord", TMessageType.Exception, seqid), cancellationToken);
        await tmp1066.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertStringRecord_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1067 = new InternalStructs.testInsertStringRecord_args();
      await tmp1067.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1068 = new InternalStructs.testInsertStringRecord_result();
      try
      {
        tmp1068.Success = await _iAsync.testInsertStringRecord(tmp1067.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertStringRecord", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1068.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1069)
      {
        var tmp1070 = $"Error occurred in {GetType().FullName}: {tmp1069.Message}";
        if(_logger != null)
          _logger.LogError(tmp1069, tmp1070);
        else
          Console.Error.WriteLine(tmp1070);
        var tmp1071 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertStringRecord", TMessageType.Exception, seqid), cancellationToken);
        await tmp1071.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertRecords_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1072 = new InternalStructs.testInsertRecords_args();
      await tmp1072.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1073 = new InternalStructs.testInsertRecords_result();
      try
      {
        tmp1073.Success = await _iAsync.testInsertRecords(tmp1072.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertRecords", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1073.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1074)
      {
        var tmp1075 = $"Error occurred in {GetType().FullName}: {tmp1074.Message}";
        if(_logger != null)
          _logger.LogError(tmp1074, tmp1075);
        else
          Console.Error.WriteLine(tmp1075);
        var tmp1076 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertRecords", TMessageType.Exception, seqid), cancellationToken);
        await tmp1076.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertRecordsOfOneDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1077 = new InternalStructs.testInsertRecordsOfOneDevice_args();
      await tmp1077.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1078 = new InternalStructs.testInsertRecordsOfOneDevice_result();
      try
      {
        tmp1078.Success = await _iAsync.testInsertRecordsOfOneDevice(tmp1077.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1078.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1079)
      {
        var tmp1080 = $"Error occurred in {GetType().FullName}: {tmp1079.Message}";
        if(_logger != null)
          _logger.LogError(tmp1079, tmp1080);
        else
          Console.Error.WriteLine(tmp1080);
        var tmp1081 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Exception, seqid), cancellationToken);
        await tmp1081.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testInsertStringRecords_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1082 = new InternalStructs.testInsertStringRecords_args();
      await tmp1082.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1083 = new InternalStructs.testInsertStringRecords_result();
      try
      {
        tmp1083.Success = await _iAsync.testInsertStringRecords(tmp1082.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertStringRecords", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1083.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1084)
      {
        var tmp1085 = $"Error occurred in {GetType().FullName}: {tmp1084.Message}";
        if(_logger != null)
          _logger.LogError(tmp1084, tmp1085);
        else
          Console.Error.WriteLine(tmp1085);
        var tmp1086 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testInsertStringRecords", TMessageType.Exception, seqid), cancellationToken);
        await tmp1086.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task deleteData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1087 = new InternalStructs.deleteData_args();
      await tmp1087.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1088 = new InternalStructs.deleteData_result();
      try
      {
        tmp1088.Success = await _iAsync.deleteData(tmp1087.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("deleteData", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1088.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1089)
      {
        var tmp1090 = $"Error occurred in {GetType().FullName}: {tmp1089.Message}";
        if(_logger != null)
          _logger.LogError(tmp1089, tmp1090);
        else
          Console.Error.WriteLine(tmp1090);
        var tmp1091 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteData", TMessageType.Exception, seqid), cancellationToken);
        await tmp1091.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeRawDataQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1092 = new InternalStructs.executeRawDataQuery_args();
      await tmp1092.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1093 = new InternalStructs.executeRawDataQuery_result();
      try
      {
        tmp1093.Success = await _iAsync.executeRawDataQuery(tmp1092.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeRawDataQuery", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1093.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1094)
      {
        var tmp1095 = $"Error occurred in {GetType().FullName}: {tmp1094.Message}";
        if(_logger != null)
          _logger.LogError(tmp1094, tmp1095);
        else
          Console.Error.WriteLine(tmp1095);
        var tmp1096 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeRawDataQuery", TMessageType.Exception, seqid), cancellationToken);
        await tmp1096.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeLastDataQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1097 = new InternalStructs.executeLastDataQuery_args();
      await tmp1097.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1098 = new InternalStructs.executeLastDataQuery_result();
      try
      {
        tmp1098.Success = await _iAsync.executeLastDataQuery(tmp1097.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeLastDataQuery", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1098.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1099)
      {
        var tmp1100 = $"Error occurred in {GetType().FullName}: {tmp1099.Message}";
        if(_logger != null)
          _logger.LogError(tmp1099, tmp1100);
        else
          Console.Error.WriteLine(tmp1100);
        var tmp1101 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeLastDataQuery", TMessageType.Exception, seqid), cancellationToken);
        await tmp1101.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task executeAggregationQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1102 = new InternalStructs.executeAggregationQuery_args();
      await tmp1102.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1103 = new InternalStructs.executeAggregationQuery_result();
      try
      {
        tmp1103.Success = await _iAsync.executeAggregationQuery(tmp1102.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("executeAggregationQuery", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1103.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1104)
      {
        var tmp1105 = $"Error occurred in {GetType().FullName}: {tmp1104.Message}";
        if(_logger != null)
          _logger.LogError(tmp1104, tmp1105);
        else
          Console.Error.WriteLine(tmp1105);
        var tmp1106 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("executeAggregationQuery", TMessageType.Exception, seqid), cancellationToken);
        await tmp1106.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task requestStatementId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1107 = new InternalStructs.requestStatementId_args();
      await tmp1107.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1108 = new InternalStructs.requestStatementId_result();
      try
      {
        tmp1108.Success = await _iAsync.requestStatementId(tmp1107.SessionId, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("requestStatementId", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1108.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1109)
      {
        var tmp1110 = $"Error occurred in {GetType().FullName}: {tmp1109.Message}";
        if(_logger != null)
          _logger.LogError(tmp1109, tmp1110);
        else
          Console.Error.WriteLine(tmp1110);
        var tmp1111 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("requestStatementId", TMessageType.Exception, seqid), cancellationToken);
        await tmp1111.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task createSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1112 = new InternalStructs.createSchemaTemplate_args();
      await tmp1112.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1113 = new InternalStructs.createSchemaTemplate_result();
      try
      {
        tmp1113.Success = await _iAsync.createSchemaTemplate(tmp1112.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("createSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1113.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1114)
      {
        var tmp1115 = $"Error occurred in {GetType().FullName}: {tmp1114.Message}";
        if(_logger != null)
          _logger.LogError(tmp1114, tmp1115);
        else
          Console.Error.WriteLine(tmp1115);
        var tmp1116 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("createSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1116.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task appendSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1117 = new InternalStructs.appendSchemaTemplate_args();
      await tmp1117.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1118 = new InternalStructs.appendSchemaTemplate_result();
      try
      {
        tmp1118.Success = await _iAsync.appendSchemaTemplate(tmp1117.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("appendSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1118.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1119)
      {
        var tmp1120 = $"Error occurred in {GetType().FullName}: {tmp1119.Message}";
        if(_logger != null)
          _logger.LogError(tmp1119, tmp1120);
        else
          Console.Error.WriteLine(tmp1120);
        var tmp1121 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("appendSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1121.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task pruneSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1122 = new InternalStructs.pruneSchemaTemplate_args();
      await tmp1122.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1123 = new InternalStructs.pruneSchemaTemplate_result();
      try
      {
        tmp1123.Success = await _iAsync.pruneSchemaTemplate(tmp1122.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("pruneSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1123.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1124)
      {
        var tmp1125 = $"Error occurred in {GetType().FullName}: {tmp1124.Message}";
        if(_logger != null)
          _logger.LogError(tmp1124, tmp1125);
        else
          Console.Error.WriteLine(tmp1125);
        var tmp1126 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("pruneSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1126.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task querySchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1127 = new InternalStructs.querySchemaTemplate_args();
      await tmp1127.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1128 = new InternalStructs.querySchemaTemplate_result();
      try
      {
        tmp1128.Success = await _iAsync.querySchemaTemplate(tmp1127.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("querySchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1128.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1129)
      {
        var tmp1130 = $"Error occurred in {GetType().FullName}: {tmp1129.Message}";
        if(_logger != null)
          _logger.LogError(tmp1129, tmp1130);
        else
          Console.Error.WriteLine(tmp1130);
        var tmp1131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("querySchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1131.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task showConfigurationTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1132 = new InternalStructs.showConfigurationTemplate_args();
      await tmp1132.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1133 = new InternalStructs.showConfigurationTemplate_result();
      try
      {
        tmp1133.Success = await _iAsync.showConfigurationTemplate(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("showConfigurationTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1133.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1134)
      {
        var tmp1135 = $"Error occurred in {GetType().FullName}: {tmp1134.Message}";
        if(_logger != null)
          _logger.LogError(tmp1134, tmp1135);
        else
          Console.Error.WriteLine(tmp1135);
        var tmp1136 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("showConfigurationTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1136.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task showConfiguration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1137 = new InternalStructs.showConfiguration_args();
      await tmp1137.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1138 = new InternalStructs.showConfiguration_result();
      try
      {
        tmp1138.Success = await _iAsync.showConfiguration(tmp1137.NodeId, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("showConfiguration", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1138.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1139)
      {
        var tmp1140 = $"Error occurred in {GetType().FullName}: {tmp1139.Message}";
        if(_logger != null)
          _logger.LogError(tmp1139, tmp1140);
        else
          Console.Error.WriteLine(tmp1140);
        var tmp1141 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("showConfiguration", TMessageType.Exception, seqid), cancellationToken);
        await tmp1141.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task setSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1142 = new InternalStructs.setSchemaTemplate_args();
      await tmp1142.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1143 = new InternalStructs.setSchemaTemplate_result();
      try
      {
        tmp1143.Success = await _iAsync.setSchemaTemplate(tmp1142.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("setSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1143.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1144)
      {
        var tmp1145 = $"Error occurred in {GetType().FullName}: {tmp1144.Message}";
        if(_logger != null)
          _logger.LogError(tmp1144, tmp1145);
        else
          Console.Error.WriteLine(tmp1145);
        var tmp1146 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("setSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1146.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task unsetSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1147 = new InternalStructs.unsetSchemaTemplate_args();
      await tmp1147.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1148 = new InternalStructs.unsetSchemaTemplate_result();
      try
      {
        tmp1148.Success = await _iAsync.unsetSchemaTemplate(tmp1147.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("unsetSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1148.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1149)
      {
        var tmp1150 = $"Error occurred in {GetType().FullName}: {tmp1149.Message}";
        if(_logger != null)
          _logger.LogError(tmp1149, tmp1150);
        else
          Console.Error.WriteLine(tmp1150);
        var tmp1151 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("unsetSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1151.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task dropSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1152 = new InternalStructs.dropSchemaTemplate_args();
      await tmp1152.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1153 = new InternalStructs.dropSchemaTemplate_result();
      try
      {
        tmp1153.Success = await _iAsync.dropSchemaTemplate(tmp1152.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("dropSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1153.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1154)
      {
        var tmp1155 = $"Error occurred in {GetType().FullName}: {tmp1154.Message}";
        if(_logger != null)
          _logger.LogError(tmp1154, tmp1155);
        else
          Console.Error.WriteLine(tmp1155);
        var tmp1156 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("dropSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1156.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task createTimeseriesUsingSchemaTemplate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1157 = new InternalStructs.createTimeseriesUsingSchemaTemplate_args();
      await tmp1157.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1158 = new InternalStructs.createTimeseriesUsingSchemaTemplate_result();
      try
      {
        tmp1158.Success = await _iAsync.createTimeseriesUsingSchemaTemplate(tmp1157.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("createTimeseriesUsingSchemaTemplate", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1158.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1159)
      {
        var tmp1160 = $"Error occurred in {GetType().FullName}: {tmp1159.Message}";
        if(_logger != null)
          _logger.LogError(tmp1159, tmp1160);
        else
          Console.Error.WriteLine(tmp1160);
        var tmp1161 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("createTimeseriesUsingSchemaTemplate", TMessageType.Exception, seqid), cancellationToken);
        await tmp1161.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task handshake_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1162 = new InternalStructs.handshake_args();
      await tmp1162.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1163 = new InternalStructs.handshake_result();
      try
      {
        tmp1163.Success = await _iAsync.handshake(tmp1162.Info, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("handshake", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1163.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1164)
      {
        var tmp1165 = $"Error occurred in {GetType().FullName}: {tmp1164.Message}";
        if(_logger != null)
          _logger.LogError(tmp1164, tmp1165);
        else
          Console.Error.WriteLine(tmp1165);
        var tmp1166 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("handshake", TMessageType.Exception, seqid), cancellationToken);
        await tmp1166.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sendPipeData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1167 = new InternalStructs.sendPipeData_args();
      await tmp1167.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1168 = new InternalStructs.sendPipeData_result();
      try
      {
        tmp1168.Success = await _iAsync.sendPipeData(tmp1167.Buff, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("sendPipeData", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1168.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1169)
      {
        var tmp1170 = $"Error occurred in {GetType().FullName}: {tmp1169.Message}";
        if(_logger != null)
          _logger.LogError(tmp1169, tmp1170);
        else
          Console.Error.WriteLine(tmp1170);
        var tmp1171 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendPipeData", TMessageType.Exception, seqid), cancellationToken);
        await tmp1171.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sendFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1172 = new InternalStructs.sendFile_args();
      await tmp1172.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1173 = new InternalStructs.sendFile_result();
      try
      {
        tmp1173.Success = await _iAsync.sendFile(tmp1172.MetaInfo, tmp1172.Buff, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("sendFile", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1173.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1174)
      {
        var tmp1175 = $"Error occurred in {GetType().FullName}: {tmp1174.Message}";
        if(_logger != null)
          _logger.LogError(tmp1174, tmp1175);
        else
          Console.Error.WriteLine(tmp1175);
        var tmp1176 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendFile", TMessageType.Exception, seqid), cancellationToken);
        await tmp1176.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task pipeTransfer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1177 = new InternalStructs.pipeTransfer_args();
      await tmp1177.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1178 = new InternalStructs.pipeTransfer_result();
      try
      {
        tmp1178.Success = await _iAsync.pipeTransfer(tmp1177.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("pipeTransfer", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1178.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1179)
      {
        var tmp1180 = $"Error occurred in {GetType().FullName}: {tmp1179.Message}";
        if(_logger != null)
          _logger.LogError(tmp1179, tmp1180);
        else
          Console.Error.WriteLine(tmp1180);
        var tmp1181 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("pipeTransfer", TMessageType.Exception, seqid), cancellationToken);
        await tmp1181.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task pipeSubscribe_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1182 = new InternalStructs.pipeSubscribe_args();
      await tmp1182.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1183 = new InternalStructs.pipeSubscribe_result();
      try
      {
        tmp1183.Success = await _iAsync.pipeSubscribe(tmp1182.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("pipeSubscribe", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1183.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1184)
      {
        var tmp1185 = $"Error occurred in {GetType().FullName}: {tmp1184.Message}";
        if(_logger != null)
          _logger.LogError(tmp1184, tmp1185);
        else
          Console.Error.WriteLine(tmp1185);
        var tmp1186 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("pipeSubscribe", TMessageType.Exception, seqid), cancellationToken);
        await tmp1186.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task getBackupConfiguration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1187 = new InternalStructs.getBackupConfiguration_args();
      await tmp1187.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1188 = new InternalStructs.getBackupConfiguration_result();
      try
      {
        tmp1188.Success = await _iAsync.getBackupConfiguration(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("getBackupConfiguration", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1188.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1189)
      {
        var tmp1190 = $"Error occurred in {GetType().FullName}: {tmp1189.Message}";
        if(_logger != null)
          _logger.LogError(tmp1189, tmp1190);
        else
          Console.Error.WriteLine(tmp1190);
        var tmp1191 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBackupConfiguration", TMessageType.Exception, seqid), cancellationToken);
        await tmp1191.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task fetchAllConnectionsInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1192 = new InternalStructs.fetchAllConnectionsInfo_args();
      await tmp1192.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1193 = new InternalStructs.fetchAllConnectionsInfo_result();
      try
      {
        tmp1193.Success = await _iAsync.fetchAllConnectionsInfo(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("fetchAllConnectionsInfo", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1193.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1194)
      {
        var tmp1195 = $"Error occurred in {GetType().FullName}: {tmp1194.Message}";
        if(_logger != null)
          _logger.LogError(tmp1194, tmp1195);
        else
          Console.Error.WriteLine(tmp1195);
        var tmp1196 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("fetchAllConnectionsInfo", TMessageType.Exception, seqid), cancellationToken);
        await tmp1196.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task testConnectionEmptyRPC_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp1197 = new InternalStructs.testConnectionEmptyRPC_args();
      await tmp1197.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp1198 = new InternalStructs.testConnectionEmptyRPC_result();
      try
      {
        tmp1198.Success = await _iAsync.testConnectionEmptyRPC(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("testConnectionEmptyRPC", TMessageType.Reply, seqid), cancellationToken); 
        await tmp1198.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp1199)
      {
        var tmp1200 = $"Error occurred in {GetType().FullName}: {tmp1199.Message}";
        if(_logger != null)
          _logger.LogError(tmp1199, tmp1200);
        else
          Console.Error.WriteLine(tmp1200);
        var tmp1201 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("testConnectionEmptyRPC", TMessageType.Exception, seqid), cancellationToken);
        await tmp1201.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class executeQueryStatementV2_args : TBase
    {
      private TSExecuteStatementReq _req;

      public TSExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeQueryStatementV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1202 = new TStruct("executeQueryStatementV2_args");
          await oprot.WriteStructBeginAsync(tmp1202, cancellationToken);
          var tmp1203 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1203.Name = "req";
            tmp1203.Type = TType.Struct;
            tmp1203.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1203, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeQueryStatementV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1204 = new StringBuilder("executeQueryStatementV2_args(");
        int tmp1205 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1205++) { tmp1204.Append(", "); }
          tmp1204.Append("Req: ");
          Req.ToString(tmp1204);
        }
        tmp1204.Append(')');
        return tmp1204.ToString();
      }
    }


    public partial class executeQueryStatementV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeQueryStatementV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1206 = new TStruct("executeQueryStatementV2_result");
          await oprot.WriteStructBeginAsync(tmp1206, cancellationToken);
          var tmp1207 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1207.Name = "Success";
              tmp1207.Type = TType.Struct;
              tmp1207.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1207, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeQueryStatementV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1208 = new StringBuilder("executeQueryStatementV2_result(");
        int tmp1209 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1209++) { tmp1208.Append(", "); }
          tmp1208.Append("Success: ");
          Success.ToString(tmp1208);
        }
        tmp1208.Append(')');
        return tmp1208.ToString();
      }
    }


    public partial class executeUpdateStatementV2_args : TBase
    {
      private TSExecuteStatementReq _req;

      public TSExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeUpdateStatementV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1210 = new TStruct("executeUpdateStatementV2_args");
          await oprot.WriteStructBeginAsync(tmp1210, cancellationToken);
          var tmp1211 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1211.Name = "req";
            tmp1211.Type = TType.Struct;
            tmp1211.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1211, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeUpdateStatementV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1212 = new StringBuilder("executeUpdateStatementV2_args(");
        int tmp1213 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1213++) { tmp1212.Append(", "); }
          tmp1212.Append("Req: ");
          Req.ToString(tmp1212);
        }
        tmp1212.Append(')');
        return tmp1212.ToString();
      }
    }


    public partial class executeUpdateStatementV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeUpdateStatementV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1214 = new TStruct("executeUpdateStatementV2_result");
          await oprot.WriteStructBeginAsync(tmp1214, cancellationToken);
          var tmp1215 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1215.Name = "Success";
              tmp1215.Type = TType.Struct;
              tmp1215.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1215, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeUpdateStatementV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1216 = new StringBuilder("executeUpdateStatementV2_result(");
        int tmp1217 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1217++) { tmp1216.Append(", "); }
          tmp1216.Append("Success: ");
          Success.ToString(tmp1216);
        }
        tmp1216.Append(')');
        return tmp1216.ToString();
      }
    }


    public partial class executeStatementV2_args : TBase
    {
      private TSExecuteStatementReq _req;

      public TSExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeStatementV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1218 = new TStruct("executeStatementV2_args");
          await oprot.WriteStructBeginAsync(tmp1218, cancellationToken);
          var tmp1219 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1219.Name = "req";
            tmp1219.Type = TType.Struct;
            tmp1219.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1219, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeStatementV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1220 = new StringBuilder("executeStatementV2_args(");
        int tmp1221 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1221++) { tmp1220.Append(", "); }
          tmp1220.Append("Req: ");
          Req.ToString(tmp1220);
        }
        tmp1220.Append(')');
        return tmp1220.ToString();
      }
    }


    public partial class executeStatementV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeStatementV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1222 = new TStruct("executeStatementV2_result");
          await oprot.WriteStructBeginAsync(tmp1222, cancellationToken);
          var tmp1223 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1223.Name = "Success";
              tmp1223.Type = TType.Struct;
              tmp1223.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1223, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeStatementV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1224 = new StringBuilder("executeStatementV2_result(");
        int tmp1225 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1225++) { tmp1224.Append(", "); }
          tmp1224.Append("Success: ");
          Success.ToString(tmp1224);
        }
        tmp1224.Append(')');
        return tmp1224.ToString();
      }
    }


    public partial class executeRawDataQueryV2_args : TBase
    {
      private TSRawDataQueryReq _req;

      public TSRawDataQueryReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeRawDataQueryV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSRawDataQueryReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1226 = new TStruct("executeRawDataQueryV2_args");
          await oprot.WriteStructBeginAsync(tmp1226, cancellationToken);
          var tmp1227 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1227.Name = "req";
            tmp1227.Type = TType.Struct;
            tmp1227.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeRawDataQueryV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1228 = new StringBuilder("executeRawDataQueryV2_args(");
        int tmp1229 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1229++) { tmp1228.Append(", "); }
          tmp1228.Append("Req: ");
          Req.ToString(tmp1228);
        }
        tmp1228.Append(')');
        return tmp1228.ToString();
      }
    }


    public partial class executeRawDataQueryV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeRawDataQueryV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1230 = new TStruct("executeRawDataQueryV2_result");
          await oprot.WriteStructBeginAsync(tmp1230, cancellationToken);
          var tmp1231 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1231.Name = "Success";
              tmp1231.Type = TType.Struct;
              tmp1231.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1231, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeRawDataQueryV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1232 = new StringBuilder("executeRawDataQueryV2_result(");
        int tmp1233 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1233++) { tmp1232.Append(", "); }
          tmp1232.Append("Success: ");
          Success.ToString(tmp1232);
        }
        tmp1232.Append(')');
        return tmp1232.ToString();
      }
    }


    public partial class executeLastDataQueryV2_args : TBase
    {
      private TSLastDataQueryReq _req;

      public TSLastDataQueryReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeLastDataQueryV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSLastDataQueryReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1234 = new TStruct("executeLastDataQueryV2_args");
          await oprot.WriteStructBeginAsync(tmp1234, cancellationToken);
          var tmp1235 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1235.Name = "req";
            tmp1235.Type = TType.Struct;
            tmp1235.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1235, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeLastDataQueryV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1236 = new StringBuilder("executeLastDataQueryV2_args(");
        int tmp1237 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1237++) { tmp1236.Append(", "); }
          tmp1236.Append("Req: ");
          Req.ToString(tmp1236);
        }
        tmp1236.Append(')');
        return tmp1236.ToString();
      }
    }


    public partial class executeLastDataQueryV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeLastDataQueryV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1238 = new TStruct("executeLastDataQueryV2_result");
          await oprot.WriteStructBeginAsync(tmp1238, cancellationToken);
          var tmp1239 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1239.Name = "Success";
              tmp1239.Type = TType.Struct;
              tmp1239.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1239, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeLastDataQueryV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1240 = new StringBuilder("executeLastDataQueryV2_result(");
        int tmp1241 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1241++) { tmp1240.Append(", "); }
          tmp1240.Append("Success: ");
          Success.ToString(tmp1240);
        }
        tmp1240.Append(')');
        return tmp1240.ToString();
      }
    }


    public partial class executeFastLastDataQueryForOnePrefixPath_args : TBase
    {
      private TSFastLastDataQueryForOnePrefixPathReq _req;

      public TSFastLastDataQueryForOnePrefixPathReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeFastLastDataQueryForOnePrefixPath_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSFastLastDataQueryForOnePrefixPathReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1242 = new TStruct("executeFastLastDataQueryForOnePrefixPath_args");
          await oprot.WriteStructBeginAsync(tmp1242, cancellationToken);
          var tmp1243 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1243.Name = "req";
            tmp1243.Type = TType.Struct;
            tmp1243.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1243, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeFastLastDataQueryForOnePrefixPath_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1244 = new StringBuilder("executeFastLastDataQueryForOnePrefixPath_args(");
        int tmp1245 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1245++) { tmp1244.Append(", "); }
          tmp1244.Append("Req: ");
          Req.ToString(tmp1244);
        }
        tmp1244.Append(')');
        return tmp1244.ToString();
      }
    }


    public partial class executeFastLastDataQueryForOnePrefixPath_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeFastLastDataQueryForOnePrefixPath_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1246 = new TStruct("executeFastLastDataQueryForOnePrefixPath_result");
          await oprot.WriteStructBeginAsync(tmp1246, cancellationToken);
          var tmp1247 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1247.Name = "Success";
              tmp1247.Type = TType.Struct;
              tmp1247.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeFastLastDataQueryForOnePrefixPath_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1248 = new StringBuilder("executeFastLastDataQueryForOnePrefixPath_result(");
        int tmp1249 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1249++) { tmp1248.Append(", "); }
          tmp1248.Append("Success: ");
          Success.ToString(tmp1248);
        }
        tmp1248.Append(')');
        return tmp1248.ToString();
      }
    }


    public partial class executeFastLastDataQueryForOneDeviceV2_args : TBase
    {
      private TSFastLastDataQueryForOneDeviceReq _req;

      public TSFastLastDataQueryForOneDeviceReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeFastLastDataQueryForOneDeviceV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSFastLastDataQueryForOneDeviceReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1250 = new TStruct("executeFastLastDataQueryForOneDeviceV2_args");
          await oprot.WriteStructBeginAsync(tmp1250, cancellationToken);
          var tmp1251 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1251.Name = "req";
            tmp1251.Type = TType.Struct;
            tmp1251.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1251, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeFastLastDataQueryForOneDeviceV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1252 = new StringBuilder("executeFastLastDataQueryForOneDeviceV2_args(");
        int tmp1253 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1253++) { tmp1252.Append(", "); }
          tmp1252.Append("Req: ");
          Req.ToString(tmp1252);
        }
        tmp1252.Append(')');
        return tmp1252.ToString();
      }
    }


    public partial class executeFastLastDataQueryForOneDeviceV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeFastLastDataQueryForOneDeviceV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1254 = new TStruct("executeFastLastDataQueryForOneDeviceV2_result");
          await oprot.WriteStructBeginAsync(tmp1254, cancellationToken);
          var tmp1255 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1255.Name = "Success";
              tmp1255.Type = TType.Struct;
              tmp1255.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1255, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeFastLastDataQueryForOneDeviceV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1256 = new StringBuilder("executeFastLastDataQueryForOneDeviceV2_result(");
        int tmp1257 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1257++) { tmp1256.Append(", "); }
          tmp1256.Append("Success: ");
          Success.ToString(tmp1256);
        }
        tmp1256.Append(')');
        return tmp1256.ToString();
      }
    }


    public partial class executeAggregationQueryV2_args : TBase
    {
      private TSAggregationQueryReq _req;

      public TSAggregationQueryReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeAggregationQueryV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSAggregationQueryReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1258 = new TStruct("executeAggregationQueryV2_args");
          await oprot.WriteStructBeginAsync(tmp1258, cancellationToken);
          var tmp1259 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1259.Name = "req";
            tmp1259.Type = TType.Struct;
            tmp1259.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeAggregationQueryV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1260 = new StringBuilder("executeAggregationQueryV2_args(");
        int tmp1261 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1261++) { tmp1260.Append(", "); }
          tmp1260.Append("Req: ");
          Req.ToString(tmp1260);
        }
        tmp1260.Append(')');
        return tmp1260.ToString();
      }
    }


    public partial class executeAggregationQueryV2_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeAggregationQueryV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1262 = new TStruct("executeAggregationQueryV2_result");
          await oprot.WriteStructBeginAsync(tmp1262, cancellationToken);
          var tmp1263 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1263.Name = "Success";
              tmp1263.Type = TType.Struct;
              tmp1263.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1263, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeAggregationQueryV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1264 = new StringBuilder("executeAggregationQueryV2_result(");
        int tmp1265 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1265++) { tmp1264.Append(", "); }
          tmp1264.Append("Success: ");
          Success.ToString(tmp1264);
        }
        tmp1264.Append(')');
        return tmp1264.ToString();
      }
    }


    public partial class executeGroupByQueryIntervalQuery_args : TBase
    {
      private TSGroupByQueryIntervalReq _req;

      public TSGroupByQueryIntervalReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeGroupByQueryIntervalQuery_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSGroupByQueryIntervalReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1266 = new TStruct("executeGroupByQueryIntervalQuery_args");
          await oprot.WriteStructBeginAsync(tmp1266, cancellationToken);
          var tmp1267 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1267.Name = "req";
            tmp1267.Type = TType.Struct;
            tmp1267.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeGroupByQueryIntervalQuery_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1268 = new StringBuilder("executeGroupByQueryIntervalQuery_args(");
        int tmp1269 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1269++) { tmp1268.Append(", "); }
          tmp1268.Append("Req: ");
          Req.ToString(tmp1268);
        }
        tmp1268.Append(')');
        return tmp1268.ToString();
      }
    }


    public partial class executeGroupByQueryIntervalQuery_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeGroupByQueryIntervalQuery_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1270 = new TStruct("executeGroupByQueryIntervalQuery_result");
          await oprot.WriteStructBeginAsync(tmp1270, cancellationToken);
          var tmp1271 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1271.Name = "Success";
              tmp1271.Type = TType.Struct;
              tmp1271.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1271, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeGroupByQueryIntervalQuery_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1272 = new StringBuilder("executeGroupByQueryIntervalQuery_result(");
        int tmp1273 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1273++) { tmp1272.Append(", "); }
          tmp1272.Append("Success: ");
          Success.ToString(tmp1272);
        }
        tmp1272.Append(')');
        return tmp1272.ToString();
      }
    }


    public partial class fetchResultsV2_args : TBase
    {
      private TSFetchResultsReq _req;

      public TSFetchResultsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public fetchResultsV2_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSFetchResultsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1274 = new TStruct("fetchResultsV2_args");
          await oprot.WriteStructBeginAsync(tmp1274, cancellationToken);
          var tmp1275 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1275.Name = "req";
            tmp1275.Type = TType.Struct;
            tmp1275.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1275, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchResultsV2_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1276 = new StringBuilder("fetchResultsV2_args(");
        int tmp1277 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1277++) { tmp1276.Append(", "); }
          tmp1276.Append("Req: ");
          Req.ToString(tmp1276);
        }
        tmp1276.Append(')');
        return tmp1276.ToString();
      }
    }


    public partial class fetchResultsV2_result : TBase
    {
      private TSFetchResultsResp _success;

      public TSFetchResultsResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public fetchResultsV2_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSFetchResultsResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1278 = new TStruct("fetchResultsV2_result");
          await oprot.WriteStructBeginAsync(tmp1278, cancellationToken);
          var tmp1279 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1279.Name = "Success";
              tmp1279.Type = TType.Struct;
              tmp1279.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1279, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchResultsV2_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1280 = new StringBuilder("fetchResultsV2_result(");
        int tmp1281 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1281++) { tmp1280.Append(", "); }
          tmp1280.Append("Success: ");
          Success.ToString(tmp1280);
        }
        tmp1280.Append(')');
        return tmp1280.ToString();
      }
    }


    public partial class openSession_args : TBase
    {
      private TSOpenSessionReq _req;

      public TSOpenSessionReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public openSession_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSOpenSessionReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1282 = new TStruct("openSession_args");
          await oprot.WriteStructBeginAsync(tmp1282, cancellationToken);
          var tmp1283 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1283.Name = "req";
            tmp1283.Type = TType.Struct;
            tmp1283.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1283, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is openSession_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1284 = new StringBuilder("openSession_args(");
        int tmp1285 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1285++) { tmp1284.Append(", "); }
          tmp1284.Append("Req: ");
          Req.ToString(tmp1284);
        }
        tmp1284.Append(')');
        return tmp1284.ToString();
      }
    }


    public partial class openSession_result : TBase
    {
      private TSOpenSessionResp _success;

      public TSOpenSessionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public openSession_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSOpenSessionResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1286 = new TStruct("openSession_result");
          await oprot.WriteStructBeginAsync(tmp1286, cancellationToken);
          var tmp1287 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1287.Name = "Success";
              tmp1287.Type = TType.Struct;
              tmp1287.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1287, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is openSession_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1288 = new StringBuilder("openSession_result(");
        int tmp1289 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1289++) { tmp1288.Append(", "); }
          tmp1288.Append("Success: ");
          Success.ToString(tmp1288);
        }
        tmp1288.Append(')');
        return tmp1288.ToString();
      }
    }


    public partial class closeSession_args : TBase
    {
      private TSCloseSessionReq _req;

      public TSCloseSessionReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public closeSession_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCloseSessionReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1290 = new TStruct("closeSession_args");
          await oprot.WriteStructBeginAsync(tmp1290, cancellationToken);
          var tmp1291 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1291.Name = "req";
            tmp1291.Type = TType.Struct;
            tmp1291.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1291, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is closeSession_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1292 = new StringBuilder("closeSession_args(");
        int tmp1293 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1293++) { tmp1292.Append(", "); }
          tmp1292.Append("Req: ");
          Req.ToString(tmp1292);
        }
        tmp1292.Append(')');
        return tmp1292.ToString();
      }
    }


    public partial class closeSession_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public closeSession_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1294 = new TStruct("closeSession_result");
          await oprot.WriteStructBeginAsync(tmp1294, cancellationToken);
          var tmp1295 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1295.Name = "Success";
              tmp1295.Type = TType.Struct;
              tmp1295.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1295, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is closeSession_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1296 = new StringBuilder("closeSession_result(");
        int tmp1297 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1297++) { tmp1296.Append(", "); }
          tmp1296.Append("Success: ");
          Success.ToString(tmp1296);
        }
        tmp1296.Append(')');
        return tmp1296.ToString();
      }
    }


    public partial class executeStatement_args : TBase
    {
      private TSExecuteStatementReq _req;

      public TSExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeStatement_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1298 = new TStruct("executeStatement_args");
          await oprot.WriteStructBeginAsync(tmp1298, cancellationToken);
          var tmp1299 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1299.Name = "req";
            tmp1299.Type = TType.Struct;
            tmp1299.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1299, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeStatement_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1300 = new StringBuilder("executeStatement_args(");
        int tmp1301 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1301++) { tmp1300.Append(", "); }
          tmp1300.Append("Req: ");
          Req.ToString(tmp1300);
        }
        tmp1300.Append(')');
        return tmp1300.ToString();
      }
    }


    public partial class executeStatement_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeStatement_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1302 = new TStruct("executeStatement_result");
          await oprot.WriteStructBeginAsync(tmp1302, cancellationToken);
          var tmp1303 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1303.Name = "Success";
              tmp1303.Type = TType.Struct;
              tmp1303.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1303, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeStatement_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1304 = new StringBuilder("executeStatement_result(");
        int tmp1305 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1305++) { tmp1304.Append(", "); }
          tmp1304.Append("Success: ");
          Success.ToString(tmp1304);
        }
        tmp1304.Append(')');
        return tmp1304.ToString();
      }
    }


    public partial class executeBatchStatement_args : TBase
    {
      private TSExecuteBatchStatementReq _req;

      public TSExecuteBatchStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeBatchStatement_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteBatchStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1306 = new TStruct("executeBatchStatement_args");
          await oprot.WriteStructBeginAsync(tmp1306, cancellationToken);
          var tmp1307 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1307.Name = "req";
            tmp1307.Type = TType.Struct;
            tmp1307.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1307, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeBatchStatement_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1308 = new StringBuilder("executeBatchStatement_args(");
        int tmp1309 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1309++) { tmp1308.Append(", "); }
          tmp1308.Append("Req: ");
          Req.ToString(tmp1308);
        }
        tmp1308.Append(')');
        return tmp1308.ToString();
      }
    }


    public partial class executeBatchStatement_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeBatchStatement_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1310 = new TStruct("executeBatchStatement_result");
          await oprot.WriteStructBeginAsync(tmp1310, cancellationToken);
          var tmp1311 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1311.Name = "Success";
              tmp1311.Type = TType.Struct;
              tmp1311.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1311, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeBatchStatement_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1312 = new StringBuilder("executeBatchStatement_result(");
        int tmp1313 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1313++) { tmp1312.Append(", "); }
          tmp1312.Append("Success: ");
          Success.ToString(tmp1312);
        }
        tmp1312.Append(')');
        return tmp1312.ToString();
      }
    }


    public partial class executeQueryStatement_args : TBase
    {
      private TSExecuteStatementReq _req;

      public TSExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeQueryStatement_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1314 = new TStruct("executeQueryStatement_args");
          await oprot.WriteStructBeginAsync(tmp1314, cancellationToken);
          var tmp1315 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1315.Name = "req";
            tmp1315.Type = TType.Struct;
            tmp1315.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1315, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeQueryStatement_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1316 = new StringBuilder("executeQueryStatement_args(");
        int tmp1317 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1317++) { tmp1316.Append(", "); }
          tmp1316.Append("Req: ");
          Req.ToString(tmp1316);
        }
        tmp1316.Append(')');
        return tmp1316.ToString();
      }
    }


    public partial class executeQueryStatement_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeQueryStatement_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1318 = new TStruct("executeQueryStatement_result");
          await oprot.WriteStructBeginAsync(tmp1318, cancellationToken);
          var tmp1319 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1319.Name = "Success";
              tmp1319.Type = TType.Struct;
              tmp1319.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1319, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeQueryStatement_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1320 = new StringBuilder("executeQueryStatement_result(");
        int tmp1321 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1321++) { tmp1320.Append(", "); }
          tmp1320.Append("Success: ");
          Success.ToString(tmp1320);
        }
        tmp1320.Append(')');
        return tmp1320.ToString();
      }
    }


    public partial class executeUpdateStatement_args : TBase
    {
      private TSExecuteStatementReq _req;

      public TSExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeUpdateStatement_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1322 = new TStruct("executeUpdateStatement_args");
          await oprot.WriteStructBeginAsync(tmp1322, cancellationToken);
          var tmp1323 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1323.Name = "req";
            tmp1323.Type = TType.Struct;
            tmp1323.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1323, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeUpdateStatement_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1324 = new StringBuilder("executeUpdateStatement_args(");
        int tmp1325 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1325++) { tmp1324.Append(", "); }
          tmp1324.Append("Req: ");
          Req.ToString(tmp1324);
        }
        tmp1324.Append(')');
        return tmp1324.ToString();
      }
    }


    public partial class executeUpdateStatement_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeUpdateStatement_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1326 = new TStruct("executeUpdateStatement_result");
          await oprot.WriteStructBeginAsync(tmp1326, cancellationToken);
          var tmp1327 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1327.Name = "Success";
              tmp1327.Type = TType.Struct;
              tmp1327.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1327, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeUpdateStatement_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1328 = new StringBuilder("executeUpdateStatement_result(");
        int tmp1329 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1329++) { tmp1328.Append(", "); }
          tmp1328.Append("Success: ");
          Success.ToString(tmp1328);
        }
        tmp1328.Append(')');
        return tmp1328.ToString();
      }
    }


    public partial class fetchResults_args : TBase
    {
      private TSFetchResultsReq _req;

      public TSFetchResultsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public fetchResults_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSFetchResultsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1330 = new TStruct("fetchResults_args");
          await oprot.WriteStructBeginAsync(tmp1330, cancellationToken);
          var tmp1331 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1331.Name = "req";
            tmp1331.Type = TType.Struct;
            tmp1331.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1331, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchResults_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1332 = new StringBuilder("fetchResults_args(");
        int tmp1333 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1333++) { tmp1332.Append(", "); }
          tmp1332.Append("Req: ");
          Req.ToString(tmp1332);
        }
        tmp1332.Append(')');
        return tmp1332.ToString();
      }
    }


    public partial class fetchResults_result : TBase
    {
      private TSFetchResultsResp _success;

      public TSFetchResultsResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public fetchResults_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSFetchResultsResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1334 = new TStruct("fetchResults_result");
          await oprot.WriteStructBeginAsync(tmp1334, cancellationToken);
          var tmp1335 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1335.Name = "Success";
              tmp1335.Type = TType.Struct;
              tmp1335.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1335, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchResults_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1336 = new StringBuilder("fetchResults_result(");
        int tmp1337 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1337++) { tmp1336.Append(", "); }
          tmp1336.Append("Success: ");
          Success.ToString(tmp1336);
        }
        tmp1336.Append(')');
        return tmp1336.ToString();
      }
    }


    public partial class fetchMetadata_args : TBase
    {
      private TSFetchMetadataReq _req;

      public TSFetchMetadataReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public fetchMetadata_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSFetchMetadataReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1338 = new TStruct("fetchMetadata_args");
          await oprot.WriteStructBeginAsync(tmp1338, cancellationToken);
          var tmp1339 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1339.Name = "req";
            tmp1339.Type = TType.Struct;
            tmp1339.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1339, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchMetadata_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1340 = new StringBuilder("fetchMetadata_args(");
        int tmp1341 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1341++) { tmp1340.Append(", "); }
          tmp1340.Append("Req: ");
          Req.ToString(tmp1340);
        }
        tmp1340.Append(')');
        return tmp1340.ToString();
      }
    }


    public partial class fetchMetadata_result : TBase
    {
      private TSFetchMetadataResp _success;

      public TSFetchMetadataResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public fetchMetadata_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSFetchMetadataResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1342 = new TStruct("fetchMetadata_result");
          await oprot.WriteStructBeginAsync(tmp1342, cancellationToken);
          var tmp1343 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1343.Name = "Success";
              tmp1343.Type = TType.Struct;
              tmp1343.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1343, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchMetadata_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1344 = new StringBuilder("fetchMetadata_result(");
        int tmp1345 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1345++) { tmp1344.Append(", "); }
          tmp1344.Append("Success: ");
          Success.ToString(tmp1344);
        }
        tmp1344.Append(')');
        return tmp1344.ToString();
      }
    }


    public partial class cancelOperation_args : TBase
    {
      private TSCancelOperationReq _req;

      public TSCancelOperationReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public cancelOperation_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCancelOperationReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1346 = new TStruct("cancelOperation_args");
          await oprot.WriteStructBeginAsync(tmp1346, cancellationToken);
          var tmp1347 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1347.Name = "req";
            tmp1347.Type = TType.Struct;
            tmp1347.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1347, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is cancelOperation_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1348 = new StringBuilder("cancelOperation_args(");
        int tmp1349 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1349++) { tmp1348.Append(", "); }
          tmp1348.Append("Req: ");
          Req.ToString(tmp1348);
        }
        tmp1348.Append(')');
        return tmp1348.ToString();
      }
    }


    public partial class cancelOperation_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public cancelOperation_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1350 = new TStruct("cancelOperation_result");
          await oprot.WriteStructBeginAsync(tmp1350, cancellationToken);
          var tmp1351 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1351.Name = "Success";
              tmp1351.Type = TType.Struct;
              tmp1351.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1351, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is cancelOperation_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1352 = new StringBuilder("cancelOperation_result(");
        int tmp1353 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1353++) { tmp1352.Append(", "); }
          tmp1352.Append("Success: ");
          Success.ToString(tmp1352);
        }
        tmp1352.Append(')');
        return tmp1352.ToString();
      }
    }


    public partial class closeOperation_args : TBase
    {
      private TSCloseOperationReq _req;

      public TSCloseOperationReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public closeOperation_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCloseOperationReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1354 = new TStruct("closeOperation_args");
          await oprot.WriteStructBeginAsync(tmp1354, cancellationToken);
          var tmp1355 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1355.Name = "req";
            tmp1355.Type = TType.Struct;
            tmp1355.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1355, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is closeOperation_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1356 = new StringBuilder("closeOperation_args(");
        int tmp1357 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1357++) { tmp1356.Append(", "); }
          tmp1356.Append("Req: ");
          Req.ToString(tmp1356);
        }
        tmp1356.Append(')');
        return tmp1356.ToString();
      }
    }


    public partial class closeOperation_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public closeOperation_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1358 = new TStruct("closeOperation_result");
          await oprot.WriteStructBeginAsync(tmp1358, cancellationToken);
          var tmp1359 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1359.Name = "Success";
              tmp1359.Type = TType.Struct;
              tmp1359.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1359, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is closeOperation_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1360 = new StringBuilder("closeOperation_result(");
        int tmp1361 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1361++) { tmp1360.Append(", "); }
          tmp1360.Append("Success: ");
          Success.ToString(tmp1360);
        }
        tmp1360.Append(')');
        return tmp1360.ToString();
      }
    }


    public partial class getTimeZone_args : TBase
    {
      private long _sessionId;

      public long SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sessionId;
      }

      public getTimeZone_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  SessionId = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1362 = new TStruct("getTimeZone_args");
          await oprot.WriteStructBeginAsync(tmp1362, cancellationToken);
          var tmp1363 = new TField();
          if(__isset.sessionId)
          {
            tmp1363.Name = "sessionId";
            tmp1363.Type = TType.I64;
            tmp1363.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1363, cancellationToken);
            await oprot.WriteI64Async(SessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getTimeZone_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.sessionId)
          {
            hashcode = (hashcode * 397) + SessionId.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1364 = new StringBuilder("getTimeZone_args(");
        int tmp1365 = 0;
        if(__isset.sessionId)
        {
          if(0 < tmp1365++) { tmp1364.Append(", "); }
          tmp1364.Append("SessionId: ");
          SessionId.ToString(tmp1364);
        }
        tmp1364.Append(')');
        return tmp1364.ToString();
      }
    }


    public partial class getTimeZone_result : TBase
    {
      private TSGetTimeZoneResp _success;

      public TSGetTimeZoneResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getTimeZone_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSGetTimeZoneResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1366 = new TStruct("getTimeZone_result");
          await oprot.WriteStructBeginAsync(tmp1366, cancellationToken);
          var tmp1367 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1367.Name = "Success";
              tmp1367.Type = TType.Struct;
              tmp1367.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1367, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getTimeZone_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1368 = new StringBuilder("getTimeZone_result(");
        int tmp1369 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1369++) { tmp1368.Append(", "); }
          tmp1368.Append("Success: ");
          Success.ToString(tmp1368);
        }
        tmp1368.Append(')');
        return tmp1368.ToString();
      }
    }


    public partial class setTimeZone_args : TBase
    {
      private TSSetTimeZoneReq _req;

      public TSSetTimeZoneReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public setTimeZone_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSSetTimeZoneReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1370 = new TStruct("setTimeZone_args");
          await oprot.WriteStructBeginAsync(tmp1370, cancellationToken);
          var tmp1371 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1371.Name = "req";
            tmp1371.Type = TType.Struct;
            tmp1371.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1371, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is setTimeZone_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1372 = new StringBuilder("setTimeZone_args(");
        int tmp1373 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1373++) { tmp1372.Append(", "); }
          tmp1372.Append("Req: ");
          Req.ToString(tmp1372);
        }
        tmp1372.Append(')');
        return tmp1372.ToString();
      }
    }


    public partial class setTimeZone_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public setTimeZone_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1374 = new TStruct("setTimeZone_result");
          await oprot.WriteStructBeginAsync(tmp1374, cancellationToken);
          var tmp1375 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1375.Name = "Success";
              tmp1375.Type = TType.Struct;
              tmp1375.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1375, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is setTimeZone_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1376 = new StringBuilder("setTimeZone_result(");
        int tmp1377 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1377++) { tmp1376.Append(", "); }
          tmp1376.Append("Success: ");
          Success.ToString(tmp1376);
        }
        tmp1376.Append(')');
        return tmp1376.ToString();
      }
    }


    public partial class getProperties_args : TBase
    {

      public getProperties_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1378 = new TStruct("getProperties_args");
          await oprot.WriteStructBeginAsync(tmp1378, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getProperties_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1379 = new StringBuilder("getProperties_args(");
        tmp1379.Append(')');
        return tmp1379.ToString();
      }
    }


    public partial class getProperties_result : TBase
    {
      private ServerProperties _success;

      public ServerProperties Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getProperties_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new ServerProperties();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1381 = new TStruct("getProperties_result");
          await oprot.WriteStructBeginAsync(tmp1381, cancellationToken);
          var tmp1382 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1382.Name = "Success";
              tmp1382.Type = TType.Struct;
              tmp1382.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1382, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getProperties_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1383 = new StringBuilder("getProperties_result(");
        int tmp1384 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1384++) { tmp1383.Append(", "); }
          tmp1383.Append("Success: ");
          Success.ToString(tmp1383);
        }
        tmp1383.Append(')');
        return tmp1383.ToString();
      }
    }


    public partial class setStorageGroup_args : TBase
    {
      private long _sessionId;
      private string _storageGroup;

      public long SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string StorageGroup
      {
        get
        {
          return _storageGroup;
        }
        set
        {
          __isset.storageGroup = true;
          this._storageGroup = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sessionId;
        public bool storageGroup;
      }

      public setStorageGroup_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  SessionId = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  StorageGroup = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1385 = new TStruct("setStorageGroup_args");
          await oprot.WriteStructBeginAsync(tmp1385, cancellationToken);
          var tmp1386 = new TField();
          if(__isset.sessionId)
          {
            tmp1386.Name = "sessionId";
            tmp1386.Type = TType.I64;
            tmp1386.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1386, cancellationToken);
            await oprot.WriteI64Async(SessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((StorageGroup != null) && __isset.storageGroup)
          {
            tmp1386.Name = "storageGroup";
            tmp1386.Type = TType.String;
            tmp1386.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1386, cancellationToken);
            await oprot.WriteStringAsync(StorageGroup, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is setStorageGroup_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
          && ((__isset.storageGroup == other.__isset.storageGroup) && ((!__isset.storageGroup) || (System.Object.Equals(StorageGroup, other.StorageGroup))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.sessionId)
          {
            hashcode = (hashcode * 397) + SessionId.GetHashCode();
          }
          if((StorageGroup != null) && __isset.storageGroup)
          {
            hashcode = (hashcode * 397) + StorageGroup.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1387 = new StringBuilder("setStorageGroup_args(");
        int tmp1388 = 0;
        if(__isset.sessionId)
        {
          if(0 < tmp1388++) { tmp1387.Append(", "); }
          tmp1387.Append("SessionId: ");
          SessionId.ToString(tmp1387);
        }
        if((StorageGroup != null) && __isset.storageGroup)
        {
          if(0 < tmp1388++) { tmp1387.Append(", "); }
          tmp1387.Append("StorageGroup: ");
          StorageGroup.ToString(tmp1387);
        }
        tmp1387.Append(')');
        return tmp1387.ToString();
      }
    }


    public partial class setStorageGroup_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public setStorageGroup_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1389 = new TStruct("setStorageGroup_result");
          await oprot.WriteStructBeginAsync(tmp1389, cancellationToken);
          var tmp1390 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1390.Name = "Success";
              tmp1390.Type = TType.Struct;
              tmp1390.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is setStorageGroup_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1391 = new StringBuilder("setStorageGroup_result(");
        int tmp1392 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1392++) { tmp1391.Append(", "); }
          tmp1391.Append("Success: ");
          Success.ToString(tmp1391);
        }
        tmp1391.Append(')');
        return tmp1391.ToString();
      }
    }


    public partial class createTimeseries_args : TBase
    {
      private TSCreateTimeseriesReq _req;

      public TSCreateTimeseriesReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public createTimeseries_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCreateTimeseriesReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1393 = new TStruct("createTimeseries_args");
          await oprot.WriteStructBeginAsync(tmp1393, cancellationToken);
          var tmp1394 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1394.Name = "req";
            tmp1394.Type = TType.Struct;
            tmp1394.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1394, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createTimeseries_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1395 = new StringBuilder("createTimeseries_args(");
        int tmp1396 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1396++) { tmp1395.Append(", "); }
          tmp1395.Append("Req: ");
          Req.ToString(tmp1395);
        }
        tmp1395.Append(')');
        return tmp1395.ToString();
      }
    }


    public partial class createTimeseries_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public createTimeseries_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1397 = new TStruct("createTimeseries_result");
          await oprot.WriteStructBeginAsync(tmp1397, cancellationToken);
          var tmp1398 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1398.Name = "Success";
              tmp1398.Type = TType.Struct;
              tmp1398.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1398, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createTimeseries_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1399 = new StringBuilder("createTimeseries_result(");
        int tmp1400 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1400++) { tmp1399.Append(", "); }
          tmp1399.Append("Success: ");
          Success.ToString(tmp1399);
        }
        tmp1399.Append(')');
        return tmp1399.ToString();
      }
    }


    public partial class createAlignedTimeseries_args : TBase
    {
      private TSCreateAlignedTimeseriesReq _req;

      public TSCreateAlignedTimeseriesReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public createAlignedTimeseries_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCreateAlignedTimeseriesReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1401 = new TStruct("createAlignedTimeseries_args");
          await oprot.WriteStructBeginAsync(tmp1401, cancellationToken);
          var tmp1402 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1402.Name = "req";
            tmp1402.Type = TType.Struct;
            tmp1402.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1402, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createAlignedTimeseries_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1403 = new StringBuilder("createAlignedTimeseries_args(");
        int tmp1404 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1404++) { tmp1403.Append(", "); }
          tmp1403.Append("Req: ");
          Req.ToString(tmp1403);
        }
        tmp1403.Append(')');
        return tmp1403.ToString();
      }
    }


    public partial class createAlignedTimeseries_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public createAlignedTimeseries_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1405 = new TStruct("createAlignedTimeseries_result");
          await oprot.WriteStructBeginAsync(tmp1405, cancellationToken);
          var tmp1406 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1406.Name = "Success";
              tmp1406.Type = TType.Struct;
              tmp1406.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1406, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createAlignedTimeseries_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1407 = new StringBuilder("createAlignedTimeseries_result(");
        int tmp1408 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1408++) { tmp1407.Append(", "); }
          tmp1407.Append("Success: ");
          Success.ToString(tmp1407);
        }
        tmp1407.Append(')');
        return tmp1407.ToString();
      }
    }


    public partial class createMultiTimeseries_args : TBase
    {
      private TSCreateMultiTimeseriesReq _req;

      public TSCreateMultiTimeseriesReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public createMultiTimeseries_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCreateMultiTimeseriesReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1409 = new TStruct("createMultiTimeseries_args");
          await oprot.WriteStructBeginAsync(tmp1409, cancellationToken);
          var tmp1410 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1410.Name = "req";
            tmp1410.Type = TType.Struct;
            tmp1410.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createMultiTimeseries_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1411 = new StringBuilder("createMultiTimeseries_args(");
        int tmp1412 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1412++) { tmp1411.Append(", "); }
          tmp1411.Append("Req: ");
          Req.ToString(tmp1411);
        }
        tmp1411.Append(')');
        return tmp1411.ToString();
      }
    }


    public partial class createMultiTimeseries_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public createMultiTimeseries_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1413 = new TStruct("createMultiTimeseries_result");
          await oprot.WriteStructBeginAsync(tmp1413, cancellationToken);
          var tmp1414 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1414.Name = "Success";
              tmp1414.Type = TType.Struct;
              tmp1414.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createMultiTimeseries_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1415 = new StringBuilder("createMultiTimeseries_result(");
        int tmp1416 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1416++) { tmp1415.Append(", "); }
          tmp1415.Append("Success: ");
          Success.ToString(tmp1415);
        }
        tmp1415.Append(')');
        return tmp1415.ToString();
      }
    }


    public partial class deleteTimeseries_args : TBase
    {
      private long _sessionId;
      private List<string> _path;

      public long SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public List<string> Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sessionId;
        public bool path;
      }

      public deleteTimeseries_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  SessionId = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.List)
                {
                  {
                    TList _list1417 = await iprot.ReadListBeginAsync(cancellationToken);
                    Path = new List<string>(_list1417.Count);
                    for(int _i1418 = 0; _i1418 < _list1417.Count; ++_i1418)
                    {
                      string _elem1419;
                      _elem1419 = await iprot.ReadStringAsync(cancellationToken);
                      Path.Add(_elem1419);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1420 = new TStruct("deleteTimeseries_args");
          await oprot.WriteStructBeginAsync(tmp1420, cancellationToken);
          var tmp1421 = new TField();
          if(__isset.sessionId)
          {
            tmp1421.Name = "sessionId";
            tmp1421.Type = TType.I64;
            tmp1421.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1421, cancellationToken);
            await oprot.WriteI64Async(SessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Path != null) && __isset.path)
          {
            tmp1421.Name = "path";
            tmp1421.Type = TType.List;
            tmp1421.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1421, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Path.Count), cancellationToken);
              foreach (string _iter1422 in Path)
              {
                await oprot.WriteStringAsync(_iter1422, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is deleteTimeseries_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
          && ((__isset.path == other.__isset.path) && ((!__isset.path) || (TCollections.Equals(Path, other.Path))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.sessionId)
          {
            hashcode = (hashcode * 397) + SessionId.GetHashCode();
          }
          if((Path != null) && __isset.path)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Path);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1423 = new StringBuilder("deleteTimeseries_args(");
        int tmp1424 = 0;
        if(__isset.sessionId)
        {
          if(0 < tmp1424++) { tmp1423.Append(", "); }
          tmp1423.Append("SessionId: ");
          SessionId.ToString(tmp1423);
        }
        if((Path != null) && __isset.path)
        {
          if(0 < tmp1424++) { tmp1423.Append(", "); }
          tmp1423.Append("Path: ");
          Path.ToString(tmp1423);
        }
        tmp1423.Append(')');
        return tmp1423.ToString();
      }
    }


    public partial class deleteTimeseries_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public deleteTimeseries_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1425 = new TStruct("deleteTimeseries_result");
          await oprot.WriteStructBeginAsync(tmp1425, cancellationToken);
          var tmp1426 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1426.Name = "Success";
              tmp1426.Type = TType.Struct;
              tmp1426.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1426, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is deleteTimeseries_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1427 = new StringBuilder("deleteTimeseries_result(");
        int tmp1428 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1428++) { tmp1427.Append(", "); }
          tmp1427.Append("Success: ");
          Success.ToString(tmp1427);
        }
        tmp1427.Append(')');
        return tmp1427.ToString();
      }
    }


    public partial class deleteStorageGroups_args : TBase
    {
      private long _sessionId;
      private List<string> _storageGroup;

      public long SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public List<string> StorageGroup
      {
        get
        {
          return _storageGroup;
        }
        set
        {
          __isset.storageGroup = true;
          this._storageGroup = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sessionId;
        public bool storageGroup;
      }

      public deleteStorageGroups_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  SessionId = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.List)
                {
                  {
                    TList _list1429 = await iprot.ReadListBeginAsync(cancellationToken);
                    StorageGroup = new List<string>(_list1429.Count);
                    for(int _i1430 = 0; _i1430 < _list1429.Count; ++_i1430)
                    {
                      string _elem1431;
                      _elem1431 = await iprot.ReadStringAsync(cancellationToken);
                      StorageGroup.Add(_elem1431);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1432 = new TStruct("deleteStorageGroups_args");
          await oprot.WriteStructBeginAsync(tmp1432, cancellationToken);
          var tmp1433 = new TField();
          if(__isset.sessionId)
          {
            tmp1433.Name = "sessionId";
            tmp1433.Type = TType.I64;
            tmp1433.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1433, cancellationToken);
            await oprot.WriteI64Async(SessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((StorageGroup != null) && __isset.storageGroup)
          {
            tmp1433.Name = "storageGroup";
            tmp1433.Type = TType.List;
            tmp1433.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1433, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, StorageGroup.Count), cancellationToken);
              foreach (string _iter1434 in StorageGroup)
              {
                await oprot.WriteStringAsync(_iter1434, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is deleteStorageGroups_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
          && ((__isset.storageGroup == other.__isset.storageGroup) && ((!__isset.storageGroup) || (TCollections.Equals(StorageGroup, other.StorageGroup))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.sessionId)
          {
            hashcode = (hashcode * 397) + SessionId.GetHashCode();
          }
          if((StorageGroup != null) && __isset.storageGroup)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(StorageGroup);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1435 = new StringBuilder("deleteStorageGroups_args(");
        int tmp1436 = 0;
        if(__isset.sessionId)
        {
          if(0 < tmp1436++) { tmp1435.Append(", "); }
          tmp1435.Append("SessionId: ");
          SessionId.ToString(tmp1435);
        }
        if((StorageGroup != null) && __isset.storageGroup)
        {
          if(0 < tmp1436++) { tmp1435.Append(", "); }
          tmp1435.Append("StorageGroup: ");
          StorageGroup.ToString(tmp1435);
        }
        tmp1435.Append(')');
        return tmp1435.ToString();
      }
    }


    public partial class deleteStorageGroups_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public deleteStorageGroups_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1437 = new TStruct("deleteStorageGroups_result");
          await oprot.WriteStructBeginAsync(tmp1437, cancellationToken);
          var tmp1438 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1438.Name = "Success";
              tmp1438.Type = TType.Struct;
              tmp1438.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1438, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is deleteStorageGroups_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1439 = new StringBuilder("deleteStorageGroups_result(");
        int tmp1440 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1440++) { tmp1439.Append(", "); }
          tmp1439.Append("Success: ");
          Success.ToString(tmp1439);
        }
        tmp1439.Append(')');
        return tmp1439.ToString();
      }
    }


    public partial class insertRecord_args : TBase
    {
      private TSInsertRecordReq _req;

      public TSInsertRecordReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertRecord_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertRecordReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1441 = new TStruct("insertRecord_args");
          await oprot.WriteStructBeginAsync(tmp1441, cancellationToken);
          var tmp1442 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1442.Name = "req";
            tmp1442.Type = TType.Struct;
            tmp1442.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1442, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertRecord_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1443 = new StringBuilder("insertRecord_args(");
        int tmp1444 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1444++) { tmp1443.Append(", "); }
          tmp1443.Append("Req: ");
          Req.ToString(tmp1443);
        }
        tmp1443.Append(')');
        return tmp1443.ToString();
      }
    }


    public partial class insertRecord_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertRecord_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1445 = new TStruct("insertRecord_result");
          await oprot.WriteStructBeginAsync(tmp1445, cancellationToken);
          var tmp1446 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1446.Name = "Success";
              tmp1446.Type = TType.Struct;
              tmp1446.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1446, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertRecord_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1447 = new StringBuilder("insertRecord_result(");
        int tmp1448 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1448++) { tmp1447.Append(", "); }
          tmp1447.Append("Success: ");
          Success.ToString(tmp1447);
        }
        tmp1447.Append(')');
        return tmp1447.ToString();
      }
    }


    public partial class insertStringRecord_args : TBase
    {
      private TSInsertStringRecordReq _req;

      public TSInsertStringRecordReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertStringRecord_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertStringRecordReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1449 = new TStruct("insertStringRecord_args");
          await oprot.WriteStructBeginAsync(tmp1449, cancellationToken);
          var tmp1450 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1450.Name = "req";
            tmp1450.Type = TType.Struct;
            tmp1450.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1450, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertStringRecord_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1451 = new StringBuilder("insertStringRecord_args(");
        int tmp1452 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1452++) { tmp1451.Append(", "); }
          tmp1451.Append("Req: ");
          Req.ToString(tmp1451);
        }
        tmp1451.Append(')');
        return tmp1451.ToString();
      }
    }


    public partial class insertStringRecord_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertStringRecord_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1453 = new TStruct("insertStringRecord_result");
          await oprot.WriteStructBeginAsync(tmp1453, cancellationToken);
          var tmp1454 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1454.Name = "Success";
              tmp1454.Type = TType.Struct;
              tmp1454.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1454, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertStringRecord_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1455 = new StringBuilder("insertStringRecord_result(");
        int tmp1456 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1456++) { tmp1455.Append(", "); }
          tmp1455.Append("Success: ");
          Success.ToString(tmp1455);
        }
        tmp1455.Append(')');
        return tmp1455.ToString();
      }
    }


    public partial class insertTablet_args : TBase
    {
      private TSInsertTabletReq _req;

      public TSInsertTabletReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertTablet_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertTabletReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1457 = new TStruct("insertTablet_args");
          await oprot.WriteStructBeginAsync(tmp1457, cancellationToken);
          var tmp1458 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1458.Name = "req";
            tmp1458.Type = TType.Struct;
            tmp1458.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1458, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertTablet_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1459 = new StringBuilder("insertTablet_args(");
        int tmp1460 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1460++) { tmp1459.Append(", "); }
          tmp1459.Append("Req: ");
          Req.ToString(tmp1459);
        }
        tmp1459.Append(')');
        return tmp1459.ToString();
      }
    }


    public partial class insertTablet_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertTablet_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1461 = new TStruct("insertTablet_result");
          await oprot.WriteStructBeginAsync(tmp1461, cancellationToken);
          var tmp1462 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1462.Name = "Success";
              tmp1462.Type = TType.Struct;
              tmp1462.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertTablet_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1463 = new StringBuilder("insertTablet_result(");
        int tmp1464 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1464++) { tmp1463.Append(", "); }
          tmp1463.Append("Success: ");
          Success.ToString(tmp1463);
        }
        tmp1463.Append(')');
        return tmp1463.ToString();
      }
    }


    public partial class insertTablets_args : TBase
    {
      private TSInsertTabletsReq _req;

      public TSInsertTabletsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertTablets_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertTabletsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1465 = new TStruct("insertTablets_args");
          await oprot.WriteStructBeginAsync(tmp1465, cancellationToken);
          var tmp1466 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1466.Name = "req";
            tmp1466.Type = TType.Struct;
            tmp1466.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1466, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertTablets_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1467 = new StringBuilder("insertTablets_args(");
        int tmp1468 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1468++) { tmp1467.Append(", "); }
          tmp1467.Append("Req: ");
          Req.ToString(tmp1467);
        }
        tmp1467.Append(')');
        return tmp1467.ToString();
      }
    }


    public partial class insertTablets_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertTablets_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1469 = new TStruct("insertTablets_result");
          await oprot.WriteStructBeginAsync(tmp1469, cancellationToken);
          var tmp1470 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1470.Name = "Success";
              tmp1470.Type = TType.Struct;
              tmp1470.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1470, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertTablets_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1471 = new StringBuilder("insertTablets_result(");
        int tmp1472 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1472++) { tmp1471.Append(", "); }
          tmp1471.Append("Success: ");
          Success.ToString(tmp1471);
        }
        tmp1471.Append(')');
        return tmp1471.ToString();
      }
    }


    public partial class insertRecords_args : TBase
    {
      private TSInsertRecordsReq _req;

      public TSInsertRecordsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertRecords_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertRecordsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1473 = new TStruct("insertRecords_args");
          await oprot.WriteStructBeginAsync(tmp1473, cancellationToken);
          var tmp1474 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1474.Name = "req";
            tmp1474.Type = TType.Struct;
            tmp1474.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1474, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertRecords_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1475 = new StringBuilder("insertRecords_args(");
        int tmp1476 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1476++) { tmp1475.Append(", "); }
          tmp1475.Append("Req: ");
          Req.ToString(tmp1475);
        }
        tmp1475.Append(')');
        return tmp1475.ToString();
      }
    }


    public partial class insertRecords_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertRecords_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1477 = new TStruct("insertRecords_result");
          await oprot.WriteStructBeginAsync(tmp1477, cancellationToken);
          var tmp1478 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1478.Name = "Success";
              tmp1478.Type = TType.Struct;
              tmp1478.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1478, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertRecords_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1479 = new StringBuilder("insertRecords_result(");
        int tmp1480 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1480++) { tmp1479.Append(", "); }
          tmp1479.Append("Success: ");
          Success.ToString(tmp1479);
        }
        tmp1479.Append(')');
        return tmp1479.ToString();
      }
    }


    public partial class insertRecordsOfOneDevice_args : TBase
    {
      private TSInsertRecordsOfOneDeviceReq _req;

      public TSInsertRecordsOfOneDeviceReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertRecordsOfOneDevice_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertRecordsOfOneDeviceReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1481 = new TStruct("insertRecordsOfOneDevice_args");
          await oprot.WriteStructBeginAsync(tmp1481, cancellationToken);
          var tmp1482 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1482.Name = "req";
            tmp1482.Type = TType.Struct;
            tmp1482.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertRecordsOfOneDevice_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1483 = new StringBuilder("insertRecordsOfOneDevice_args(");
        int tmp1484 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1484++) { tmp1483.Append(", "); }
          tmp1483.Append("Req: ");
          Req.ToString(tmp1483);
        }
        tmp1483.Append(')');
        return tmp1483.ToString();
      }
    }


    public partial class insertRecordsOfOneDevice_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertRecordsOfOneDevice_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1485 = new TStruct("insertRecordsOfOneDevice_result");
          await oprot.WriteStructBeginAsync(tmp1485, cancellationToken);
          var tmp1486 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1486.Name = "Success";
              tmp1486.Type = TType.Struct;
              tmp1486.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1486, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertRecordsOfOneDevice_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1487 = new StringBuilder("insertRecordsOfOneDevice_result(");
        int tmp1488 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1488++) { tmp1487.Append(", "); }
          tmp1487.Append("Success: ");
          Success.ToString(tmp1487);
        }
        tmp1487.Append(')');
        return tmp1487.ToString();
      }
    }


    public partial class insertStringRecordsOfOneDevice_args : TBase
    {
      private TSInsertStringRecordsOfOneDeviceReq _req;

      public TSInsertStringRecordsOfOneDeviceReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertStringRecordsOfOneDevice_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertStringRecordsOfOneDeviceReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1489 = new TStruct("insertStringRecordsOfOneDevice_args");
          await oprot.WriteStructBeginAsync(tmp1489, cancellationToken);
          var tmp1490 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1490.Name = "req";
            tmp1490.Type = TType.Struct;
            tmp1490.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1490, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertStringRecordsOfOneDevice_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1491 = new StringBuilder("insertStringRecordsOfOneDevice_args(");
        int tmp1492 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1492++) { tmp1491.Append(", "); }
          tmp1491.Append("Req: ");
          Req.ToString(tmp1491);
        }
        tmp1491.Append(')');
        return tmp1491.ToString();
      }
    }


    public partial class insertStringRecordsOfOneDevice_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertStringRecordsOfOneDevice_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1493 = new TStruct("insertStringRecordsOfOneDevice_result");
          await oprot.WriteStructBeginAsync(tmp1493, cancellationToken);
          var tmp1494 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1494.Name = "Success";
              tmp1494.Type = TType.Struct;
              tmp1494.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1494, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertStringRecordsOfOneDevice_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1495 = new StringBuilder("insertStringRecordsOfOneDevice_result(");
        int tmp1496 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1496++) { tmp1495.Append(", "); }
          tmp1495.Append("Success: ");
          Success.ToString(tmp1495);
        }
        tmp1495.Append(')');
        return tmp1495.ToString();
      }
    }


    public partial class insertStringRecords_args : TBase
    {
      private TSInsertStringRecordsReq _req;

      public TSInsertStringRecordsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public insertStringRecords_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertStringRecordsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1497 = new TStruct("insertStringRecords_args");
          await oprot.WriteStructBeginAsync(tmp1497, cancellationToken);
          var tmp1498 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1498.Name = "req";
            tmp1498.Type = TType.Struct;
            tmp1498.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertStringRecords_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1499 = new StringBuilder("insertStringRecords_args(");
        int tmp1500 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1500++) { tmp1499.Append(", "); }
          tmp1499.Append("Req: ");
          Req.ToString(tmp1499);
        }
        tmp1499.Append(')');
        return tmp1499.ToString();
      }
    }


    public partial class insertStringRecords_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public insertStringRecords_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1501 = new TStruct("insertStringRecords_result");
          await oprot.WriteStructBeginAsync(tmp1501, cancellationToken);
          var tmp1502 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1502.Name = "Success";
              tmp1502.Type = TType.Struct;
              tmp1502.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1502, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is insertStringRecords_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1503 = new StringBuilder("insertStringRecords_result(");
        int tmp1504 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1504++) { tmp1503.Append(", "); }
          tmp1503.Append("Success: ");
          Success.ToString(tmp1503);
        }
        tmp1503.Append(')');
        return tmp1503.ToString();
      }
    }


    public partial class testInsertTablet_args : TBase
    {
      private TSInsertTabletReq _req;

      public TSInsertTabletReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertTablet_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertTabletReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1505 = new TStruct("testInsertTablet_args");
          await oprot.WriteStructBeginAsync(tmp1505, cancellationToken);
          var tmp1506 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1506.Name = "req";
            tmp1506.Type = TType.Struct;
            tmp1506.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1506, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertTablet_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1507 = new StringBuilder("testInsertTablet_args(");
        int tmp1508 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1508++) { tmp1507.Append(", "); }
          tmp1507.Append("Req: ");
          Req.ToString(tmp1507);
        }
        tmp1507.Append(')');
        return tmp1507.ToString();
      }
    }


    public partial class testInsertTablet_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertTablet_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1509 = new TStruct("testInsertTablet_result");
          await oprot.WriteStructBeginAsync(tmp1509, cancellationToken);
          var tmp1510 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1510.Name = "Success";
              tmp1510.Type = TType.Struct;
              tmp1510.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1510, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertTablet_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1511 = new StringBuilder("testInsertTablet_result(");
        int tmp1512 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1512++) { tmp1511.Append(", "); }
          tmp1511.Append("Success: ");
          Success.ToString(tmp1511);
        }
        tmp1511.Append(')');
        return tmp1511.ToString();
      }
    }


    public partial class testInsertTablets_args : TBase
    {
      private TSInsertTabletsReq _req;

      public TSInsertTabletsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertTablets_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertTabletsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1513 = new TStruct("testInsertTablets_args");
          await oprot.WriteStructBeginAsync(tmp1513, cancellationToken);
          var tmp1514 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1514.Name = "req";
            tmp1514.Type = TType.Struct;
            tmp1514.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1514, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertTablets_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1515 = new StringBuilder("testInsertTablets_args(");
        int tmp1516 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1516++) { tmp1515.Append(", "); }
          tmp1515.Append("Req: ");
          Req.ToString(tmp1515);
        }
        tmp1515.Append(')');
        return tmp1515.ToString();
      }
    }


    public partial class testInsertTablets_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertTablets_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1517 = new TStruct("testInsertTablets_result");
          await oprot.WriteStructBeginAsync(tmp1517, cancellationToken);
          var tmp1518 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1518.Name = "Success";
              tmp1518.Type = TType.Struct;
              tmp1518.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1518, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertTablets_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1519 = new StringBuilder("testInsertTablets_result(");
        int tmp1520 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1520++) { tmp1519.Append(", "); }
          tmp1519.Append("Success: ");
          Success.ToString(tmp1519);
        }
        tmp1519.Append(')');
        return tmp1519.ToString();
      }
    }


    public partial class testInsertRecord_args : TBase
    {
      private TSInsertRecordReq _req;

      public TSInsertRecordReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertRecord_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertRecordReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1521 = new TStruct("testInsertRecord_args");
          await oprot.WriteStructBeginAsync(tmp1521, cancellationToken);
          var tmp1522 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1522.Name = "req";
            tmp1522.Type = TType.Struct;
            tmp1522.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1522, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertRecord_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1523 = new StringBuilder("testInsertRecord_args(");
        int tmp1524 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1524++) { tmp1523.Append(", "); }
          tmp1523.Append("Req: ");
          Req.ToString(tmp1523);
        }
        tmp1523.Append(')');
        return tmp1523.ToString();
      }
    }


    public partial class testInsertRecord_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertRecord_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1525 = new TStruct("testInsertRecord_result");
          await oprot.WriteStructBeginAsync(tmp1525, cancellationToken);
          var tmp1526 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1526.Name = "Success";
              tmp1526.Type = TType.Struct;
              tmp1526.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1526, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertRecord_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1527 = new StringBuilder("testInsertRecord_result(");
        int tmp1528 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1528++) { tmp1527.Append(", "); }
          tmp1527.Append("Success: ");
          Success.ToString(tmp1527);
        }
        tmp1527.Append(')');
        return tmp1527.ToString();
      }
    }


    public partial class testInsertStringRecord_args : TBase
    {
      private TSInsertStringRecordReq _req;

      public TSInsertStringRecordReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertStringRecord_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertStringRecordReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1529 = new TStruct("testInsertStringRecord_args");
          await oprot.WriteStructBeginAsync(tmp1529, cancellationToken);
          var tmp1530 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1530.Name = "req";
            tmp1530.Type = TType.Struct;
            tmp1530.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1530, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertStringRecord_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1531 = new StringBuilder("testInsertStringRecord_args(");
        int tmp1532 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1532++) { tmp1531.Append(", "); }
          tmp1531.Append("Req: ");
          Req.ToString(tmp1531);
        }
        tmp1531.Append(')');
        return tmp1531.ToString();
      }
    }


    public partial class testInsertStringRecord_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertStringRecord_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1533 = new TStruct("testInsertStringRecord_result");
          await oprot.WriteStructBeginAsync(tmp1533, cancellationToken);
          var tmp1534 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1534.Name = "Success";
              tmp1534.Type = TType.Struct;
              tmp1534.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1534, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertStringRecord_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1535 = new StringBuilder("testInsertStringRecord_result(");
        int tmp1536 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1536++) { tmp1535.Append(", "); }
          tmp1535.Append("Success: ");
          Success.ToString(tmp1535);
        }
        tmp1535.Append(')');
        return tmp1535.ToString();
      }
    }


    public partial class testInsertRecords_args : TBase
    {
      private TSInsertRecordsReq _req;

      public TSInsertRecordsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertRecords_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertRecordsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1537 = new TStruct("testInsertRecords_args");
          await oprot.WriteStructBeginAsync(tmp1537, cancellationToken);
          var tmp1538 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1538.Name = "req";
            tmp1538.Type = TType.Struct;
            tmp1538.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1538, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertRecords_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1539 = new StringBuilder("testInsertRecords_args(");
        int tmp1540 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1540++) { tmp1539.Append(", "); }
          tmp1539.Append("Req: ");
          Req.ToString(tmp1539);
        }
        tmp1539.Append(')');
        return tmp1539.ToString();
      }
    }


    public partial class testInsertRecords_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertRecords_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1541 = new TStruct("testInsertRecords_result");
          await oprot.WriteStructBeginAsync(tmp1541, cancellationToken);
          var tmp1542 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1542.Name = "Success";
              tmp1542.Type = TType.Struct;
              tmp1542.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertRecords_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1543 = new StringBuilder("testInsertRecords_result(");
        int tmp1544 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1544++) { tmp1543.Append(", "); }
          tmp1543.Append("Success: ");
          Success.ToString(tmp1543);
        }
        tmp1543.Append(')');
        return tmp1543.ToString();
      }
    }


    public partial class testInsertRecordsOfOneDevice_args : TBase
    {
      private TSInsertRecordsOfOneDeviceReq _req;

      public TSInsertRecordsOfOneDeviceReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertRecordsOfOneDevice_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertRecordsOfOneDeviceReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1545 = new TStruct("testInsertRecordsOfOneDevice_args");
          await oprot.WriteStructBeginAsync(tmp1545, cancellationToken);
          var tmp1546 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1546.Name = "req";
            tmp1546.Type = TType.Struct;
            tmp1546.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1546, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertRecordsOfOneDevice_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1547 = new StringBuilder("testInsertRecordsOfOneDevice_args(");
        int tmp1548 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1548++) { tmp1547.Append(", "); }
          tmp1547.Append("Req: ");
          Req.ToString(tmp1547);
        }
        tmp1547.Append(')');
        return tmp1547.ToString();
      }
    }


    public partial class testInsertRecordsOfOneDevice_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertRecordsOfOneDevice_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1549 = new TStruct("testInsertRecordsOfOneDevice_result");
          await oprot.WriteStructBeginAsync(tmp1549, cancellationToken);
          var tmp1550 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1550.Name = "Success";
              tmp1550.Type = TType.Struct;
              tmp1550.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1550, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertRecordsOfOneDevice_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1551 = new StringBuilder("testInsertRecordsOfOneDevice_result(");
        int tmp1552 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1552++) { tmp1551.Append(", "); }
          tmp1551.Append("Success: ");
          Success.ToString(tmp1551);
        }
        tmp1551.Append(')');
        return tmp1551.ToString();
      }
    }


    public partial class testInsertStringRecords_args : TBase
    {
      private TSInsertStringRecordsReq _req;

      public TSInsertStringRecordsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public testInsertStringRecords_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSInsertStringRecordsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1553 = new TStruct("testInsertStringRecords_args");
          await oprot.WriteStructBeginAsync(tmp1553, cancellationToken);
          var tmp1554 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1554.Name = "req";
            tmp1554.Type = TType.Struct;
            tmp1554.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1554, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertStringRecords_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1555 = new StringBuilder("testInsertStringRecords_args(");
        int tmp1556 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1556++) { tmp1555.Append(", "); }
          tmp1555.Append("Req: ");
          Req.ToString(tmp1555);
        }
        tmp1555.Append(')');
        return tmp1555.ToString();
      }
    }


    public partial class testInsertStringRecords_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testInsertStringRecords_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1557 = new TStruct("testInsertStringRecords_result");
          await oprot.WriteStructBeginAsync(tmp1557, cancellationToken);
          var tmp1558 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1558.Name = "Success";
              tmp1558.Type = TType.Struct;
              tmp1558.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1558, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testInsertStringRecords_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1559 = new StringBuilder("testInsertStringRecords_result(");
        int tmp1560 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1560++) { tmp1559.Append(", "); }
          tmp1559.Append("Success: ");
          Success.ToString(tmp1559);
        }
        tmp1559.Append(')');
        return tmp1559.ToString();
      }
    }


    public partial class deleteData_args : TBase
    {
      private TSDeleteDataReq _req;

      public TSDeleteDataReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public deleteData_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSDeleteDataReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1561 = new TStruct("deleteData_args");
          await oprot.WriteStructBeginAsync(tmp1561, cancellationToken);
          var tmp1562 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1562.Name = "req";
            tmp1562.Type = TType.Struct;
            tmp1562.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1562, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is deleteData_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1563 = new StringBuilder("deleteData_args(");
        int tmp1564 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1564++) { tmp1563.Append(", "); }
          tmp1563.Append("Req: ");
          Req.ToString(tmp1563);
        }
        tmp1563.Append(')');
        return tmp1563.ToString();
      }
    }


    public partial class deleteData_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public deleteData_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1565 = new TStruct("deleteData_result");
          await oprot.WriteStructBeginAsync(tmp1565, cancellationToken);
          var tmp1566 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1566.Name = "Success";
              tmp1566.Type = TType.Struct;
              tmp1566.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1566, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is deleteData_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1567 = new StringBuilder("deleteData_result(");
        int tmp1568 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1568++) { tmp1567.Append(", "); }
          tmp1567.Append("Success: ");
          Success.ToString(tmp1567);
        }
        tmp1567.Append(')');
        return tmp1567.ToString();
      }
    }


    public partial class executeRawDataQuery_args : TBase
    {
      private TSRawDataQueryReq _req;

      public TSRawDataQueryReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeRawDataQuery_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSRawDataQueryReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1569 = new TStruct("executeRawDataQuery_args");
          await oprot.WriteStructBeginAsync(tmp1569, cancellationToken);
          var tmp1570 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1570.Name = "req";
            tmp1570.Type = TType.Struct;
            tmp1570.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1570, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeRawDataQuery_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1571 = new StringBuilder("executeRawDataQuery_args(");
        int tmp1572 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1572++) { tmp1571.Append(", "); }
          tmp1571.Append("Req: ");
          Req.ToString(tmp1571);
        }
        tmp1571.Append(')');
        return tmp1571.ToString();
      }
    }


    public partial class executeRawDataQuery_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeRawDataQuery_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1573 = new TStruct("executeRawDataQuery_result");
          await oprot.WriteStructBeginAsync(tmp1573, cancellationToken);
          var tmp1574 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1574.Name = "Success";
              tmp1574.Type = TType.Struct;
              tmp1574.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1574, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeRawDataQuery_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1575 = new StringBuilder("executeRawDataQuery_result(");
        int tmp1576 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1576++) { tmp1575.Append(", "); }
          tmp1575.Append("Success: ");
          Success.ToString(tmp1575);
        }
        tmp1575.Append(')');
        return tmp1575.ToString();
      }
    }


    public partial class executeLastDataQuery_args : TBase
    {
      private TSLastDataQueryReq _req;

      public TSLastDataQueryReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeLastDataQuery_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSLastDataQueryReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1577 = new TStruct("executeLastDataQuery_args");
          await oprot.WriteStructBeginAsync(tmp1577, cancellationToken);
          var tmp1578 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1578.Name = "req";
            tmp1578.Type = TType.Struct;
            tmp1578.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1578, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeLastDataQuery_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1579 = new StringBuilder("executeLastDataQuery_args(");
        int tmp1580 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1580++) { tmp1579.Append(", "); }
          tmp1579.Append("Req: ");
          Req.ToString(tmp1579);
        }
        tmp1579.Append(')');
        return tmp1579.ToString();
      }
    }


    public partial class executeLastDataQuery_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeLastDataQuery_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1581 = new TStruct("executeLastDataQuery_result");
          await oprot.WriteStructBeginAsync(tmp1581, cancellationToken);
          var tmp1582 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1582.Name = "Success";
              tmp1582.Type = TType.Struct;
              tmp1582.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeLastDataQuery_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1583 = new StringBuilder("executeLastDataQuery_result(");
        int tmp1584 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1584++) { tmp1583.Append(", "); }
          tmp1583.Append("Success: ");
          Success.ToString(tmp1583);
        }
        tmp1583.Append(')');
        return tmp1583.ToString();
      }
    }


    public partial class executeAggregationQuery_args : TBase
    {
      private TSAggregationQueryReq _req;

      public TSAggregationQueryReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public executeAggregationQuery_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSAggregationQueryReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1585 = new TStruct("executeAggregationQuery_args");
          await oprot.WriteStructBeginAsync(tmp1585, cancellationToken);
          var tmp1586 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1586.Name = "req";
            tmp1586.Type = TType.Struct;
            tmp1586.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1586, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeAggregationQuery_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1587 = new StringBuilder("executeAggregationQuery_args(");
        int tmp1588 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1588++) { tmp1587.Append(", "); }
          tmp1587.Append("Req: ");
          Req.ToString(tmp1587);
        }
        tmp1587.Append(')');
        return tmp1587.ToString();
      }
    }


    public partial class executeAggregationQuery_result : TBase
    {
      private TSExecuteStatementResp _success;

      public TSExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public executeAggregationQuery_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1589 = new TStruct("executeAggregationQuery_result");
          await oprot.WriteStructBeginAsync(tmp1589, cancellationToken);
          var tmp1590 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1590.Name = "Success";
              tmp1590.Type = TType.Struct;
              tmp1590.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1590, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is executeAggregationQuery_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1591 = new StringBuilder("executeAggregationQuery_result(");
        int tmp1592 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1592++) { tmp1591.Append(", "); }
          tmp1591.Append("Success: ");
          Success.ToString(tmp1591);
        }
        tmp1591.Append(')');
        return tmp1591.ToString();
      }
    }


    public partial class requestStatementId_args : TBase
    {
      private long _sessionId;

      public long SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sessionId;
      }

      public requestStatementId_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  SessionId = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1593 = new TStruct("requestStatementId_args");
          await oprot.WriteStructBeginAsync(tmp1593, cancellationToken);
          var tmp1594 = new TField();
          if(__isset.sessionId)
          {
            tmp1594.Name = "sessionId";
            tmp1594.Type = TType.I64;
            tmp1594.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1594, cancellationToken);
            await oprot.WriteI64Async(SessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is requestStatementId_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.sessionId)
          {
            hashcode = (hashcode * 397) + SessionId.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1595 = new StringBuilder("requestStatementId_args(");
        int tmp1596 = 0;
        if(__isset.sessionId)
        {
          if(0 < tmp1596++) { tmp1595.Append(", "); }
          tmp1595.Append("SessionId: ");
          SessionId.ToString(tmp1595);
        }
        tmp1595.Append(')');
        return tmp1595.ToString();
      }
    }


    public partial class requestStatementId_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public requestStatementId_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1597 = new TStruct("requestStatementId_result");
          await oprot.WriteStructBeginAsync(tmp1597, cancellationToken);
          var tmp1598 = new TField();

          if(this.__isset.success)
          {
            tmp1598.Name = "Success";
            tmp1598.Type = TType.I64;
            tmp1598.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is requestStatementId_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1599 = new StringBuilder("requestStatementId_result(");
        int tmp1600 = 0;
        if(__isset.success)
        {
          if(0 < tmp1600++) { tmp1599.Append(", "); }
          tmp1599.Append("Success: ");
          Success.ToString(tmp1599);
        }
        tmp1599.Append(')');
        return tmp1599.ToString();
      }
    }


    public partial class createSchemaTemplate_args : TBase
    {
      private TSCreateSchemaTemplateReq _req;

      public TSCreateSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public createSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSCreateSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1601 = new TStruct("createSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1601, cancellationToken);
          var tmp1602 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1602.Name = "req";
            tmp1602.Type = TType.Struct;
            tmp1602.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1602, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1603 = new StringBuilder("createSchemaTemplate_args(");
        int tmp1604 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1604++) { tmp1603.Append(", "); }
          tmp1603.Append("Req: ");
          Req.ToString(tmp1603);
        }
        tmp1603.Append(')');
        return tmp1603.ToString();
      }
    }


    public partial class createSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public createSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1605 = new TStruct("createSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1605, cancellationToken);
          var tmp1606 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1606.Name = "Success";
              tmp1606.Type = TType.Struct;
              tmp1606.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1606, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1607 = new StringBuilder("createSchemaTemplate_result(");
        int tmp1608 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1608++) { tmp1607.Append(", "); }
          tmp1607.Append("Success: ");
          Success.ToString(tmp1607);
        }
        tmp1607.Append(')');
        return tmp1607.ToString();
      }
    }


    public partial class appendSchemaTemplate_args : TBase
    {
      private TSAppendSchemaTemplateReq _req;

      public TSAppendSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public appendSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSAppendSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1609 = new TStruct("appendSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1609, cancellationToken);
          var tmp1610 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1610.Name = "req";
            tmp1610.Type = TType.Struct;
            tmp1610.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1610, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is appendSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1611 = new StringBuilder("appendSchemaTemplate_args(");
        int tmp1612 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1612++) { tmp1611.Append(", "); }
          tmp1611.Append("Req: ");
          Req.ToString(tmp1611);
        }
        tmp1611.Append(')');
        return tmp1611.ToString();
      }
    }


    public partial class appendSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public appendSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1613 = new TStruct("appendSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1613, cancellationToken);
          var tmp1614 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1614.Name = "Success";
              tmp1614.Type = TType.Struct;
              tmp1614.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1614, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is appendSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1615 = new StringBuilder("appendSchemaTemplate_result(");
        int tmp1616 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1616++) { tmp1615.Append(", "); }
          tmp1615.Append("Success: ");
          Success.ToString(tmp1615);
        }
        tmp1615.Append(')');
        return tmp1615.ToString();
      }
    }


    public partial class pruneSchemaTemplate_args : TBase
    {
      private TSPruneSchemaTemplateReq _req;

      public TSPruneSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public pruneSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSPruneSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1617 = new TStruct("pruneSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1617, cancellationToken);
          var tmp1618 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1618.Name = "req";
            tmp1618.Type = TType.Struct;
            tmp1618.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is pruneSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1619 = new StringBuilder("pruneSchemaTemplate_args(");
        int tmp1620 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1620++) { tmp1619.Append(", "); }
          tmp1619.Append("Req: ");
          Req.ToString(tmp1619);
        }
        tmp1619.Append(')');
        return tmp1619.ToString();
      }
    }


    public partial class pruneSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public pruneSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1621 = new TStruct("pruneSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1621, cancellationToken);
          var tmp1622 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1622.Name = "Success";
              tmp1622.Type = TType.Struct;
              tmp1622.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1622, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is pruneSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1623 = new StringBuilder("pruneSchemaTemplate_result(");
        int tmp1624 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1624++) { tmp1623.Append(", "); }
          tmp1623.Append("Success: ");
          Success.ToString(tmp1623);
        }
        tmp1623.Append(')');
        return tmp1623.ToString();
      }
    }


    public partial class querySchemaTemplate_args : TBase
    {
      private TSQueryTemplateReq _req;

      public TSQueryTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public querySchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSQueryTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1625 = new TStruct("querySchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1625, cancellationToken);
          var tmp1626 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1626.Name = "req";
            tmp1626.Type = TType.Struct;
            tmp1626.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is querySchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1627 = new StringBuilder("querySchemaTemplate_args(");
        int tmp1628 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1628++) { tmp1627.Append(", "); }
          tmp1627.Append("Req: ");
          Req.ToString(tmp1627);
        }
        tmp1627.Append(')');
        return tmp1627.ToString();
      }
    }


    public partial class querySchemaTemplate_result : TBase
    {
      private TSQueryTemplateResp _success;

      public TSQueryTemplateResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public querySchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSQueryTemplateResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1629 = new TStruct("querySchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1629, cancellationToken);
          var tmp1630 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1630.Name = "Success";
              tmp1630.Type = TType.Struct;
              tmp1630.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1630, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is querySchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1631 = new StringBuilder("querySchemaTemplate_result(");
        int tmp1632 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1632++) { tmp1631.Append(", "); }
          tmp1631.Append("Success: ");
          Success.ToString(tmp1631);
        }
        tmp1631.Append(')');
        return tmp1631.ToString();
      }
    }


    public partial class showConfigurationTemplate_args : TBase
    {

      public showConfigurationTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1633 = new TStruct("showConfigurationTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1633, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is showConfigurationTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1634 = new StringBuilder("showConfigurationTemplate_args(");
        tmp1634.Append(')');
        return tmp1634.ToString();
      }
    }


    public partial class showConfigurationTemplate_result : TBase
    {
      private TShowConfigurationTemplateResp _success;

      public TShowConfigurationTemplateResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public showConfigurationTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TShowConfigurationTemplateResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1636 = new TStruct("showConfigurationTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1636, cancellationToken);
          var tmp1637 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1637.Name = "Success";
              tmp1637.Type = TType.Struct;
              tmp1637.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1637, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is showConfigurationTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1638 = new StringBuilder("showConfigurationTemplate_result(");
        int tmp1639 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1639++) { tmp1638.Append(", "); }
          tmp1638.Append("Success: ");
          Success.ToString(tmp1638);
        }
        tmp1638.Append(')');
        return tmp1638.ToString();
      }
    }


    public partial class showConfiguration_args : TBase
    {
      private int _nodeId;

      public int NodeId
      {
        get
        {
          return _nodeId;
        }
        set
        {
          __isset.nodeId = true;
          this._nodeId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool nodeId;
      }

      public showConfiguration_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  NodeId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1640 = new TStruct("showConfiguration_args");
          await oprot.WriteStructBeginAsync(tmp1640, cancellationToken);
          var tmp1641 = new TField();
          if(__isset.nodeId)
          {
            tmp1641.Name = "nodeId";
            tmp1641.Type = TType.I32;
            tmp1641.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1641, cancellationToken);
            await oprot.WriteI32Async(NodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is showConfiguration_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.nodeId == other.__isset.nodeId) && ((!__isset.nodeId) || (System.Object.Equals(NodeId, other.NodeId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.nodeId)
          {
            hashcode = (hashcode * 397) + NodeId.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1642 = new StringBuilder("showConfiguration_args(");
        int tmp1643 = 0;
        if(__isset.nodeId)
        {
          if(0 < tmp1643++) { tmp1642.Append(", "); }
          tmp1642.Append("NodeId: ");
          NodeId.ToString(tmp1642);
        }
        tmp1642.Append(')');
        return tmp1642.ToString();
      }
    }


    public partial class showConfiguration_result : TBase
    {
      private TShowConfigurationResp _success;

      public TShowConfigurationResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public showConfiguration_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TShowConfigurationResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1644 = new TStruct("showConfiguration_result");
          await oprot.WriteStructBeginAsync(tmp1644, cancellationToken);
          var tmp1645 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1645.Name = "Success";
              tmp1645.Type = TType.Struct;
              tmp1645.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1645, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is showConfiguration_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1646 = new StringBuilder("showConfiguration_result(");
        int tmp1647 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1647++) { tmp1646.Append(", "); }
          tmp1646.Append("Success: ");
          Success.ToString(tmp1646);
        }
        tmp1646.Append(')');
        return tmp1646.ToString();
      }
    }


    public partial class setSchemaTemplate_args : TBase
    {
      private TSSetSchemaTemplateReq _req;

      public TSSetSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public setSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSSetSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1648 = new TStruct("setSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1648, cancellationToken);
          var tmp1649 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1649.Name = "req";
            tmp1649.Type = TType.Struct;
            tmp1649.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1649, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is setSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1650 = new StringBuilder("setSchemaTemplate_args(");
        int tmp1651 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1651++) { tmp1650.Append(", "); }
          tmp1650.Append("Req: ");
          Req.ToString(tmp1650);
        }
        tmp1650.Append(')');
        return tmp1650.ToString();
      }
    }


    public partial class setSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public setSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1652 = new TStruct("setSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1652, cancellationToken);
          var tmp1653 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1653.Name = "Success";
              tmp1653.Type = TType.Struct;
              tmp1653.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1653, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is setSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1654 = new StringBuilder("setSchemaTemplate_result(");
        int tmp1655 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1655++) { tmp1654.Append(", "); }
          tmp1654.Append("Success: ");
          Success.ToString(tmp1654);
        }
        tmp1654.Append(')');
        return tmp1654.ToString();
      }
    }


    public partial class unsetSchemaTemplate_args : TBase
    {
      private TSUnsetSchemaTemplateReq _req;

      public TSUnsetSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public unsetSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSUnsetSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1656 = new TStruct("unsetSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1656, cancellationToken);
          var tmp1657 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1657.Name = "req";
            tmp1657.Type = TType.Struct;
            tmp1657.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1657, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is unsetSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1658 = new StringBuilder("unsetSchemaTemplate_args(");
        int tmp1659 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1659++) { tmp1658.Append(", "); }
          tmp1658.Append("Req: ");
          Req.ToString(tmp1658);
        }
        tmp1658.Append(')');
        return tmp1658.ToString();
      }
    }


    public partial class unsetSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public unsetSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1660 = new TStruct("unsetSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1660, cancellationToken);
          var tmp1661 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1661.Name = "Success";
              tmp1661.Type = TType.Struct;
              tmp1661.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1661, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is unsetSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1662 = new StringBuilder("unsetSchemaTemplate_result(");
        int tmp1663 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1663++) { tmp1662.Append(", "); }
          tmp1662.Append("Success: ");
          Success.ToString(tmp1662);
        }
        tmp1662.Append(')');
        return tmp1662.ToString();
      }
    }


    public partial class dropSchemaTemplate_args : TBase
    {
      private TSDropSchemaTemplateReq _req;

      public TSDropSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public dropSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSDropSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1664 = new TStruct("dropSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1664, cancellationToken);
          var tmp1665 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1665.Name = "req";
            tmp1665.Type = TType.Struct;
            tmp1665.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1665, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is dropSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1666 = new StringBuilder("dropSchemaTemplate_args(");
        int tmp1667 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1667++) { tmp1666.Append(", "); }
          tmp1666.Append("Req: ");
          Req.ToString(tmp1666);
        }
        tmp1666.Append(')');
        return tmp1666.ToString();
      }
    }


    public partial class dropSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public dropSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1668 = new TStruct("dropSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1668, cancellationToken);
          var tmp1669 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1669.Name = "Success";
              tmp1669.Type = TType.Struct;
              tmp1669.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1669, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is dropSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1670 = new StringBuilder("dropSchemaTemplate_result(");
        int tmp1671 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1671++) { tmp1670.Append(", "); }
          tmp1670.Append("Success: ");
          Success.ToString(tmp1670);
        }
        tmp1670.Append(')');
        return tmp1670.ToString();
      }
    }


    public partial class createTimeseriesUsingSchemaTemplate_args : TBase
    {
      private TCreateTimeseriesUsingSchemaTemplateReq _req;

      public TCreateTimeseriesUsingSchemaTemplateReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public createTimeseriesUsingSchemaTemplate_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TCreateTimeseriesUsingSchemaTemplateReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1672 = new TStruct("createTimeseriesUsingSchemaTemplate_args");
          await oprot.WriteStructBeginAsync(tmp1672, cancellationToken);
          var tmp1673 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1673.Name = "req";
            tmp1673.Type = TType.Struct;
            tmp1673.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1673, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createTimeseriesUsingSchemaTemplate_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1674 = new StringBuilder("createTimeseriesUsingSchemaTemplate_args(");
        int tmp1675 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1675++) { tmp1674.Append(", "); }
          tmp1674.Append("Req: ");
          Req.ToString(tmp1674);
        }
        tmp1674.Append(')');
        return tmp1674.ToString();
      }
    }


    public partial class createTimeseriesUsingSchemaTemplate_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public createTimeseriesUsingSchemaTemplate_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1676 = new TStruct("createTimeseriesUsingSchemaTemplate_result");
          await oprot.WriteStructBeginAsync(tmp1676, cancellationToken);
          var tmp1677 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1677.Name = "Success";
              tmp1677.Type = TType.Struct;
              tmp1677.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is createTimeseriesUsingSchemaTemplate_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1678 = new StringBuilder("createTimeseriesUsingSchemaTemplate_result(");
        int tmp1679 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1679++) { tmp1678.Append(", "); }
          tmp1678.Append("Success: ");
          Success.ToString(tmp1678);
        }
        tmp1678.Append(')');
        return tmp1678.ToString();
      }
    }


    public partial class handshake_args : TBase
    {
      private TSyncIdentityInfo _info;

      public TSyncIdentityInfo Info
      {
        get
        {
          return _info;
        }
        set
        {
          __isset.info = true;
          this._info = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool info;
      }

      public handshake_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case -1:
                if (field.Type == TType.Struct)
                {
                  Info = new TSyncIdentityInfo();
                  await Info.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1680 = new TStruct("handshake_args");
          await oprot.WriteStructBeginAsync(tmp1680, cancellationToken);
          var tmp1681 = new TField();
          if((Info != null) && __isset.info)
          {
            tmp1681.Name = "info";
            tmp1681.Type = TType.Struct;
            tmp1681.ID = -1;
            await oprot.WriteFieldBeginAsync(tmp1681, cancellationToken);
            await Info.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is handshake_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.info == other.__isset.info) && ((!__isset.info) || (System.Object.Equals(Info, other.Info))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Info != null) && __isset.info)
          {
            hashcode = (hashcode * 397) + Info.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1682 = new StringBuilder("handshake_args(");
        int tmp1683 = 0;
        if((Info != null) && __isset.info)
        {
          if(0 < tmp1683++) { tmp1682.Append(", "); }
          tmp1682.Append("Info: ");
          Info.ToString(tmp1682);
        }
        tmp1682.Append(')');
        return tmp1682.ToString();
      }
    }


    public partial class handshake_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public handshake_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1684 = new TStruct("handshake_result");
          await oprot.WriteStructBeginAsync(tmp1684, cancellationToken);
          var tmp1685 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1685.Name = "Success";
              tmp1685.Type = TType.Struct;
              tmp1685.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is handshake_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1686 = new StringBuilder("handshake_result(");
        int tmp1687 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1687++) { tmp1686.Append(", "); }
          tmp1686.Append("Success: ");
          Success.ToString(tmp1686);
        }
        tmp1686.Append(')');
        return tmp1686.ToString();
      }
    }


    public partial class sendPipeData_args : TBase
    {
      private byte[] _buff;

      public byte[] Buff
      {
        get
        {
          return _buff;
        }
        set
        {
          __isset.buff = true;
          this._buff = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buff;
      }

      public sendPipeData_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Buff = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1688 = new TStruct("sendPipeData_args");
          await oprot.WriteStructBeginAsync(tmp1688, cancellationToken);
          var tmp1689 = new TField();
          if((Buff != null) && __isset.buff)
          {
            tmp1689.Name = "buff";
            tmp1689.Type = TType.String;
            tmp1689.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1689, cancellationToken);
            await oprot.WriteBinaryAsync(Buff, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sendPipeData_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buff == other.__isset.buff) && ((!__isset.buff) || (TCollections.Equals(Buff, other.Buff))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Buff != null) && __isset.buff)
          {
            hashcode = (hashcode * 397) + Buff.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1690 = new StringBuilder("sendPipeData_args(");
        int tmp1691 = 0;
        if((Buff != null) && __isset.buff)
        {
          if(0 < tmp1691++) { tmp1690.Append(", "); }
          tmp1690.Append("Buff: ");
          Buff.ToString(tmp1690);
        }
        tmp1690.Append(')');
        return tmp1690.ToString();
      }
    }


    public partial class sendPipeData_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public sendPipeData_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1692 = new TStruct("sendPipeData_result");
          await oprot.WriteStructBeginAsync(tmp1692, cancellationToken);
          var tmp1693 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1693.Name = "Success";
              tmp1693.Type = TType.Struct;
              tmp1693.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1693, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sendPipeData_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1694 = new StringBuilder("sendPipeData_result(");
        int tmp1695 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1695++) { tmp1694.Append(", "); }
          tmp1694.Append("Success: ");
          Success.ToString(tmp1694);
        }
        tmp1694.Append(')');
        return tmp1694.ToString();
      }
    }


    public partial class sendFile_args : TBase
    {
      private TSyncTransportMetaInfo _metaInfo;
      private byte[] _buff;

      public TSyncTransportMetaInfo MetaInfo
      {
        get
        {
          return _metaInfo;
        }
        set
        {
          __isset.metaInfo = true;
          this._metaInfo = value;
        }
      }

      public byte[] Buff
      {
        get
        {
          return _buff;
        }
        set
        {
          __isset.buff = true;
          this._buff = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool metaInfo;
        public bool buff;
      }

      public sendFile_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  MetaInfo = new TSyncTransportMetaInfo();
                  await MetaInfo.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Buff = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1696 = new TStruct("sendFile_args");
          await oprot.WriteStructBeginAsync(tmp1696, cancellationToken);
          var tmp1697 = new TField();
          if((MetaInfo != null) && __isset.metaInfo)
          {
            tmp1697.Name = "metaInfo";
            tmp1697.Type = TType.Struct;
            tmp1697.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1697, cancellationToken);
            await MetaInfo.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Buff != null) && __isset.buff)
          {
            tmp1697.Name = "buff";
            tmp1697.Type = TType.String;
            tmp1697.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1697, cancellationToken);
            await oprot.WriteBinaryAsync(Buff, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sendFile_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.metaInfo == other.__isset.metaInfo) && ((!__isset.metaInfo) || (System.Object.Equals(MetaInfo, other.MetaInfo))))
          && ((__isset.buff == other.__isset.buff) && ((!__isset.buff) || (TCollections.Equals(Buff, other.Buff))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((MetaInfo != null) && __isset.metaInfo)
          {
            hashcode = (hashcode * 397) + MetaInfo.GetHashCode();
          }
          if((Buff != null) && __isset.buff)
          {
            hashcode = (hashcode * 397) + Buff.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1698 = new StringBuilder("sendFile_args(");
        int tmp1699 = 0;
        if((MetaInfo != null) && __isset.metaInfo)
        {
          if(0 < tmp1699++) { tmp1698.Append(", "); }
          tmp1698.Append("MetaInfo: ");
          MetaInfo.ToString(tmp1698);
        }
        if((Buff != null) && __isset.buff)
        {
          if(0 < tmp1699++) { tmp1698.Append(", "); }
          tmp1698.Append("Buff: ");
          Buff.ToString(tmp1698);
        }
        tmp1698.Append(')');
        return tmp1698.ToString();
      }
    }


    public partial class sendFile_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public sendFile_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1700 = new TStruct("sendFile_result");
          await oprot.WriteStructBeginAsync(tmp1700, cancellationToken);
          var tmp1701 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1701.Name = "Success";
              tmp1701.Type = TType.Struct;
              tmp1701.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1701, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sendFile_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1702 = new StringBuilder("sendFile_result(");
        int tmp1703 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1703++) { tmp1702.Append(", "); }
          tmp1702.Append("Success: ");
          Success.ToString(tmp1702);
        }
        tmp1702.Append(')');
        return tmp1702.ToString();
      }
    }


    public partial class pipeTransfer_args : TBase
    {
      private TPipeTransferReq _req;

      public TPipeTransferReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public pipeTransfer_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case -1:
                if (field.Type == TType.Struct)
                {
                  Req = new TPipeTransferReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1704 = new TStruct("pipeTransfer_args");
          await oprot.WriteStructBeginAsync(tmp1704, cancellationToken);
          var tmp1705 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1705.Name = "req";
            tmp1705.Type = TType.Struct;
            tmp1705.ID = -1;
            await oprot.WriteFieldBeginAsync(tmp1705, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is pipeTransfer_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1706 = new StringBuilder("pipeTransfer_args(");
        int tmp1707 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1707++) { tmp1706.Append(", "); }
          tmp1706.Append("Req: ");
          Req.ToString(tmp1706);
        }
        tmp1706.Append(')');
        return tmp1706.ToString();
      }
    }


    public partial class pipeTransfer_result : TBase
    {
      private TPipeTransferResp _success;

      public TPipeTransferResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public pipeTransfer_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TPipeTransferResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1708 = new TStruct("pipeTransfer_result");
          await oprot.WriteStructBeginAsync(tmp1708, cancellationToken);
          var tmp1709 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1709.Name = "Success";
              tmp1709.Type = TType.Struct;
              tmp1709.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1709, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is pipeTransfer_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1710 = new StringBuilder("pipeTransfer_result(");
        int tmp1711 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1711++) { tmp1710.Append(", "); }
          tmp1710.Append("Success: ");
          Success.ToString(tmp1710);
        }
        tmp1710.Append(')');
        return tmp1710.ToString();
      }
    }


    public partial class pipeSubscribe_args : TBase
    {
      private TPipeSubscribeReq _req;

      public TPipeSubscribeReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool req;
      }

      public pipeSubscribe_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case -1:
                if (field.Type == TType.Struct)
                {
                  Req = new TPipeSubscribeReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1712 = new TStruct("pipeSubscribe_args");
          await oprot.WriteStructBeginAsync(tmp1712, cancellationToken);
          var tmp1713 = new TField();
          if((Req != null) && __isset.req)
          {
            tmp1713.Name = "req";
            tmp1713.Type = TType.Struct;
            tmp1713.ID = -1;
            await oprot.WriteFieldBeginAsync(tmp1713, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is pipeSubscribe_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1714 = new StringBuilder("pipeSubscribe_args(");
        int tmp1715 = 0;
        if((Req != null) && __isset.req)
        {
          if(0 < tmp1715++) { tmp1714.Append(", "); }
          tmp1714.Append("Req: ");
          Req.ToString(tmp1714);
        }
        tmp1714.Append(')');
        return tmp1714.ToString();
      }
    }


    public partial class pipeSubscribe_result : TBase
    {
      private TPipeSubscribeResp _success;

      public TPipeSubscribeResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public pipeSubscribe_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TPipeSubscribeResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1716 = new TStruct("pipeSubscribe_result");
          await oprot.WriteStructBeginAsync(tmp1716, cancellationToken);
          var tmp1717 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1717.Name = "Success";
              tmp1717.Type = TType.Struct;
              tmp1717.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1717, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is pipeSubscribe_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1718 = new StringBuilder("pipeSubscribe_result(");
        int tmp1719 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1719++) { tmp1718.Append(", "); }
          tmp1718.Append("Success: ");
          Success.ToString(tmp1718);
        }
        tmp1718.Append(')');
        return tmp1718.ToString();
      }
    }


    public partial class getBackupConfiguration_args : TBase
    {

      public getBackupConfiguration_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1720 = new TStruct("getBackupConfiguration_args");
          await oprot.WriteStructBeginAsync(tmp1720, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getBackupConfiguration_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1721 = new StringBuilder("getBackupConfiguration_args(");
        tmp1721.Append(')');
        return tmp1721.ToString();
      }
    }


    public partial class getBackupConfiguration_result : TBase
    {
      private TSBackupConfigurationResp _success;

      public TSBackupConfigurationResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getBackupConfiguration_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSBackupConfigurationResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1723 = new TStruct("getBackupConfiguration_result");
          await oprot.WriteStructBeginAsync(tmp1723, cancellationToken);
          var tmp1724 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1724.Name = "Success";
              tmp1724.Type = TType.Struct;
              tmp1724.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1724, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getBackupConfiguration_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1725 = new StringBuilder("getBackupConfiguration_result(");
        int tmp1726 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1726++) { tmp1725.Append(", "); }
          tmp1725.Append("Success: ");
          Success.ToString(tmp1725);
        }
        tmp1725.Append(')');
        return tmp1725.ToString();
      }
    }


    public partial class fetchAllConnectionsInfo_args : TBase
    {

      public fetchAllConnectionsInfo_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1727 = new TStruct("fetchAllConnectionsInfo_args");
          await oprot.WriteStructBeginAsync(tmp1727, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchAllConnectionsInfo_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1728 = new StringBuilder("fetchAllConnectionsInfo_args(");
        tmp1728.Append(')');
        return tmp1728.ToString();
      }
    }


    public partial class fetchAllConnectionsInfo_result : TBase
    {
      private TSConnectionInfoResp _success;

      public TSConnectionInfoResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public fetchAllConnectionsInfo_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSConnectionInfoResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1730 = new TStruct("fetchAllConnectionsInfo_result");
          await oprot.WriteStructBeginAsync(tmp1730, cancellationToken);
          var tmp1731 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1731.Name = "Success";
              tmp1731.Type = TType.Struct;
              tmp1731.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1731, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is fetchAllConnectionsInfo_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1732 = new StringBuilder("fetchAllConnectionsInfo_result(");
        int tmp1733 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1733++) { tmp1732.Append(", "); }
          tmp1732.Append("Success: ");
          Success.ToString(tmp1732);
        }
        tmp1732.Append(')');
        return tmp1732.ToString();
      }
    }


    public partial class testConnectionEmptyRPC_args : TBase
    {

      public testConnectionEmptyRPC_args()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1734 = new TStruct("testConnectionEmptyRPC_args");
          await oprot.WriteStructBeginAsync(tmp1734, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testConnectionEmptyRPC_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1735 = new StringBuilder("testConnectionEmptyRPC_args(");
        tmp1735.Append(')');
        return tmp1735.ToString();
      }
    }


    public partial class testConnectionEmptyRPC_result : TBase
    {
      private TSStatus _success;

      public TSStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public testConnectionEmptyRPC_result()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSStatus();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1737 = new TStruct("testConnectionEmptyRPC_result");
          await oprot.WriteStructBeginAsync(tmp1737, cancellationToken);
          var tmp1738 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1738.Name = "Success";
              tmp1738.Type = TType.Struct;
              tmp1738.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1738, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is testConnectionEmptyRPC_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1739 = new StringBuilder("testConnectionEmptyRPC_result(");
        int tmp1740 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1740++) { tmp1739.Append(", "); }
          tmp1739.Append("Success: ");
          Success.ToString(tmp1739);
        }
        tmp1739.Append(')');
        return tmp1739.ToString();
      }
    }

  }

}
